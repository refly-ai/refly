openapi: 3.0.3
info:
  title: Refly AI
  description: AI-native knowledge management solutions and infra.
  contact:
    email: team@refly.ai
  version: 0.2.0
externalDocs:
  description: Where knowledge thrives
  url: https://refly.ai
servers:
  - url: /v1
tags:
  - name: knowledge
    description: Knowledge base management endpoints
  - name: label
    description: Label management endpoints
  - name: skill
    description: Skill management endpoints
  - name: chat
    description: Chatbot related endpoints
  - name: user
    description: User management endpoints
  - name: search
    description: Search related endpoints
  - name: misc
    description: Miscellaneous endpoints
paths:
  /knowledge/resource/list:
    get:
      tags:
        - knowledge
      summary: List resources
      description: List all resources
      operationId: listResources
      parameters:
        - name: resourceId
          in: query
          description: Resource ID
          schema:
            type: string
            example: r-g30e1b80b5g1itbemc0g5jj3
        - name: resourceType
          in: query
          description: Resource type
          schema:
            type: string
            $ref: '#/components/schemas/ResourceType'
        - name: page
          in: query
          description: Page number
          schema:
            type: number
            default: 1
        - name: pageSize
          in: query
          description: Page size
          schema:
            type: number
            default: 10
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResourceResponse'
      security:
        - api_key: []
  /knowledge/resource/detail:
    get:
      tags:
        - knowledge
      summary: Get resource detail
      description: Return resource detail along with its document content
      operationId: getResourceDetail
      parameters:
        - name: resourceId
          in: query
          description: Resource ID to retrieve
          required: true
          schema:
            type: string
            example: r-g30e1b80b5g1itbemc0g5jj3
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetResourceDetailResponse'
      security:
        - api_key: []
  /knowledge/resource/update:
    post:
      tags:
        - knowledge
      summary: Update resource
      description: Update an existing resource
      operationId: updateResource
      requestBody:
        description: Resource update request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertResourceRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertResourceResponse'
      security:
        - api_key: []
  /knowledge/resource/new:
    post:
      tags:
        - knowledge
      summary: Create new resource
      description: Create a new resource
      operationId: createResource
      requestBody:
        description: Resource creation request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertResourceRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertResourceResponse'
      security:
        - api_key: []
  /knowledge/resource/batch:
    post:
      tags:
        - knowledge
      summary: Batch create new resources
      description: Batch create a new resource
      operationId: batchCreateResource
      requestBody:
        description: Resource creation request
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpsertResourceRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertResourceResponse'
      security:
        - api_key: []
  /knowledge/resource/delete:
    post:
      tags:
        - knowledge
      summary: Delete resource
      description: Delete an existing resource
      operationId: deleteResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteResourceRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
      security:
        - api_key: []
  /knowledge/note/list:
    get:
      tags:
        - knowledge
      summary: List user notes
      description: List all notes for a user
      operationId: listNotes
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: number
            default: 1
        - name: pageSize
          in: query
          description: Page size
          required: false
          schema:
            type: number
            default: 10
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListNoteResponse'
  /knowledge/note/detail:
    get:
      tags:
        - knowledge
      summary: Get note detail
      description: Return note detail
      operationId: getNoteDetail
      parameters:
        - name: noteId
          in: query
          description: Note ID to retrieve
          required: true
          schema:
            type: string
            example: n-g30e1b80b5g1itbemc0g5jj3
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetNoteDetailResponse'
  /knowledge/note/update:
    post:
      tags:
        - knowledge
      summary: Update note
      description: Update an existing note
      operationId: updateNote
      requestBody:
        description: Note update request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertNoteRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertNoteResponse'
      security:
        - api_key: []
  /knowledge/note/new:
    post:
      tags:
        - knowledge
      summary: Create new note
      description: Create a new note
      operationId: createNote
      requestBody:
        description: Note creation request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertNoteRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertNoteResponse'
      security:
        - api_key: []
  /knowledge/note/delete:
    post:
      tags:
        - knowledge
      summary: Delete note
      description: Delete an existing note
      operationId: deleteNote
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteNoteRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
      security:
        - api_key: []
  /knowledge/collection/list:
    get:
      tags:
        - knowledge
      summary: List user collections
      description: List all collections for a user
      operationId: listCollections
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: number
            default: 1
        - name: pageSize
          in: query
          description: Page size
          required: false
          schema:
            type: number
            default: 10
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCollectionResponse'
      security:
        - api_key: []
  /knowledge/collection/detail:
    get:
      tags:
        - knowledge
      summary: Get collection detail
      description: Return collection details along with its resources
      operationId: getCollectionDetail
      parameters:
        - name: collectionId
          in: query
          description: Collection ID to retrieve
          required: true
          schema:
            type: string
            example: cl-g30e1b80b5g1itbemc0g5jj3
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCollectionDetailResponse'
      security:
        - api_key: []
  /knowledge/collection/update:
    post:
      tags:
        - knowledge
      summary: Update collection
      description: Update an existing collection
      operationId: updateCollection
      requestBody:
        description: Collection update request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertCollectionRequest'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertCollectionResponse'
      security:
        - api_key: []
  /knowledge/collection/new:
    post:
      tags:
        - knowledge
      summary: Create new collection
      description: Create a new collection
      operationId: createCollection
      requestBody:
        description: Collection creation request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertCollectionRequest'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertCollectionResponse'
      security:
        - api_key: []
  /knowledge/collection/addResource:
    post:
      tags:
        - knowledge
      summary: Add resource to collection
      description: Add an existing resource to a collection
      operationId: addResourceToCollection
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddResourceToCollectionRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
      security:
        - api_key: []
  /knowledge/collection/removeResource:
    post:
      tags:
        - knowledge
      summary: Remove resource from collection
      description: Remove an existing resource from a collection
      operationId: removeResourceFromCollection
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveResourceFromCollectionRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
      security:
        - api_key: []
  /knowledge/collection/delete:
    post:
      tags:
        - knowledge
      summary: Delete collection
      description: Delete an existing collection
      operationId: deleteCollection
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteCollectionRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
      security:
        - api_key: []
  /label/class/list:
    get:
      tags:
        - label
      summary: List label classes
      description: List all label classes
      operationId: listLabelClasses
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: number
            default: 1
        - name: pageSize
          in: query
          description: Page size
          schema:
            type: number
            default: 10
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLabelClassesResponse'
      security:
        - api_key: []
  /label/class/new:
    post:
      tags:
        - label
      summary: Create new label class
      description: Create a new label class
      operationId: createLabelClass
      requestBody:
        description: Label class creation request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLabelClassRequest'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertLabelClassResponse'
  /label/class/update:
    post:
      tags:
        - label
      summary: Update label class
      description: Update an existing label class
      operationId: updateLabelClass
      requestBody:
        description: Label class update request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLabelClassRequest'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertLabelClassResponse'
  /label/class/delete:
    post:
      tags:
        - label
      summary: Delete label class
      description: Delete an existing label class
      operationId: deleteLabelClass
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteLabelClassRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
  /label/instance/list:
    get:
      tags:
        - label
      summary: List labels
      description: List all label instances
      operationId: listLabelInstances
      parameters:
        - name: entityType
          in: query
          description: Entity type to retrieve
          schema:
            description: Label entity type
            $ref: '#/components/schemas/EntityType'
        - name: entityId
          in: query
          description: Entity type to retrieve
          schema:
            type: string
            example: cl-g30e1b80b5g1itbemc0g5jj3
        - name: classId
          in: query
          description: Label class ID
          schema:
            type: string
            example: lc-g30e1b80b5g1itbemc0g5jj3
        - name: value
          in: query
          description: Label value
          schema:
            type: string
            example: HotPotQA
        - name: page
          in: query
          description: Page number
          schema:
            type: number
            default: 1
        - name: pageSize
          in: query
          description: Page size
          schema:
            type: number
            default: 10
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLabelInstancesResponse'
  /label/instance/new:
    post:
      tags:
        - label
      summary: Create new label instance
      description: Create new label instance
      operationId: createLabelInstance
      requestBody:
        description: Label instance creation request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLabelInstanceRequest'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertLabelInstanceResponse'
  /label/instance/update:
    post:
      tags:
        - label
      summary: Update label
      description: Update an existing label instance
      operationId: updateLabelInstance
      requestBody:
        description: Label update request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLabelInstanceRequest'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertLabelInstanceResponse'
  /label/instance/delete:
    post:
      tags:
        - label
      summary: Delete label
      description: Delete an existing label
      operationId: deleteLabelInstance
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteLabelInstanceRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
  /skill/template/list:
    get:
      tags:
        - skill
      summary: List skill templates
      description: List all skill templates
      operationId: listSkillTemplates
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: number
            default: 1
        - name: pageSize
          in: query
          description: Page size
          schema:
            type: number
            default: 10
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSkillTemplateResponse'
  /skill/instance/list:
    get:
      tags:
        - skill
      summary: List skill instances
      description: List skill instances for a user
      operationId: listSkillInstances
      parameters:
        - name: skillId
          in: query
          description: Skill ID
          schema:
            type: string
        - name: page
          in: query
          description: Page number
          schema:
            type: number
            default: 1
        - name: pageSize
          in: query
          description: Page size
          schema:
            type: number
            default: 10
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSkillInstanceResponse'
  /skill/instance/new:
    post:
      tags:
        - skill
      summary: Create new skill instance
      description: Create a new skill instance for user
      operationId: createSkillInstance
      requestBody:
        description: Skill creation request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSkillInstanceRequest'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSkillInstanceResponse'
  /skill/instance/update:
    post:
      tags:
        - skill
      summary: Update skill instance
      description: Update an existing skill instance
      operationId: updateSkillInstance
      requestBody:
        description: Skill update request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSkillInstanceRequest'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateSkillInstanceResponse'
  /skill/instance/delete:
    post:
      tags:
        - skill
      summary: Delete skill instance
      description: Delete an existing skill instance
      operationId: deleteSkillInstance
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteSkillInstanceRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
      security:
        - api_key: []
  /skill/invoke:
    post:
      tags:
        - skill
      summary: Invoke skill
      description: Invoke a skill
      operationId: invokeSkill
      requestBody:
        description: Skill invocation request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvokeSkillRequest'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvokeSkillResponse'
  /skill/streamInvoke:
    post:
      tags:
        - skill
      summary: Stream invoke skill
      description: Invoke a skill and return SSE stream
      operationId: streamInvokeSkill
      requestBody:
        description: Skill invocation request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvokeSkillRequest'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            text/event-stream:
              schema:
                type: string
  /skill/trigger/list:
    get:
      tags:
        - skill
      summary: List skill triggers
      description: List all skill triggers
      operationId: listSkillTriggers
      parameters:
        - name: skillId
          in: query
          description: Skill ID
          schema:
            type: string
            example: sk-g30e1b80b5g1itbemc0g5jj3
        - name: page
          in: query
          description: Page number
          schema:
            type: number
            default: 1
        - name: pageSize
          in: query
          description: Page size
          schema:
            type: number
            default: 10
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSkillTriggerResponse'
  /skill/trigger/new:
    post:
      tags:
        - skill
      summary: Create new trigger
      description: Create a new trigger
      operationId: createSkillTrigger
      requestBody:
        description: Skill trigger creation request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSkillTriggerRequest'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSkillTriggerResponse'
  /skill/trigger/update:
    post:
      tags:
        - skill
      summary: Update trigger
      description: Update an existing trigger
      operationId: updateSkillTrigger
      requestBody:
        description: Skill trigger update request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSkillTriggerRequest'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateSkillTriggerResponse'
  /skill/trigger/delete:
    post:
      tags:
        - skill
      summary: Delete trigger
      description: Delete an existing trigger
      operationId: deleteSkillTrigger
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteSkillTriggerRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
      security:
        - api_key: []
  /skill/job/list:
    get:
      tags:
        - skill
      summary: Get skill jobs
      description: Get skill jobs
      operationId: listSkillJobs
      parameters:
        - name: skillId
          in: query
          description: Skill ID
          schema:
            type: string
            example: sk-g30e1b80b5g1itbemc0g5jj3
        - name: jobStatus
          in: query
          description: Job status
          schema:
            type: string
            $ref: '#/components/schemas/SkillJobStatus'
        - name: page
          in: query
          description: Page number
          schema:
            type: number
            default: 1
        - name: pageSize
          in: query
          description: Page size
          schema:
            type: number
            default: 10
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSkillJobsResponse'
      security:
        - api_key: []
  /skill/job/detail:
    get:
      tags:
        - skill
      summary: Get skill job detail
      description: Get skill job detail
      operationId: getSkillJobDetail
      parameters:
        - name: jobId
          in: query
          description: Job ID
          schema:
            type: string
            example: sj-g30e1b80b5g1itbemc0g5jj3
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSkillJobDetailResponse'
  /conversation/list:
    get:
      tags:
        - chat
      summary: List conversations
      description: List all conversations
      operationId: listConversations
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListConversationResponse'
      security:
        - api_key: []
  /conversation/{convId}:
    get:
      tags:
        - chat
      summary: Get conversation detail
      description: Get conversation detail
      operationId: getConversationDetail
      parameters:
        - name: convId
          in: path
          description: Conversation ID
          example: cv-g30e1b80b5g1itbemc0g5jj3
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetConversationDetailResponse'
  /user/settings:
    get:
      tags:
        - user
      summary: Get user settings
      description: Return settings for current user
      operationId: getSettings
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSettings'
      security:
        - api_key: []
    put:
      tags:
        - user
      summary: Update user settings
      description: Update settings for current user
      operationId: updateSettings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserSettingsRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
      security:
        - api_key: []
  /search:
    post:
      tags:
        - search
      summary: Search
      description: Search for everything
      operationId: search
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'
  /misc/scrape:
    post:
      tags:
        - misc
      summary: Scrape
      description: Scrape a weblink
      operationId: scrape
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScrapeWeblinkRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScrapeWeblinkResponse'
  /misc/upload:
    post:
      tags:
        - misc
      summary: Upload
      description: Upload a file
      operationId: upload
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UploadRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadResponse'
  /misc/static/{fileName}:
    get:
      tags:
        - misc
      summary: Serve static
      description: Serve static files (only for local testing)
      operationId: serveStatic
      responses:
        '200':
          description: successful operation
components:
  schemas:
    User:
      type: object
      description: Refly user
      required:
        - uid
      properties:
        uid:
          type: string
          description: UID
        uiLocale:
          type: string
          description: UI locale
        outputLocale:
          type: string
          description: Output locale
    ResourceMeta:
      type: object
      description: Resource metadata
      properties:
        url:
          type: string
          description: Weblink URL
          example: https://www.google.com
        title:
          type: string
          description: Weblink title
          example: Google
        storageKey:
          type: string
          description: Storage key for the weblink
          deprecated: true
    ResourceType:
      type: string
      description: Resource type
      enum:
        - weblink
        - text
        - note
    Resource:
      type: object
      required:
        - resourceId
        - resourceType
        - title
        - createdAt
        - updatedAt
      properties:
        resourceId:
          type: string
          description: Resource ID (empty if it's external)
          example: r-g30e1b80b5g1itbemc0g5jj3
        resourceType:
          description: Resource type
          $ref: '#/components/schemas/ResourceType'
        title:
          type: string
          description: Resource title
        data:
          type: object
          description: Resource metadata
          $ref: '#/components/schemas/ResourceMeta'
        indexStatus:
          description: Resource index status
          $ref: '#/components/schemas/IndexStatus'
        isPublic:
          type: boolean
          description: Whether this resource is public
          default: false
        createdAt:
          type: string
          format: date-time
          description: Collection creation time
        updatedAt:
          type: string
          format: date-time
          description: Collection update time
        contentPreview:
          type: string
          description: Preview content for this resource
        content:
          type: string
          description: Document content for this resource (only returned in getNoteDetail API)
        collections:
          type: array
          description: Collections this resource belongs to (only returned in getResourceDetail API)
          items:
            $ref: '#/components/schemas/Collection'
    Note:
      type: object
      required:
        - noteId
        - title
        - readOnly
        - isPublic
        - createdAt
        - updatedAt
      properties:
        noteId:
          type: string
          description: Note ID
          example: n-g30e1b80b5g1itbemc0g5jj3
        title:
          type: string
          description: Note title
          example: My note
        contentPreview:
          type: string
          description: Note content preview
        content:
          type: string
          description: Full note content (only returned in detail api)
        readOnly:
          type: boolean
          description: Whether this note is read-only
        isPublic:
          type: boolean
          description: Whether this note is public
        createdAt:
          type: string
          format: date-time
          description: Note creation time
        updatedAt:
          type: string
          format: date-time
          description: Note update time
    Collection:
      type: object
      required:
        - collectionId
        - title
        - createdAt
        - updatedAt
      properties:
        collectionId:
          type: string
          description: Collection ID
          example: cl-g30e1b80b5g1itbemc0g5jj3
        title:
          type: string
          description: Collection title
          example: Default Collection
        description:
          type: string
          description: Collection description
          example: Collection description
        isPublic:
          type: boolean
          description: Whether this collection is public
          default: false
        createdAt:
          type: string
          format: date-time
          description: Collection creation time
        updatedAt:
          type: string
          format: date-time
          description: Collection update time
        resources:
          type: array
          description: Collection resources (only returned in detail API)
          items:
            $ref: '#/components/schemas/Resource'
    EntityType:
      type: string
      description: Entity type
      enum:
        - resource
        - collection
        - note
    LabelClass:
      type: object
      description: Label class
      required:
        - labelClassId
        - name
        - displayName
        - createdAt
        - updatedAt
      properties:
        labelClassId:
          type: string
          description: Label class ID
          example: lc-g30e1b80b5g1itbemc0g5jj3
        name:
          type: string
          description: Label class name
          example: Related Dataset
        displayName:
          type: string
          description: Label class display name
          example: Label display name
        icon:
          type: string
          description: Label icon
          example: IconBulb
        prompt:
          type: string
          description: Label creation instruction prompt
          example: Extract labels for the tech-related keywords
        createdAt:
          type: string
          format: date-time
          description: Label class creation time
        updatedAt:
          type: string
          format: date-time
          description: Label class update time
    LabelInstance:
      type: object
      description: Label instances related to resources, collections, etc.
      required:
        - labelId
        - labelClassId
        - value
      properties:
        labelId:
          type: string
          description: Label instance ID
          example: lb-g30e1b80b5g1itbemc0g5jj3
        labelClassId:
          type: string
          description: Label class ID
          example: lc-g30e1b80b5g1itbemc0g5jj3
        labelClass:
          description: Label class
          $ref: '#/components/schemas/LabelClass'
        value:
          type: string
          description: Label value
          example: HotPotQA
    InputMode:
      type: string
      description: Data input mode
      enum:
        - input
        - inputNumber
        - select
        - multiSelect
    SelectOption:
      type: object
      description: Select option
      required:
        - value
      properties:
        value:
          type: string
          description: Option value
        label:
          type: string
          description: Option label, with auto-selected locale
        labelDict:
          type: object
          description: Option label (key is locale, value is label)
          additionalProperties:
            type: string
        disabled:
          type: boolean
          description: Whether this option is disabled
          default: false
    DynamicConfigItem:
      type: object
      description: Dynamic config item
      required:
        - key
        - inputMode
      properties:
        key:
          type: string
          description: Config key
        inputMode:
          description: Config input mode
          $ref: '#/components/schemas/InputMode'
        label:
          type: string
          description: Config label, with auto-selected locale
        labelDict:
          type: object
          description: Config label (key is locale, value is label)
          additionalProperties:
            type: string
        description:
          type: string
          description: Config description, with auto-selected locale
        descriptionDict:
          type: object
          description: Config description (key is locale, value is description)
          additionalProperties:
            type: string
        options:
          type: array
          description: Config options
          items:
            $ref: '#/components/schemas/SelectOption'
    SkillTemplateConfigSchema:
      type: object
      description: Skill template config schema
      required:
        - items
      properties:
        items:
          type: array
          description: Config items
          items:
            $ref: '#/components/schemas/DynamicConfigItem'
    SkillTemplate:
      type: object
      description: Skill template
      required:
        - name
        - displayName
      properties:
        name:
          type: string
          description: Skill template name
        displayName:
          type: string
          description: Skill template display name
        description:
          type: string
          description: Skill template description
        configSchema:
          description: Skill template config schema
          $ref: '#/components/schemas/SkillTemplateConfigSchema'
    SkillTriggerType:
      type: string
      description: Skill trigger type
      enum:
        - timer
        - simpleEvent
    SimpleEventName:
      type: string
      description: Simple event name
      enum:
        - onResourceReady
    SimpleEvent:
      type: object
      required:
        - name
        - displayName
        - provideContextKeys
      properties:
        name:
          description: Simple event name
          $ref: '#/components/schemas/SimpleEventName'
        displayName:
          type: object
          description: Simple event display name (key is locale, value is display name)
        provideContextKeys:
          type: array
          description: Context keys to provide
          items:
            $ref: '#/components/schemas/SkillContextKey'
    TimerInterval:
      type: string
      description: Timer interval
      enum:
        - hour
        - day
        - week
        - month
        - year
    TimerTriggerConfig:
      type: object
      required:
        - datetime
      properties:
        datetime:
          type: string
          format: date-time
          description: Time to run
        repeatInterval:
          type: string
          description: Repeat interval
          $ref: '#/components/schemas/TimerInterval'
    SkillTrigger:
      type: object
      description: Skill triggers
      required:
        - skillId
        - displayName
        - triggerId
        - triggerType
        - enabled
        - createdAt
        - updatedAt
      properties:
        skillId:
          type: string
          description: Skill ID
          example: sk-g30e1b80b5g1itbemc0g5jj3
        displayName:
          type: string
          description: Trigger display name
          example: My trigger
        triggerId:
          type: string
          description: Trigger ID
          example: tr-g30e1b80b5g1itbemc0g5jj3
        triggerType:
          description: Trigger type
          $ref: '#/components/schemas/SkillTriggerType'
        simpleEventName:
          description: Simple event name (only required when trigger type is `simpleEvent`)
          $ref: '#/components/schemas/SimpleEventName'
        timerConfig:
          description: Timer config (only required when trigger type is `timer`)
          $ref: '#/components/schemas/TimerTriggerConfig'
        input:
          description: Skill input
          $ref: '#/components/schemas/SkillInput'
        context:
          description: Skill context
          $ref: '#/components/schemas/SkillContext'
        enabled:
          type: boolean
          description: Trigger enabled
        createdAt:
          type: string
          format: date-time
          description: Trigger creation time
        updatedAt:
          type: string
          format: date-time
          description: Trigger update time
    SkillMeta:
      type: object
      description: Skill metadata
      required:
        - displayName
      properties:
        displayName:
          type: string
          description: Skill display name
        tplName:
          type: string
          description: Skill template name
        skillId:
          type: string
          description: Skill ID
          example: sk-g30e1b80b5g1itbemc0g5jj3
    SkillInstance:
      type: object
      description: Skill
      allOf:
        - $ref: '#/components/schemas/SkillMeta'
        - type: object
          required:
            - createdAt
            - updatedAt
            - invocationConfig
          properties:
            description:
              type: string
              description: Skill instance description
            tplConfig:
              type: object
              description: Skill template config
            invocationConfig:
              description: Skill invocation config
              $ref: '#/components/schemas/SkillInvocationConfig'
            createdAt:
              type: string
              format: date-time
              description: Skill creation time
            updatedAt:
              type: string
              format: date-time
              description: Skill update time
    SkillJob:
      type: object
      description: Skill job record
      required:
        - jobId
        - skillId
        - skillDisplayName
        - jobStatus
        - input
        - context
        - createdAt
        - updatedAt
      properties:
        jobId:
          type: string
          description: Job ID
          example: sj-g30e1b80b5g1itbemc0g5jj3
        skillId:
          type: string
          description: Skill ID
        skillDisplayName:
          type: string
          description: Skill display name
        jobStatus:
          description: Skill job status
          $ref: '#/components/schemas/SkillJobStatus'
        conversation:
          description: Related conversation
          $ref: '#/components/schemas/Conversation'
        trigger:
          description: Skill trigger
          $ref: '#/components/schemas/SkillTrigger'
        input:
          description: Skill input
          $ref: '#/components/schemas/SkillInput'
        context:
          description: Skill context
          $ref: '#/components/schemas/PopulatedSkillContext'
        tplConfig:
          type: object
          description: Skill template config
        createdAt:
          type: string
          format: date-time
          description: Job creation time
        updatedAt:
          type: string
          format: date-time
          description: Job update time
        messages:
          type: array
          description: Job messages (only returned in detail API)
          items:
            $ref: '#/components/schemas/ChatMessage'
    SourceMeta:
      type: object
      description: Source metadata
      properties:
        source:
          type: string
          description: Source URL
          deprecated: true
        title:
          type: string
          description: Source title
          deprecated: true
        publishedTime:
          type: string
          format: date-time
          description: Source publish time
        collectionId:
          type: string
          description: Related collection ID
        collectionName:
          type: string
          description: Related collection name
        resourceId:
          type: string
          description: Related resource ID
        resourceName:
          type: string
          description: Related resource name
    SourceSelection:
      type: object
      description: Source selection
      required:
        - content
        - type
      properties:
        xPath:
          type: string
          description: Selected xPath
          deprecated: true
        content:
          type: string
          description: Selected content
        type:
          type: string
          description: Selection type
          enum:
            - text
            - table
            - link
            - image
            - video
            - audio
    Source:
      type: object
      description: Source of the message
      required:
        - pageContent
      properties:
        url:
          type: string
          description: Source URL
        title:
          type: string
          description: Source title
        pageContent:
          type: string
          description: Source content
        score:
          type: number
          description: Relativity score
        metadata:
          type: object
          description: Source metadata
          $ref: '#/components/schemas/SourceMeta'
        selections:
          type: array
          description: Source selections
          items:
            $ref: '#/components/schemas/SourceSelection'
    MessageType:
      type: string
      description: Chat message type
      enum:
        - ai
        - human
        - system
    ChatMessage:
      type: object
      description: Chat message
      required:
        - msgId
        - type
        - content
      properties:
        msgId:
          type: string
          readOnly: true
          description: Message ID
          example: m-g30e1b80b5g1itbemc0g5jj3
        jobId:
          type: string
          description: Skill job ID
          example: sj-g30e1b80b5g1itbemc0g5jj3
        type:
          description: Message type
          $ref: '#/components/schemas/MessageType'
        content:
          type: string
          description: Message content
          example: Hello
        skillMeta:
          type: object
          description: Skill metadata
          $ref: '#/components/schemas/SkillMeta'
        logs:
          type: array
          description: Message logs
          items:
            type: string
        structuredData:
          type: object
          description: Structured data output
          example:
            sources: [Source]
            relatedQuestions: [string]
        errors:
          type: array
          description: Errors
          items:
            type: string
        relatedQuestions:
          type: array
          description: Related questions
          items:
            type: string
          deprecated: true
        sources:
          type: array
          description: Related sources
          items:
            $ref: '#/components/schemas/Source'
          deprecated: true
        selectedWeblinkConfig:
          type: string
          description: Selected weblink config (JSON)
        createdAt:
          type: string
          format: date-time
          description: Message creation time
        updatedAt:
          type: string
          format: date-time
          description: Message update time
    Conversation:
      type: object
      description: Conversation list item
      properties:
        convId:
          type: string
          description: Conversation ID
          example: cv-g30e1b80b5g1itbemc0g5jj3
        title:
          type: string
          description: Conversation title
          example: Default Conversation
        lastMessage:
          type: string
          description: Last message content
          example: Hello
        messageCount:
          type: number
          description: Number of chat messages in this conversation
          example: 42
        locale:
          description: Conversation locale
          type: string
          example: en
        origin:
          type: string
          description: Origin page host
          example: https://refly.ai
        originPageTitle:
          type: string
          description: Origin page title
          example: Refly | Where knowledge thrives
        originPageUrl:
          type: string
          description: Origin page url
          example: https://refly.ai/knowledge-base
        createdAt:
          type: string
          format: date-time
          description: Conversation creation time
        updatedAt:
          type: string
          format: date-time
          description: Conversation creation time
        messages:
          type: array
          description: Conversation messages (only returned for getConversationDetail api)
          items:
            $ref: '#/components/schemas/ChatMessage'
    ChatTaskType:
      type: string
      description: Chat task type
      enum:
        - chat
        - genTitle
        - quickAction
        - searchEnhanceKeyword
        - searchEnhanceSummarize
        - searchEnhanceAsk
    RetrieveFilter:
      type: object
      description: Content retrieval filter
      properties:
        weblinkList:
          type: array
          description: List of web links
          items:
            $ref: '#/components/schemas/Source'
          deprecated: true
        urls:
          type: array
          description: List of URLs to retrieve
          items:
            type: string
            example: https://refly.ai
        resourceIds:
          type: array
          description: List of resource IDs to retrieve
          items:
            type: string
            example: r-g30e1b80b5g1itbemc0g5jj3
        collectionIds:
          type: array
          description: List of collection IDs to retrieve
          items:
            type: string
            example: cl-g30e1b80b5g1itbemc0g5jj3
    ChatPayload:
      type: object
      description: Chat payload
      required:
        - question
      properties:
        question:
          type: string
          description: Question
        filter:
          type: object
          description: Content retrieval filter
          $ref: '#/components/schemas/RetrieveFilter'
    QuickActionType:
      type: string
      description: Quick action type
      enum:
        - selection
        - summary
    QuickActionTaskPayload:
      type: object
      description: Quick action task payload
      properties:
        question:
          type: string
          description: Question
        actionType:
          description: Quick action type
          $ref: '#/components/schemas/QuickActionType'
        actionPrompt:
          type: string
          description: Prompt for this action
        reference:
          type: string
          description: Reference for this action
        filter:
          description: Content retrieval filter
          $ref: '#/components/schemas/RetrieveFilter'
    ChatTask:
      type: object
      description: Chat task
      required:
        - taskType
      properties:
        taskType:
          description: Task type
          $ref: '#/components/schemas/ChatTaskType'
        dryRun:
          description: Whether to dry run the task
          type: boolean
          default: false
        convId:
          description: Conversation ID, a new conversation will be created if empty or non-existent
          type: string
          example: cv-g30e1b80b5g1itbemc0g5jj3
        createConvParam:
          description: Create conversation parameters
          $ref: '#/components/schemas/CreateConversationRequest'
        locale:
          description: Chat locale
          type: string
          example: en
        data:
          description: Chat data
          oneOf:
            - $ref: '#/components/schemas/ChatPayload'
            - $ref: '#/components/schemas/QuickActionTaskPayload'
    ChatTaskResponse:
      type: object
      description: Chat task response
      required:
        - sources
        - answer
      properties:
        sources:
          type: array
          description: List of web links
          items:
            $ref: '#/components/schemas/Source'
        answer:
          type: string
          description: Chat Answer
        relatedQuestions:
          type: array
          description: Related questions
          items:
            type: string
    IndexStatus:
      type: string
      description: Resource index status
      enum:
        - init
        - processing
        - finish
        - failed
        - unavailable
    UserSettings:
      type: object
      required:
        - uid
        - avatar
        - name
        - email
      properties:
        uid:
          type: string
          description: User ID
          example: u-g30e1b80b5g1itbemc0g5jj3
        avatar:
          type: string
          description: User avatar
          example: https://www.gstatic.com/webp/gallery/1.jpg
        name:
          type: string
          description: User name
          example: John Doe
        email:
          type: string
          description: User email
          example: 6XJpZ@example.com
        emailVerified:
          type: boolean
          description: Whether email is verified
          default: false
        uiLocale:
          type: string
          description: User UI locale
          example: en
        outputLocale:
          type: string
          description: User output locale
          example: en
    BaseResponse:
      type: object
      required:
        - success
      properties:
        success:
          type: boolean
          description: Whether the operation was successful
          example: true
        errMsg:
          type: string
          description: Error message
          example: Operation failed
    UpsertResourceRequest:
      type: object
      required:
        - title
        - resourceType
      properties:
        title:
          type: string
          description: Resource title
          example: My Resource
        resourceType:
          description: Resource type
          $ref: '#/components/schemas/ResourceType'
        resourceId:
          type: string
          description: Resource ID (only used for update)
          example: r-g30e1b80b5g1itbemc0g5jj3
        collectionId:
          type: string
          description: Collection ID (will add to the collection if given)
          example: cl-g30e1b80b5g1itbemc0g5jj3
        data:
          description: Resource metadata
          $ref: '#/components/schemas/ResourceMeta'
        storageKey:
          type: string
          description: Storage key for the resource
        content:
          type: string
          description: Resource content (this will be ignored if storageKey was set)
        isPublic:
          type: boolean
          description: Whether this resource is public
          default: false
        readOnly:
          type: boolean
          description: Whether this resource is read-only
          default: false
    UpsertResourceResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/Resource'
    BatchCreateResourceResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Resource list
              items:
                $ref: '#/components/schemas/Resource'
    DeleteResourceRequest:
      type: object
      required:
        - resourceId
      properties:
        resourceId:
          type: string
          description: Resource ID to delete
          example: r-g30e1b80b5g1itbemc0g5jj3
    ListResourceResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Resource list
              items:
                $ref: '#/components/schemas/Resource'
    GetResourceDetailResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              description: Resource data
              $ref: '#/components/schemas/Resource'
    ListNoteResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Note list
              items:
                $ref: '#/components/schemas/Note'
    GetNoteDetailResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              description: Note data
              $ref: '#/components/schemas/Note'
    UpsertNoteRequest:
      type: object
      properties:
        title:
          type: string
          description: Note title
          example: My Note
        noteId:
          type: string
          description: Note ID (only used for update)
          example: n-g30e1b80b5g1itbemc0g5jj3
        readOnly:
          type: boolean
          description: Whether this note is read-only
          default: false
        isPublic:
          type: boolean
          description: Whether this note is public
          default: false
    UpsertNoteResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/Note'
    DeleteNoteRequest:
      type: object
      required:
        - noteId
      properties:
        noteId:
          type: string
          description: Note ID to delete
          example: n-g30e1b80b5g1itbemc0g5jj3
    UpsertCollectionRequest:
      type: object
      properties:
        collectionId:
          type: string
          description: Collection ID (only used for update)
          example: cl-g30e1b80b5g1itbemc0g5jj3
        title:
          type: string
          description: Collection title
          example: My Collection
        description:
          type: string
          description: Collection description
          example: Collection description
        isPublic:
          type: boolean
          description: Whether this collection is public
          default: false
    UpsertCollectionResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/Collection'
    AddResourceToCollectionRequest:
      type: object
      required:
        - collectionId
        - resourceIds
      properties:
        collectionId:
          type: string
          description: Collection ID
        resourceIds:
          type: array
          description: Resource ID list
          items:
            type: string
    RemoveResourceFromCollectionRequest:
      type: object
      required:
        - collectionId
        - resourceIds
      properties:
        collectionId:
          type: string
          description: Collection ID
        resourceIds:
          type: array
          description: Resource ID list
          items:
            type: string
    DeleteCollectionRequest:
      type: object
      required:
        - collectionId
      properties:
        collectionId:
          type: string
          description: Collection ID to delete
          example: cl-g30e1b80b5g1itbemc0g5jj3
    ListCollectionResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Collection list
              items:
                $ref: '#/components/schemas/Collection'
    GetCollectionDetailResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              description: Collection data
              $ref: '#/components/schemas/Collection'
    ListLabelClassesResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Label class list
              items:
                $ref: '#/components/schemas/LabelClass'
    CreateLabelClassRequest:
      type: object
      required:
        - name
        - displayName
        - prompt
      properties:
        name:
          type: string
          description: Label class name
          example: my_class
        displayName:
          type: string
          description: Label display name
          example: My Class
        icon:
          type: string
          description: Label icon
          example: IconBulb
        prompt:
          type: string
          description: Label creation instruction prompt
          example: Extract labels for the tech-related keywords
    UpdateLabelClassRequest:
      type: object
      required:
        - labelClassId
      properties:
        labelClassId:
          type: string
          description: Label class ID
        name:
          type: string
          description: Label class name
          example: My Class
        displayName:
          type: string
          description: Label display name
          example: My Class
        icon:
          type: string
          description: Label icon
          example: IconBulb
        prompt:
          type: string
          description: Label creation instruction prompt
          example: Extract labels for the tech-related keywords
    UpsertLabelClassResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              description: Label class upserted
              $ref: '#/components/schemas/LabelClass'
    DeleteLabelClassRequest:
      type: object
      required:
        - labelClassId
      properties:
        labelClassId:
          type: string
          description: Label class ID to delete
          example: lc-g30e1b80b5g1itbemc0g5jj3
    ListLabelInstancesResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Label list
              items:
                $ref: '#/components/schemas/LabelInstance'
    CreateLabelInstanceRequest:
      type: object
      required:
        - labelClassId
        - valueList
        - entityType
        - entityId
      properties:
        labelClassId:
          type: string
          description: Label class ID
          example: lc-g30e1b80b5g1itbemc0g5jj3
        valueList:
          type: array
          description: Label value list
          items:
            type: string
            example: label-1
        entityType:
          description: Label entity type
          $ref: '#/components/schemas/EntityType'
        entityId:
          description: Label entity ID
          type: string
    UpdateLabelInstanceRequest:
      type: object
      properties:
        labelId:
          type: string
          description: Label ID to update
        value:
          type: string
          description: Updated label value
    UpsertLabelInstanceResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Label instance upserted
              items:
                $ref: '#/components/schemas/LabelInstance'
    DeleteLabelInstanceRequest:
      type: object
      required:
        - labelId
      properties:
        labelId:
          type: string
          description: Label ID to delete
          example: lb-g30e1b80b5g1itbemc0g5jj3
    ListSkillTemplateResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Skill template list
              items:
                $ref: '#/components/schemas/SkillTemplate'
    ListSkillInstanceResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Skill list
              items:
                $ref: '#/components/schemas/SkillInstance'
    SkillInstanceCreateParam:
      type: object
      required:
        - displayName
      properties:
        tplName:
          type: string
          description: Skill template name
          example: online-search
        displayName:
          type: string
          description: Skill display name
          example: My Custom Skill
        description:
          type: string
          description: Skill description
        tplConfig:
          type: object
          description: Skill template config
    CreateSkillInstanceRequest:
      type: object
      required:
        - instanceList
      properties:
        instanceList:
          type: array
          description: Skill instances to upsert
          items:
            $ref: '#/components/schemas/SkillInstanceCreateParam'
    CreateSkillInstanceResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Skill instance list
              items:
                $ref: '#/components/schemas/SkillInstance'
    UpdateSkillInstanceRequest:
      type: object
      required:
        - skillId
      properties:
        skillId:
          type: string
          description: Skill ID
          example: s-g30e1b80b5g1itbemc0g5jj3
        displayName:
          type: string
          description: Skill display name
          example: My Custom Skill
        description:
          type: string
          description: Skill description
    UpdateSkillInstanceResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              description: Skill instance list
              $ref: '#/components/schemas/SkillInstance'
    DeleteSkillInstanceRequest:
      type: object
      required:
        - skillId
      properties:
        skillId:
          type: string
          description: Skill ID to delete
    SkillInput:
      type: object
      description: Skill input
      properties:
        query:
          type: string
          description: User query
    SkillContext:
      type: object
      description: Skill invocation context
      properties:
        resourceIds:
          type: array
          description: List of resource IDs
          items:
            type: string
        externalResources:
          type: array
          description: List of external resources
          items:
            $ref: '#/components/schemas/Resource'
        collectionIds:
          type: array
          description: List of collection IDs
          items:
            type: string
        noteIds:
          type: array
          description: List of note IDs
          items:
            type: string
        contentList:
          type: array
          description: List of content
          items:
            type: string
        urls:
          type: array
          description: List of URLs
          items:
            type: string
        locale:
          type: string
          description: user selected output locale
          items:
            type: string
    PopulatedSkillContext:
      allOf:
        - $ref: '#/components/schemas/SkillContext'
        - type: object
          properties:
            resources:
              type: array
              description: List of resources (both internal and external)
              items:
                $ref: '#/components/schemas/Resource'
            collections:
              type: array
              description: List of collections
              items:
                $ref: '#/components/schemas/Collection'
            notes:
              type: array
              description: List of notes
              items:
                $ref: '#/components/schemas/Note'
    SkillInputKey:
      type: string
      enum:
        - query
    SkillContextKey:
      type: string
      enum:
        - resourceIds
        - externalResources
        - collectionIds
        - noteIds
        - contentList
        - urls
    SkillInvocationRule:
      type: object
      required:
        - key
      properties:
        key:
          type: string
          description: Field key
          oneOf:
            - $ref: '#/components/schemas/SkillInputKey'
            - $ref: '#/components/schemas/SkillContextKey'
        limit:
          type: number
          description: Maximum number of items
          default: 10
        required:
          type: boolean
          description: Whether this key is required (default is false)
    InvocationRuleGroupRelation:
      type: string
      enum:
        - regular
        - mutuallyExclusive
    SkillInvocationRuleGroup:
      type: object
      required:
        - rules
      properties:
        rules:
          type: array
          description: Skill invocation rules
          items:
            $ref: '#/components/schemas/SkillInvocationRule'
        relation:
          type: string
          description: Group relation
          default: regular
          $ref: '#/components/schemas/InvocationRuleGroupRelation'
    SkillInvocationConfig:
      type: object
      properties:
        input:
          description: Skill input rule group
          $ref: '#/components/schemas/SkillInvocationRuleGroup'
        context:
          description: Skill context rule group
          $ref: '#/components/schemas/SkillInvocationRuleGroup'
    SkillJobStatus:
      type: string
      description: Skill job status
      enum:
        - scheduling
        - running
        - finish
        - failed
    InvokeSkillRequest:
      type: object
      properties:
        input:
          description: Skill input
          $ref: '#/components/schemas/SkillInput'
        context:
          description: Skill invocation context
          $ref: '#/components/schemas/SkillContext'
        tplConfig:
          type: object
          description: Skill template config
        skillId:
          type: string
          description: Skill instance ID to invoke (if not provided, skill scheduler will be used)
        convId:
          description: Conversation ID (will add messages to this conversation if provided)
          type: string
          example: cv-g30e1b80b5g1itbemc0g5jj3
        createConvParam:
          description: Create conversation parameters
          $ref: '#/components/schemas/CreateConversationRequest'
        triggerId:
          description: Trigger ID (typically you don't need to provide this)
          type: string
    InvokeSkillResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            jobId:
              type: string
              description: Skill job ID
    ListSkillTriggerResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Skill trigger list
              items:
                $ref: '#/components/schemas/SkillTrigger'
    SkillTriggerCreateParam:
      type: object
      required:
        - skillId
        - displayName
        - triggerType
      properties:
        skillId:
          type: string
          description: Skill ID
          example: sk-g30e1b80b5g1itbemc0g5jj3
        displayName:
          type: string
          description: Trigger display name
          example: My trigger
        triggerType:
          description: Trigger type
          $ref: '#/components/schemas/SkillTriggerType'
        simpleEventName:
          description: Simple event name (only required when trigger type is `simpleEvent`)
          $ref: '#/components/schemas/SimpleEventName'
        timerConfig:
          description: Timer config (only required when trigger type is `timer`)
          $ref: '#/components/schemas/TimerTriggerConfig'
        input:
          description: Skill input
          $ref: '#/components/schemas/SkillInput'
        context:
          description: Skill invocation context
          $ref: '#/components/schemas/SkillContext'
        enabled:
          type: boolean
          description: Whether this trigger is enabled
    CreateSkillTriggerRequest:
      type: object
      required:
        - triggerList
      properties:
        triggerList:
          type: array
          description: Skill triggers to upsert
          items:
            $ref: '#/components/schemas/SkillTriggerCreateParam'
    CreateSkillTriggerResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Skill trigger list
              items:
                $ref: '#/components/schemas/SkillTrigger'
    UpdateSkillTriggerRequest:
      allOf:
        - $ref: '#/components/schemas/SkillTriggerCreateParam'
        - type: object
          required:
            - triggerId
          properties:
            triggerId:
              type: string
              description: Trigger ID
              example: tr-g30e1b80b5g1itbemc0g5jj3
    UpdateSkillTriggerResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              description: Updated skill trigger
              $ref: '#/components/schemas/SkillTrigger'
    DeleteSkillTriggerRequest:
      type: object
      required:
        - triggerId
      properties:
        triggerId:
          type: string
          description: Trigger ID to delete
    ListSkillJobsResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Skill job list
              items:
                $ref: '#/components/schemas/SkillJob'
    GetSkillJobDetailResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              description: Skill job
              $ref: '#/components/schemas/SkillJob'
    CreateConversationRequest:
      type: object
      properties:
        title:
          type: string
          description: Conversation title
          example: My Conversation
        locale:
          type: string
          description: Conversation locale
          example: en
        origin:
          type: string
          description: Origin page host
          example: https://refly.ai
        originPageTitle:
          type: string
          description: Origin page title
          example: Refly | Where knowledge thrives
        originPageUrl:
          type: string
          description: Origin page url
          example: https://refly.ai/knowledge-base
    CreateConversationResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              description: Created conversation
              $ref: '#/components/schemas/Conversation'
    ListConversationResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Conversation list
              items:
                $ref: '#/components/schemas/Conversation'
    ChatRequest:
      type: object
      properties:
        task:
          description: chat task config
          $ref: '#/components/schemas/ChatTask'
    GetConversationDetailResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              description: Conversation data
              $ref: '#/components/schemas/Conversation'
    UpdateUserSettingsRequest:
      type: object
      properties:
        uiLocale:
          type: string
          description: UI locale
          example: en
        outputLocale:
          type: string
          description: Output locale
          example: en
    SearchDomain:
      type: string
      enum:
        - resource
        - note
        - collection
        - conversation
        - skill
    SearchMode:
      type: string
      enum:
        - keyword
        - vector
        - hybrid
    SearchRequest:
      type: object
      required:
        - query
      properties:
        query:
          type: string
          description: Search query (if empty, return last updated data)
        scope:
          type: string
          description: Search scope
          enum:
            - user
            - public
          default: user
        domains:
          type: array
          description: Search domains (if not specified, return all domains)
          items:
            $ref: '#/components/schemas/SearchDomain'
        mode:
          type: string
          description: Search mode
          $ref: '#/components/schemas/SearchMode'
          default: keyword
        limit:
          type: number
          description: Search result limit for each domain
          default: 5
    SearchResultMeta:
      type: object
      properties:
        resourceType:
          type: string
          description: Resource type
          $ref: '#/components/schemas/ResourceType'
        resourceMeta:
          type: object
          description: Resource metadata
          $ref: '#/components/schemas/ResourceMeta'
        collectionId:
          type: string
          description: Collection ID
    SearchResult:
      type: object
      required:
        - id
        - domain
        - title
      properties:
        id:
          type: string
          description: Search result ID to navigate to
        domain:
          description: Search result domain
          $ref: '#/components/schemas/SearchDomain'
        title:
          type: string
          description: Search result title
        content:
          type: array
          description: Search result content list with highlight marks
          items:
            type: string
        metadata:
          description: Search result metadata
          $ref: '#/components/schemas/SearchResultMeta'
        createdAt:
          type: string
          format: date-time
          description: Data creation time
        updatedAt:
          type: string
          format: date-time
          description: Collection creation time
    SearchResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Search result
              items:
                $ref: '#/components/schemas/SearchResult'
    ScrapeWeblinkRequest:
      type: object
      required:
        - url
      properties:
        url:
          type: string
          description: Weblink URL
    ScrapeWeblinkResult:
      type: object
      properties:
        title:
          type: string
          description: Weblink title
        description:
          type: string
          description: Weblink description
        image:
          type: string
          description: Weblink image
    ScrapeWeblinkResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              description: Weblink scrape result
              $ref: '#/components/schemas/ScrapeWeblinkResult'
    UploadRequest:
      type: object
      required:
        - file
      properties:
        file:
          type: string
          format: binary
          description: File to upload
    UploadResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              description: File upload result
              properties:
                url:
                  type: string
                  description: File URL
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header
