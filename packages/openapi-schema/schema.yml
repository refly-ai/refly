openapi: 3.0.3
info:
  title: Refly AI
  description: The Open-Source Agentic Workspace for Human-AI Collaboration
  contact:
    email: support@refly.ai
  version: 0.2.0
externalDocs:
  url: https://refly.ai
servers:
  - url: /v1
tags:
  - name: auth
    description: Authentication endpoints
  - name: canvas
    description: Canvas management endpoints
  - name: knowledge
    description: Knowledge base management endpoints
  - name: project
    description: Project management endpoints
  - name: share
    description: Share management endpoints
  - name: label
    description: Label management endpoints
  - name: action
    description: Action management endpoints
  - name: skill
    description: Skill management endpoints
  - name: pilot
    description: Pilot management endpoints
  - name: codeArtifact
    description: Code artifact management endpoints
  - name: user
    description: User management endpoints
  - name: search
    description: Search related endpoints
  - name: provider
    description: Provider management endpoints
  - name: tool
    description: Tool management endpoints
  - name: misc
    description: Miscellaneous endpoints
  - name: workflow
    description: Workflow management endpoints
  - name: app
    description: APP management endpoints

paths:
  /variable-extraction/extract:
    post:
      tags:
        - variable-extraction
      summary: Extract variables from prompt
      description: |
        Unified variable extraction interface that supports two modes:
        - 'direct': Directly update Canvas variables
        - 'candidate': Return candidate solutions for user selection
        
        This endpoint analyzes natural language prompts and extracts workflow variables
        based on the context of existing Canvas variables and content.
      operationId: extractVariables
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExtractVariablesRequest'
              candidate_mode:
                summary: Candidate mode example
                description: Example request for candidate mode
                value:
                  prompt: "Create a user registration form with username, email, and password fields"
                  canvasId: "canvas-123"
                  mode: "candidate"
              direct_mode:
                summary: Direct mode example
                description: Example request for direct mode with session ID
                value:
                  prompt: "Generate an e-commerce product list page with pagination and search"
                  canvasId: "canvas-456"
                  mode: "direct"
                  sessionId: "session-789"
      responses:
        '200':
          description: Variables extracted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VariableExtractionResult'

  /variable-extraction/generate-template:
    post:
      tags:
        - variable-extraction
      summary: Generate APP publish template
      description: |
        Generate a user intent template based on all original prompts and variables in a Canvas.
        This endpoint analyzes the Canvas content and creates a template with placeholders
        that can be used for APP publishing and user interaction.
      operationId: generateAppTemplate
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateAppTemplateRequest'
            examples:
              basic_request:
                summary: Basic template generation request
                description: Generate template for a canvas with basic configuration
                value:
                  canvasId: "canvas-123"
      responses:
        '200':
          description: APP template generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppTemplateResult'
            examples:
              success_response:
                summary: Successful template generation
                description: Template with variables and metadata
                value:
                  templateContent: "Create a {{workflowType}} workflow with {{variableCount}} variables including {{primarySkill}} functionality"
                  variables:
                    - name: "workflowType"
                      value: ["data-processing"]
                      description: "Type of workflow to create"
                      variableType: "option"
                  metadata:
                    extractedAt: 1703123456789
                    variableCount: 5
                    promptCount: 3
                    canvasComplexity: "medium"
                    workflowType: "data-processing"
                    templateVersion: 1
                    workflowTitle: "Data Processing Pipeline"
                    workflowDescription: "Automated data processing workflow"
                    estimatedExecutionTime: "5-10 minutes"
                    skillTags: ["data-processing", "automation"]

  /mcp-server/list:
    get:
      tags:
        - mcp-server
      summary: List MCP servers
      description: List all MCP servers for a user
      operationId: listMcpServers
      parameters:
        - name: type
          in: query
          description: MCP server type
          schema:
            type: string
            enum: [sse, streamable, stdio]
        - name: enabled
          in: query
          description: Filter by enabled status
          schema:
            type: boolean
        - name: isGlobal
          in: query
          description: Filter by isGlobal status. If not passed, return both global and user-specific MCP servers.
          schema:
            type: boolean
      security:
        - api_key: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMcpServersResponse'

  /mcp-server/create:
    post:
      tags:
        - mcp-server
      summary: Create MCP server
      description: Create a new MCP server
      operationId: createMcpServer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertMcpServerRequest'
      security:
        - api_key: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertMcpServerResponse'

  /mcp-server/update:
    post:
      tags:
        - mcp-server
      summary: Update MCP server
      description: Update an existing MCP server
      operationId: updateMcpServer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertMcpServerRequest'
      security:
        - api_key: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertMcpServerResponse'

  /mcp-server/delete:
    post:
      tags:
        - mcp-server
      summary: Delete MCP server
      description: Delete an existing MCP server
      operationId: deleteMcpServer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteMcpServerRequest'
      security:
        - api_key: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteMcpServerResponse'

  /mcp-server/validate:
    post:
      tags:
        - mcp-server
      summary: Validate MCP server
      description: Validate MCP server configuration
      operationId: validateMcpServer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertMcpServerRequest'
      security:
        - api_key: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidateMcpServerResponse'

  /pages:
    get:
      tags:
        - pages
      summary: List user pages
      description: List all pages for a user
      operationId: listPages
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: number
            default: 1
        - name: pageSize
          in: query
          description: Page size
          schema:
            type: number
            default: 20
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPagesResponse'

  /pages/{pageId}:
    get:
      tags:
        - pages
      summary: Get page detail
      description: Get detail of a specific page
      operationId: getPageDetail
      parameters:
        - name: pageId
          in: path
          required: true
          description: Page ID
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageDetailResponse'
    put:
      tags:
        - pages
      summary: Update a page
      description: Update a specific page
      operationId: updatePage
      parameters:
        - name: pageId
          in: path
          required: true
          description: Page ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePageRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdatePageResponse'
    delete:
      tags:
        - pages
      summary: Delete a page
      description: Delete a specific page
      operationId: deletePage
      parameters:
        - name: pageId
          in: path
          required: true
          description: Page ID
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletePageResponse'

  /pages/{pageId}/share:
    post:
      tags:
        - pages
      summary: Share a page
      description: Create a share link for a specific page
      operationId: sharePage
      parameters:
        - name: pageId
          in: path
          required: true
          description: Page ID
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharePageResponse'

  /pages/{pageId}/nodes/{nodeId}:
    delete:
      tags:
        - pages
      summary: Delete a node from a page
      description: Remove a specific node from a page
      operationId: deletePageNode
      parameters:
        - name: pageId
          in: path
          required: true
          description: Page ID
          schema:
            type: string
        - name: nodeId
          in: path
          required: true
          description: Node ID
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletePageNodeResponse'

  /pages/canvas/{canvasId}:
    get:
      tags:
        - pages
      summary: Get page by canvas ID
      description: Retrieve the page associated with a specific canvas
      operationId: getPageByCanvasId
      parameters:
        - name: canvasId
          in: path
          required: true
          description: Canvas ID
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CanvasPageResponse'

  /pages/canvas/{canvasId}/nodes:
    post:
      tags:
        - pages
      summary: Add nodes to canvas page
      description: Add nodes to a page associated with a specific canvas. If no page exists, a new one will be created.
      operationId: addNodesToCanvasPage
      parameters:
        - name: canvasId
          in: path
          required: true
          description: Canvas ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddPageNodesRequest'
      responses:
        '201':
          description: Nodes added to canvas page successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddPageNodesResponse'


  /auth/config:
    get:
      tags:
        - auth
      summary: Get auth config
      description: Get auth config
      operationId: getAuthConfig
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthConfigResponse'
  /auth/refreshToken:
    post:
      tags:
        - auth
      summary: Refresh token
      description: Refresh token
      operationId: refreshToken
      responses:
        '200':
          description: Successful operation
  /auth/email/signup:
    post:
      tags:
        - auth
      summary: Sign up with email
      description: Sign up with email
      operationId: emailSignup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailSignupRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailSignupResponse'
  /auth/email/login:
    post:
      tags:
        - auth
      summary: Login with email
      description: Login with email
      operationId: emailLogin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailLoginRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailLoginResponse'
  /auth/verification/create:
    post:
      tags:
        - auth
      summary: Create verification session
      description: Create a verification session
      operationId: createVerification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVerificationRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateVerificationResponse'
  /auth/verification/resend:
    post:
      tags:
        - auth
      summary: Resend verification
      description: Resend verification
      operationId: resendVerification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResendVerificationRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
  /auth/verification/check:
    post:
      tags:
        - auth
      summary: Verify authentication session
      description: Verify account creation
      operationId: checkVerification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckVerificationRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
  /auth/account/list:
    get:
      tags:
        - auth
      summary: List auth accounts
      description: List auth accounts
      operationId: listAccounts
      parameters:
        - name: type
          in: query
          description: Auth type
          schema:
            $ref: '#/components/schemas/AuthType'
        - name: provider
          in: query
          description: Auth provider
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAccountsResponse'
  /auth/logout:
    post:
      tags:
        - auth
      summary: Logout
      description: Logout
      operationId: logout
      responses:
        '200':
          description: Successful operation
  /auth/tool-oauth/status:
    get:
      tags:
        - auth
      summary: Check tool OAuth status
      description: Check if user has OAuth authorization for specific provider and scopes
      operationId: checkToolOAuthStatus
      security:
        - bearerAuth: []
      parameters:
        - name: provider
          in: query
          required: true
          description: OAuth provider (e.g., google, github)
          schema:
            type: string
        - name: scope
          in: query
          required: true
          description: Comma-separated list of required OAuth scopes
          schema:
            type: string
      responses:
        '200':
          description: OAuth status checked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckToolOAuthStatusResponse'
  /collab/getToken:
    get:
      tags:
        - collab
      summary: Get collab token
      description: Get collab token
      operationId: getCollabToken
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCollabTokenResponse'
  /canvas/list:
    get:
      tags:
        - canvas
      summary: List user canvases
      description: List all canvases for a user
      operationId: listCanvases
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: number
            default: 1
        - name: pageSize
          in: query
          description: Page size
          schema:
            type: number
            default: 10
        - name: projectId
          in: query
          description: Related project ID
          schema:
            type: string
        - name: order
          in: query
          description: Order
          schema:
            $ref: '#/components/schemas/ListOrder'
        - name: keyword
          in: query
          description: Search keyword
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCanvasResponse'
  /canvas/detail:
    get:
      tags:
        - canvas
      summary: Get canvas detail
      description: Get canvas detail
      operationId: getCanvasDetail
      parameters:
        - name: canvasId
          in: query
          description: Canvas ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCanvasDetailResponse'
  /canvas/data:
    get:
      tags:
        - canvas
      summary: Get canvas data
      description: Get public canvas data without checking user identity
      operationId: getCanvasData
      parameters:
        - name: canvasId
          in: query
          description: Canvas ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCanvasDataResponse'
  /canvas/export:
    get:
      tags:
        - canvas
      summary: Export canvas
      description: Export canvas
      operationId: exportCanvas
      parameters:
        - name: canvasId
          in: query
          description: Canvas ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportCanvasResponse'
  /canvas/import:
    post:
      tags:
        - canvas
      summary: Import canvas
      description: Import canvas
      operationId: importCanvas
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ImportCanvasRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertCanvasResponse'
  /canvas/create:
    post:
      tags:
        - canvas
      summary: Create canvas
      description: Create a new canvas
      operationId: createCanvas
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertCanvasRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertCanvasResponse'
  /canvas/duplicate:
    post:
      tags:
        - canvas
      summary: Duplicate canvas
      description: Duplicate an existing canvas
      operationId: duplicateCanvas
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DuplicateCanvasRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertCanvasResponse'
  /canvas/update:
    post:
      tags:
        - canvas
      summary: Update canvas
      description: Update an existing canvas
      operationId: updateCanvas
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertCanvasRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertCanvasResponse'
  /canvas/delete:
    post:
      tags:
        - canvas
      summary: Delete canvas
      description: Delete an existing canvas
      operationId: deleteCanvas
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteCanvasRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
  /canvas/autoName:
    post:
      tags:
        - canvas
      summary: Auto name canvas
      description: Auto name a canvas
      operationId: autoNameCanvas
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AutoNameCanvasRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutoNameCanvasResponse'
  /canvas/getState:
    get:
      tags:
        - canvas
      summary: Get canvas state
      description: Get canvas state
      operationId: getCanvasState
      parameters:
        - name: canvasId
          in: query
          description: Canvas ID
          required: true
          schema:
            type: string
        - name: version
          in: query
          description: Canvas state version
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCanvasStateResponse'
  /canvas/setState:
    post:
      tags:
        - canvas
      summary: Set canvas state
      description: Set canvas state, should only be used in conflict resolution
      operationId: setCanvasState
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetCanvasStateRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
  /canvas/getTx:
    get:
      tags:
        - canvas
      summary: Get canvas transactions
      description: Get canvas transactions
      operationId: getCanvasTransactions
      parameters:
        - name: canvasId
          in: query
          description: Canvas ID
          required: true
          schema:
            type: string
        - name: version
          in: query
          description: Canvas state version
          required: false
          schema:
            type: string
        - name: since
          in: query
          description: Since timestamp
          required: false
          schema:
            type: number
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCanvasTransactionsResponse'
  /canvas/syncState:
    post:
      tags:
        - canvas
      summary: Sync canvas state
      description: Sync canvas state
      operationId: syncCanvasState
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SyncCanvasStateRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncCanvasStateResponse'
  /canvas/createVersion:
    post:
      tags:
        - canvas
      summary: Create canvas version
      description: Create a new canvas version
      operationId: createCanvasVersion
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCanvasVersionRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCanvasVersionResponse'
  /canvas/workflow/variables:
    get:
      tags:
        - canvas
      summary: Get workflow variables
      description: Get workflow variables for a canvas
      operationId: getWorkflowVariables
      parameters:
        - name: canvasId
          in: query
          description: Canvas ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetWorkflowVariablesResponse'
    post:
      tags:
        - canvas
      summary: Update workflow variables
      description: Update workflow variables for a canvas
      operationId: updateWorkflowVariables
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWorkflowVariablesRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateWorkflowVariablesResponse'
  /template/list:
    get:
      tags:
        - canvas
      summary: List canvas templates
      description: List all canvas templates
      operationId: listCanvasTemplates
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: number
            default: 1
        - name: pageSize
          in: query
          description: Page size
          schema:
            type: number
            default: 10
        - name: language
          in: query
          description: Language code
          example: en
          schema:
            type: string
        - name: categoryId
          in: query
          description: Canvas template category ID
          schema:
            type: string
        - name: scope
          in: query
          description: Scope
          schema:
            type: string
            default: public
            enum:
              - public
              - private
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCanvasTemplateResponse'
  /template/create:
    post:
      tags:
        - canvas
      summary: Create canvas template
      description: Create a new canvas template
      operationId: createCanvasTemplate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCanvasTemplateRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertCanvasTemplateResponse'
  /template/update:
    post:
      tags:
        - canvas
      summary: Update canvas template
      description: Update an existing canvas template
      operationId: updateCanvasTemplate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCanvasTemplateRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertCanvasTemplateResponse'
  /template/category/list:
    get:
      tags:
        - canvas
      summary: List canvas template categories
      description: List all canvas template categories
      operationId: listCanvasTemplateCategories
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCanvasTemplateCategoryResponse'
  /knowledge/resource/list:
    get:
      tags:
        - knowledge
      summary: List resources
      description: List all resources
      operationId: listResources
      parameters:
        - name: resourceId
          in: query
          description: Resource ID
          schema:
            type: string
            example: r-g30e1b80b5g1itbemc0g5jj3
        - name: resourceType
          in: query
          description: Resource type
          schema:
            type: string
            $ref: '#/components/schemas/ResourceType'
        - name: page
          in: query
          description: Page number
          schema:
            type: number
            default: 1
        - name: pageSize
          in: query
          description: Page size
          schema:
            type: number
            default: 10
        - name: projectId
          in: query
          description: Related project ID
          schema:
            type: string
        - name: canvasId
          in: query
          description: Related canvas ID
          schema:
            type: string
        - name: order
          in: query
          description: Order
          required: false
          schema:
            $ref: '#/components/schemas/ListOrder'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResourceResponse'
      security:
        - api_key: []
  /knowledge/resource/detail:
    get:
      tags:
        - knowledge
      summary: Get resource detail
      description: Return resource detail along with its document content
      operationId: getResourceDetail
      parameters:
        - name: resourceId
          in: query
          description: Resource ID to retrieve
          required: true
          schema:
            type: string
            example: r-g30e1b80b5g1itbemc0g5jj3
        - name: genPublicUrl
          in: query
          description: Whether to generate public URL for the resource
          schema:
            type: boolean
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetResourceDetailResponse'
      security:
        - api_key: []
  /knowledge/resource/update:
    post:
      tags:
        - knowledge
      summary: Update resource
      description: Update an existing resource
      operationId: updateResource
      requestBody:
        description: Resource update request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertResourceRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertResourceResponse'
      security:
        - api_key: []
  /knowledge/resource/create:
    post:
      tags:
        - knowledge
      summary: Create new resource
      description: Create a new resource
      operationId: createResource
      requestBody:
        description: Resource creation request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertResourceRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertResourceResponse'
      security:
        - api_key: []
  /knowledge/resource/createWithFile:
    post:
      tags:
        - knowledge
      summary: Create new resource with file upload
      description: Create a new resource with file upload in a single request
      operationId: createResourceWithFile
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
                - title
                - resourceType
              properties:
                file:
                  type: string
                  format: binary
                  description: File to upload
                title:
                  type: string
                  description: Resource title
                  example: My Resource
                resourceType:
                  description: Resource type
                  $ref: '#/components/schemas/ResourceType'
                resourceId:
                  type: string
                  description: Resource ID (only used for update)
                  example: r-g30e1b80b5g1itbemc0g5jj3
                data:
                  description: Resource metadata
                  $ref: '#/components/schemas/ResourceMeta'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertResourceResponse'
      security:
        - api_key: []
  /knowledge/resource/batchCreate:
    post:
      tags:
        - knowledge
      summary: Batch create new resources
      description: Batch create a new resource
      operationId: batchCreateResource
      requestBody:
        description: Resource creation request
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpsertResourceRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchCreateResourceResponse'
      security:
        - api_key: []
  /knowledge/resource/reindex:
    post:
      tags:
        - knowledge
      summary: Reindex resource
      description: Reindex an existing resource
      operationId: reindexResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReindexResourceRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReindexResourceResponse'
      security:
        - api_key: []
  /knowledge/resource/delete:
    post:
      tags:
        - knowledge
      summary: Delete resource
      description: Delete an existing resource
      operationId: deleteResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteResourceRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
      security:
        - api_key: []
  /knowledge/document/list:
    get:
      tags:
        - knowledge
      summary: List user documents
      description: List all documents for a user
      operationId: listDocuments
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: number
            default: 1
        - name: pageSize
          in: query
          description: Page size
          required: false
          schema:
            type: number
            default: 10
        - name: projectId
          in: query
          description: Related project ID
          schema:
            type: string
        - name: canvasId
          in: query
          description: Related canvas ID
          schema:
            type: string
        - name: order
          in: query
          description: Order by
          required: false
          schema:
            $ref: '#/components/schemas/ListOrder'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDocumentResponse'
  /knowledge/document/detail:
    get:
      tags:
        - knowledge
      summary: Get canvas detail
      description: Return document detail
      operationId: getDocumentDetail
      parameters:
        - name: docId
          in: query
          description: Document ID to retrieve
          required: true
          schema:
            type: string
            example: d-g30e1b80b5g1itbemc0g5jj3
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDocumentDetailResponse'
  /knowledge/document/export/document:
    get:
      tags:
        - knowledge
      summary: Export document to Markdown, DOCX or PDF format
      description: Export a document to Markdown, DOCX or PDF format
      operationId: exportDocument
      parameters:
        - name: docId
          in: query
          description: Export document ID to retrieve
          required: true
          schema:
            type: string
            example: d-g30e1b80b5g1itbemc0g5jj3
        - name: format
          in: query
          description: Export format
          required: false
          schema:
            type: string
            enum: [markdown, docx, pdf]
            default: markdown
            example: markdown
      responses:
        '200':
          description: operation success
          content:
            text/markdown:
              schema:
                type: string
                format: binary
            application/vnd.openxmlformats-officedocument.wordprocessingml.document:
              schema:
                type: string
                format: binary
            application/pdf:
              schema:
                type: string
                format: binary
  /knowledge/document/update:
    post:
      tags:
        - knowledge
      summary: Update canvas
      description: Update an existing document
      operationId: updateDocument
      requestBody:
        description: Document update request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertDocumentRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertDocumentResponse'
      security:
        - api_key: []
  /knowledge/document/create:
    post:
      tags:
        - knowledge
      summary: Create new canvas
      description: Create a new document
      operationId: createDocument
      requestBody:
        description: Document creation request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertDocumentRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertDocumentResponse'
      security:
        - api_key: []
  /knowledge/document/delete:
    post:
      tags:
        - knowledge
      summary: Delete canvas
      description: Delete an existing document
      operationId: deleteDocument
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteDocumentRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
      security:
        - api_key: []
  /knowledge/document/batchUpdate:
    post:
      tags:
        - knowledge
      summary: Batch update documents
      description: Batch update existing documents
      operationId: batchUpdateDocument
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpsertDocumentRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
      security:
        - api_key: []
  /project/list:
    get:
      tags:
        - project
      summary: List projects
      description: List all projects
      operationId: listProjects
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: number
            default: 1
        - name: pageSize
          in: query
          description: Page size
          required: false
          schema:
            type: number
            default: 10
        - name: order
          in: query
          description: Order by
          required: false
          schema:
            $ref: '#/components/schemas/ListOrder'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListProjectResponse'
  /project/detail:
    get:
      tags:
        - project
      summary: Get project detail
      description: Get project detail by project ID
      operationId: getProjectDetail
      parameters:
        - name: projectId
          in: query
          description: Project ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProjectDetailResponse'
  /project/new:
    post:
      tags:
        - project
      summary: Create new project
      description: Create a new project
      operationId: createProject
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertProjectRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertProjectResponse'
  /project/update:
    post:
      tags:
        - project
      summary: Update project
      description: Update an existing project
      operationId: updateProject
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertProjectRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertProjectResponse'
  /project/updateItems:
    post:
      tags:
        - project
      summary: Update items in project
      description: Update items in a project
      operationId: updateProjectItems
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProjectItemsRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
  /project/delete:
    post:
      tags:
        - project
      summary: Delete project
      description: Delete an existing project
      operationId: deleteProject
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteProjectRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
  /project/deleteItems:
    post:
      tags:
        - project
      summary: Delete items in project
      description: Delete items in a project
      operationId: deleteProjectItems
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteProjectItemsRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
  /codeArtifact/list:
    get:
      tags:
        - codeArtifact
      summary: List code artifacts
      description: List all code artifacts
      operationId: listCodeArtifacts
      parameters:
        - name: resultId
          in: query
          description: Action result ID
          schema:
            type: string
        - name: resultVersion
          in: query
          description: Action result version
          schema:
            type: number
        - name: needContent
          in: query
          description: Whether to include content
          schema:
            type: boolean
            default: false
        - name: canvasId
          in: query
          description: Related canvas ID
          schema:
            type: string
        - name: page
          in: query
          description: Page number
          schema:
            type: number
            default: 1
        - name: pageSize
          in: query
          description: Page size
          schema:
            type: number
            default: 10
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCodeArtifactResponse'
  /codeArtifact/detail:
    get:
      tags:
        - codeArtifact
      summary: Get code artifact detail
      description: Get code artifact detail by artifact ID
      operationId: getCodeArtifactDetail
      parameters:
        - name: artifactId
          in: query
          description: Artifact ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCodeArtifactDetailResponse'
  /codeArtifact/new:
    post:
      tags:
        - codeArtifact
      summary: Create code artifact
      description: Create new code artifact
      operationId: createCodeArtifact
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertCodeArtifactRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertCodeArtifactResponse'
  /codeArtifact/update:
    post:
      tags:
        - codeArtifact
      summary: Update code artifact
      description: Update code artifact by artifact ID
      operationId: updateCodeArtifact
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertCodeArtifactRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertCodeArtifactResponse'
  /share/new:
    post:
      tags:
        - share
      summary: Create share
      description: Create new share for canvas
      operationId: createShare
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateShareRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateShareResponse'
  /share/list:
    get:
      tags:
        - share
      summary: List shares
      description: List all shares
      operationId: listShares
      parameters:
        - name: shareId
          in: query
          description: Share ID
          schema:
            type: string
        - name: entityId
          in: query
          description: Entity ID
          schema:
            type: string
        - name: entityType
          in: query
          description: Entity type
          schema:
            $ref: '#/components/schemas/EntityType'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListShareResponse'
  /share/delete:
    post:
      tags:
        - share
      summary: Delete share
      description: Delete an existing share
      operationId: deleteShare
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteShareRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
  /share/duplicate:
    post:
      tags:
        - share
      summary: Duplicate share
      description: Duplicate an existing share
      operationId: duplicateShare
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DuplicateShareRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DuplicateShareResponse'
  /label/class/list:
    get:
      tags:
        - label
      summary: List label classes
      description: List all label classes
      operationId: listLabelClasses
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: number
            default: 1
        - name: pageSize
          in: query
          description: Page size
          schema:
            type: number
            default: 10
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLabelClassesResponse'
      security:
        - api_key: []
  /label/class/new:
    post:
      tags:
        - label
      summary: Create new label class
      description: Create a new label class
      operationId: createLabelClass
      requestBody:
        description: Label class creation request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLabelClassRequest'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertLabelClassResponse'
  /label/class/update:
    post:
      tags:
        - label
      summary: Update label class
      description: Update an existing label class
      operationId: updateLabelClass
      requestBody:
        description: Label class update request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLabelClassRequest'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertLabelClassResponse'
  /label/class/delete:
    post:
      tags:
        - label
      summary: Delete label class
      description: Delete an existing label class
      operationId: deleteLabelClass
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteLabelClassRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
  /label/instance/list:
    get:
      tags:
        - label
      summary: List labels
      description: List all label instances
      operationId: listLabelInstances
      parameters:
        - name: entityType
          in: query
          description: Entity type to retrieve
          schema:
            description: Label entity type
            $ref: '#/components/schemas/EntityType'
        - name: entityId
          in: query
          description: Entity type to retrieve
          schema:
            type: string
            example: cl-g30e1b80b5g1itbemc0g5jj3
        - name: classId
          in: query
          description: Label class ID
          schema:
            type: string
            example: lc-g30e1b80b5g1itbemc0g5jj3
        - name: value
          in: query
          description: Label value
          schema:
            type: string
            example: HotPotQA
        - name: page
          in: query
          description: Page number
          schema:
            type: number
            default: 1
        - name: pageSize
          in: query
          description: Page size
          schema:
            type: number
            default: 10
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLabelInstancesResponse'
  /label/instance/new:
    post:
      tags:
        - label
      summary: Create new label instance
      description: Create new label instance
      operationId: createLabelInstance
      requestBody:
        description: Label instance creation request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLabelInstanceRequest'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertLabelInstanceResponse'
  /label/instance/update:
    post:
      tags:
        - label
      summary: Update label
      description: Update an existing label instance
      operationId: updateLabelInstance
      requestBody:
        description: Label update request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLabelInstanceRequest'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertLabelInstanceResponse'
  /label/instance/delete:
    post:
      tags:
        - label
      summary: Delete label
      description: Delete an existing label
      operationId: deleteLabelInstance
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteLabelInstanceRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
  /action/list:
    get:
      tags:
        - action
      summary: List actions
      description: List all actions
      operationId: listActions
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListActionResponse'
  /action/result:
    get:
      tags:
        - action
      summary: Get action result
      description: Get action result by result ID
      operationId: getActionResult
      parameters:
        - name: resultId
          in: query
          description: Action result ID
          required: true
          schema:
            type: string
        - name: version
          in: query
          description: Action result version
          required: false
          schema:
            type: number
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetActionResultResponse'
  /action/abort:
    post:
      tags:
        - action
      summary: Abort action
      description: Abort an action
      operationId: abortAction
      requestBody:
        description: Abort action request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AbortActionRequest'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
  /skill/list:
    get:
      tags:
        - skill
      summary: List skills
      description: List all skills
      operationId: listSkills
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSkillResponse'
  /skill/invoke:
    post:
      tags:
        - skill
      summary: Invoke skill
      description: Invoke a skill
      operationId: invokeSkill
      requestBody:
        description: Skill invocation request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvokeSkillRequest'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvokeSkillResponse'
  /skill/streamInvoke:
    post:
      tags:
        - skill
      summary: Stream invoke skill
      description: Invoke a skill and return SSE stream
      operationId: streamInvokeSkill
      requestBody:
        description: Skill invocation request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvokeSkillRequest'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            text/event-stream:
              schema:
                type: string
  /skill/instance/list:
    get:
      tags:
        - skill
      summary: List skill instances
      description: List skill instances for a user
      operationId: listSkillInstances
      parameters:
        - name: skillId
          in: query
          description: Skill ID
          schema:
            type: string
        - name: sortByPin
          in: query
          description: Whether to sort by pinned skill instances
          schema:
            type: boolean
            default: false
        - name: page
          in: query
          description: Page number
          schema:
            type: number
            default: 1
        - name: pageSize
          in: query
          description: Page size
          schema:
            type: number
            default: 10
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSkillInstanceResponse'
  /skill/instance/new:
    post:
      tags:
        - skill
      summary: Create new skill instance
      description: Create a new skill instance for user
      operationId: createSkillInstance
      requestBody:
        description: Skill creation request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSkillInstanceRequest'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSkillInstanceResponse'
  /skill/instance/update:
    post:
      tags:
        - skill
      summary: Update skill instance
      description: Update an existing skill instance
      operationId: updateSkillInstance
      requestBody:
        description: Skill update request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSkillInstanceRequest'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateSkillInstanceResponse'
  /skill/instance/pin:
    post:
      tags:
        - skill
      summary: Pin skill instance
      description: Pin an existing skill instance
      operationId: pinSkillInstance
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PinSkillInstanceRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
  /skill/instance/unpin:
    post:
      tags:
        - skill
      summary: Unpin skill instance
      description: Unpin an existing skill instance
      operationId: unpinSkillInstance
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnpinSkillInstanceRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
  /skill/instance/delete:
    post:
      tags:
        - skill
      summary: Delete skill instance
      description: Delete an existing skill instance
      operationId: deleteSkillInstance
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteSkillInstanceRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
      security:
        - api_key: []
  /skill/trigger/list:
    get:
      tags:
        - skill
      summary: List skill triggers
      description: List all skill triggers
      operationId: listSkillTriggers
      parameters:
        - name: skillId
          in: query
          description: Skill ID
          schema:
            type: string
            example: sk-g30e1b80b5g1itbemc0g5jj3
        - name: page
          in: query
          description: Page number
          schema:
            type: number
            default: 1
        - name: pageSize
          in: query
          description: Page size
          schema:
            type: number
            default: 10
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSkillTriggerResponse'
  /skill/trigger/new:
    post:
      tags:
        - skill
      summary: Create new trigger
      description: Create a new trigger
      operationId: createSkillTrigger
      requestBody:
        description: Skill trigger creation request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSkillTriggerRequest'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSkillTriggerResponse'
  /skill/trigger/update:
    post:
      tags:
        - skill
      summary: Update trigger
      description: Update an existing trigger
      operationId: updateSkillTrigger
      requestBody:
        description: Skill trigger update request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSkillTriggerRequest'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateSkillTriggerResponse'
  /skill/trigger/delete:
    post:
      tags:
        - skill
      summary: Delete trigger
      description: Delete an existing trigger
      operationId: deleteSkillTrigger
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteSkillTriggerRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
      security:
        - api_key: []
  /media/generate:
      post:
        summary: Generate multimedia content
        description: Generate image, video or audio based on the given prompt
        operationId: generateMedia
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaGenerateRequest'
        responses:
          '200':
            description: Successful generation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/MediaGenerateResponse'
  /pilot/session/new:
    post:
      tags:
        - pilot
      summary: Create new pilot session
      description: Create a new pilot session
      operationId: createPilotSession
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePilotSessionRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertPilotSessionResponse'
  /pilot/session/update:
    post:
      tags:
        - pilot
      summary: Update pilot session
      description: Update an existing pilot session
      operationId: updatePilotSession
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePilotSessionRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertPilotSessionResponse'
  /pilot/session/list:
    get:
      tags:
        - pilot
      summary: List pilot sessions
      description: List all pilot sessions
      operationId: listPilotSessions
      parameters:
        - name: targetId
          in: query
          description: Target ID
          schema:
            type: string
        - name: targetType
          in: query
          description: Target type
          schema:
            $ref: '#/components/schemas/EntityType'
        - name: page
          in: query
          description: Page number
          schema:
            type: number
            default: 1
        - name: pageSize
          in: query
          description: Page size
          schema:
            type: number
            default: 10
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPilotSessionsResponse'
  /pilot/session/detail:
    get:
      tags:
        - pilot
      summary: Get pilot session detail
      description: Get detail for a pilot session
      operationId: getPilotSessionDetail
      parameters:
        - name: sessionId
          in: query
          description: Pilot session ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPilotSessionDetailResponse'
  /pilot/session/recover:
    post:
      tags:
        - pilot
      summary: Recover pilot session
      description: Recover a failed pilot session by retrying failed steps. Can recover all failed steps or specific steps.
      operationId: recoverPilotSession
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecoverPilotSessionRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
  /workflow/initialize:
    post:
      tags:
        - workflow
      summary: Initialize workflow execution
      description: Initialize a new workflow execution for a canvas
      operationId: initializeWorkflow
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InitializeWorkflowRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InitializeWorkflowResponse'
  /workflow/detail:
    get:
      tags:
        - workflow
      summary: Get workflow detail
      description: Get detail for a workflow execution
      operationId: getWorkflowDetail
      parameters:
        - name: executionId
          in: query
          description: Workflow execution ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetWorkflowDetailResponse'
  /workflow-app/new:
    post:
      tags:
        - app
      summary: Create new workflow app
      description: Create a new workflow app
      operationId: createWorkflowApp
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWorkflowAppRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateWorkflowAppResponse'
  /workflow-app/delete:
    post:
      tags:
        - app
      summary: Delete workflow app
      description: Delete a workflow app
      operationId: deleteWorkflowApp
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteWorkflowAppRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
  /workflow-app/detail:
    get:
      tags:
        - app
      summary: Get workflow app detail
      description: Get detail for a workflow app
      operationId: getWorkflowAppDetail
      parameters:
        - name: appId
          in: query
          description: Workflow app ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetWorkflowAppDetailResponse'
  /workflow-app/execute:
    post:
      tags:
        - app
      summary: Execute workflow app
      description: Execute a workflow app
      operationId: executeWorkflowApp
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExecuteWorkflowAppRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExecuteWorkflowAppResponse'
  /workflow-app/list:
    get:
      tags:
        - app
      summary: List workflow apps
      description: List workflow apps for a user, optionally filtered by canvasId
      operationId: listWorkflowApps
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: number
            default: 1
        - name: pageSize
          in: query
          description: Page size
          schema:
            type: number
            default: 10
        - name: canvasId
          in: query
          description: Canvas ID to filter by
          required: false
          schema:
            type: string
        - name: order
          in: query
          description: Order
          schema:
            $ref: '#/components/schemas/ListOrder'
        - name: keyword
          in: query
          description: Search keyword
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListWorkflowAppsResponse'
  /user/settings:
    get:
      tags:
        - user
      summary: Get user settings
      description: Return settings for current user
      operationId: getSettings
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserSettingsResponse'
      security:
        - api_key: []
    put:
      tags:
        - user
      summary: Update user settings
      description: Update settings for current user
      operationId: updateSettings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserSettingsRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
      security:
        - api_key: []
  /user/checkSettingsField:
    get:
      tags:
        - user
      summary: Check settings field
      description: Given a settings field, check if the given value is valid
      operationId: checkSettingsField
      parameters:
        - name: field
          in: query
          description: Settings field
          required: true
          schema:
            type: string
            enum:
              - name
              - email
        - name: value
          in: query
          description: Field value
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckSettingsFieldResponse'
  /credit/recharge:
    get:
      tags:
        - credit
      summary: Get credit recharge
      description: Get credit recharge
      operationId: getCreditRecharge
      parameters:
        - name: page
          in: query
          description: Page number (1-based)
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: pageSize
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: successful operation
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/GetCreditRechargeResponse'      
  /credit/usage:
    get:
      tags:
        - credit
      summary: Get credit usage
      description: Get credit usage
      operationId: getCreditUsage
      parameters:
        - name: page
          in: query
          description: Page number (1-based)
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: pageSize
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: successful operation
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/GetCreditUsageResponse'
  /credit/balance:
    get:
      tags:
        - credit
      summary: Get credit balance
      description: Get credit balance
      operationId: getCreditBalance
      responses:
        '200':
          description: successful operation
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/getCreditBalanceResponse'
  /subscription/plans:
    get:
      tags:
        - subscription
      summary: Get subscription plans
      description: Get subscription plans
      operationId: getSubscriptionPlans
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSubscriptionPlansResponse'
  /subscription/usage:
    get:
      tags:
        - subscription
      summary: Get subscription usage
      description: Get subscription usage
      operationId: getSubscriptionUsage
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSubscriptionUsageResponse'
  /subscription/modelList:
    get:
      tags:
        - subscription
      summary: List models
      description: List all available models
      operationId: listModels
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListModelsResponse'
  /subscription/createCheckoutSession:
    post:
      tags:
        - subscription
      summary: Create checkout session
      description: Create a checkout session
      operationId: createCheckoutSession
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCheckoutSessionRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCheckoutSessionResponse'
  /subscription/createPortalSession:
    post:
      tags:
        - subscription
      summary: Create portal session
      description: Create a portal session
      operationId: createPortalSession
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatePortalSessionResponse'
  /search:
    post:
      tags:
        - search
      summary: Search
      description: Search for canvases, resources, documents, etc.
      operationId: search
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'
  /search/multilingualSearch:
    post:
      tags:
        - search
      summary: Multilingual Web Search
      description: Search web content across multiple languages
      operationId: multiLingualWebSearch
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MultiLingualWebSearchRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiLingualWebSearchResponse'
  /provider/list:
    get:
      tags:
        - provider
      summary: List providers
      description: List all available providers
      operationId: listProviders
      parameters:
        - name: enabled
          in: query
          description: Whether the provider is enabled
          schema:
            type: boolean
        - name: providerKey
          in: query
          description: Provider key
          schema:
            type: string
        - name: category
          in: query
          description: Provider category
          schema:
            $ref: '#/components/schemas/ProviderCategory'
        - name: isGlobal
          in: query
          description: Whether the provider is global. If not passed, return both global and user-specific providers.
          schema:
            type: boolean
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListProvidersResponse'
  /provider/create:
    post:
      tags:
        - provider
      summary: Create provider
      description: Create a new provider
      operationId: createProvider
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertProviderRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertProviderResponse'
  /provider/update:
    post:
      tags:
        - provider
      summary: Update provider
      description: Update an existing provider
      operationId: updateProvider
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertProviderRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertProviderResponse'
  /provider/delete:
    post:
      tags:
        - provider
      summary: Delete provider
      description: Delete an existing provider
      operationId: deleteProvider
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteProviderRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
  /provider/test-connection:
    post:
      tags:
        - provider
      summary: Test provider connection
      description: Test provider API connection and availability
      operationId: testProviderConnection
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestProviderConnectionRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestProviderConnectionResponse'
  /provider/item/list:
    get:
      tags:
        - provider
      summary: List provider items
      description: List all available provider items
      operationId: listProviderItems
      parameters:
        - name: providerId
          in: query
          description: Provider ID
          schema:
            type: string
        - name: enabled
          in: query
          description: Whether the provider item is enabled
          schema:
            type: boolean
        - name: category
          in: query
          description: Provider category
          schema:
            $ref: '#/components/schemas/ProviderCategory'
        - name: isGlobal
          in: query
          description: Whether the provider item is global. If not passed, return both global and user-specific provider items.
          schema:
            type: boolean
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListProviderItemsResponse'
  /provider/item/option/list:
    get:
      tags:
        - provider
      summary: List provider item options
      description: List all available provider item options for a given provider
      operationId: listProviderItemOptions
      parameters:
        - name: providerId
          in: query
          description: Provider ID
          required: true
          schema:
            type: string
        - name: category
          in: query
          description: Provider category
          schema:
            $ref: '#/components/schemas/ProviderCategory'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListProviderItemOptionsResponse'
  /provider/item/create:
    post:
      tags:
        - provider
      summary: Create model item
      description: Create a new model item
      operationId: createProviderItem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertProviderItemRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertProviderItemResponse'
  /provider/item/batchCreate:
    post:
      tags:
        - provider
      summary: Batch create model items
      description: Batch create model items
      operationId: batchCreateProviderItems
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchUpsertProviderItemsRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchUpsertProviderItemsResponse'
  /provider/item/update:
    post:
      tags:
        - provider
      summary: Update model item
      description: Update an existing model item
      operationId: updateProviderItem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertProviderItemRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertProviderItemResponse'
  /provider/item/batchUpdate:
    post:
      tags:
        - provider
      summary: Batch update provider items
      description: Batch update provider items
      operationId: batchUpdateProviderItems
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchUpsertProviderItemsRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchUpsertProviderItemsResponse'
  /provider/item/delete:
    post:
      tags:
        - model
      summary: Delete provider item
      description: Delete an existing model item
      operationId: deleteProviderItem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteProviderItemRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
  /tool/list:
    get:
      tags:
        - tool
      summary: List tool
      description: List all available tools, including regular tools and MCP servers.
      operationId: listTools
      parameters:
        - name: isGlobal
          in: query
          description: Whether the tool is global. If not passed, return both global and user-specific tools.
          schema:
            type: boolean
        - name: enabled
          in: query
          description: Whether the tool is enabled. If not passed, return both enabled and disabled tools.
          schema:
            type: boolean
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListToolsResponse'
  /tool/inventory/list:
    get:
      tags:
        - tool
      summary: List toolset inventory
      description: List all available toolsets in inventory, including uninstalled.
      operationId: listToolsetInventory
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListToolsetInventoryResponse'
  /tool/toolset/list:
    get:
      tags:
        - tool
      summary: List toolsets
      description: List all installed toolsets
      operationId: listToolsets
      parameters:
        - name: isGlobal
          in: query
          description: Whether the toolset is global. If not passed, return both global and user-specific toolsets.
          schema:
            type: boolean
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListToolsetsResponse'
  /tool/toolset/create:
    post:
      tags:
        - tool
      summary: Create regular tool
      description: Create a new regular tool
      operationId: createToolset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertToolsetRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertToolsetResponse'
  /tool/toolset/update:
    post:
      tags:
        - tool
      summary: Update toolset
      description: Update an existing toolset
      operationId: updateToolset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertToolsetRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertToolsetResponse'
  /tool/toolset/delete:
    post:
      tags:
        - tool
      summary: Delete toolset
      description: Delete an existing toolset
      operationId: deleteToolset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteToolsetRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
  /misc/scrape:
    post:
      tags:
        - misc
      summary: Scrape
      description: Scrape a weblink
      operationId: scrape
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScrapeWeblinkRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScrapeWeblinkResponse'
  /misc/upload:
    post:
      tags:
        - misc
      summary: Upload
      description: Upload a file
      operationId: upload
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UploadRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadResponse'
  /misc/static/{fileName}:
    get:
      tags:
        - misc
      summary: Serve static
      description: Serve static files (only for local testing)
      operationId: serveStatic
      responses:
        '200':
          description: successful operation
  /misc/convert:
    post:
      tags:
        - misc
      summary: Convert between formats
      description: Convert content between different formats (e.g., HTML to Markdown)
      operationId: convert
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ConvertRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConvertResponse'

components:
  schemas:
    ExtractVariablesRequest:
      type: object
      required:
        - prompt
        - canvasId
        - mode
      properties:
        prompt:
          type: string
          description: Natural language prompt describing the desired functionality
          minLength: 1
          maxLength: 500
          example: "Create a user registration form with username, email, and password fields"
        canvasId:
          type: string
          description: Canvas ID to retrieve existing variable context and content
          pattern: '^[a-zA-Z0-9_-]+$'
          example: "canvas-123"
        mode:
          type: string
          enum: [direct, candidate]
          description: |
            Processing mode for variable extraction:
            - direct: Directly update Canvas variables and return results
            - candidate: Return candidate solutions for user selection
          example: "candidate"
        sessionId:
          type: string
          description: |
            Optional session ID for direct mode to check for existing candidate records.
            When provided in direct mode, the system will check if there are
            unapplied candidate records for this session.
          example: "session-789"

    VariableExtractionResult:
      type: object
      required:
        - originalPrompt
        - processedPrompt
        - variables
        - reusedVariables
      properties:
        originalPrompt:
          type: string
          description: Original natural language prompt from user input
          example: "Create a user registration form with username, email, and password fields"
        processedPrompt:
          type: string
          description: |
            Processed prompt with variable references embedded.
            Variables are represented using handlebars syntax (e.g., {{variableName}}).
          example: "Create a user registration form with {{username}}, {{email}}, and {{password}} fields"
        variables:
          type: array
          description: List of extracted workflow variables
          items:
            $ref: '#/components/schemas/WorkflowVariable'
        reusedVariables:
          type: array
          description: List of variables that were reused from existing context
          items:
            $ref: '#/components/schemas/VariableReuse'
        sessionId:
          type: string
          description: |
            Session ID for candidate mode responses.
            This ID can be used in subsequent direct mode requests
            to apply the selected candidate solution.
          example: "session-abc123"
        extractionConfidence:
          type: number
          description: Confidence score for the extraction (0.0 to 1.0)
          example: 0.78

    VariableReuse:
      type: object
      description: Information about variables reused from existing context
      required:
        - detectedText
        - reusedVariableName
        - confidence
        - reason
      properties:
        detectedText:
          type: string
          description: Text in the prompt that triggered variable reuse detection
          example: "form"
        reusedVariableName:
          type: string
          description: Name of the existing variable that was reused
          example: "formType"
        confidence:
          type: number
          format: float
          minimum: 0.0
          maximum: 1.0
          description: Confidence score for the reuse detection (0.0 to 1.0)
          example: 0.78
        reason:
          type: string
          description: Explanation of why this variable was reused
          example: "Similar form structure detected in existing variables"


    McpServerType:
      type: string
      description: MCP Server type
      enum: [sse, streamable, stdio]
    
    McpServerDTO:
      type: object
      required:
        - name
        - type
        - enabled
        - isGlobal
      properties:
        name:
          type: string
          description: MCP server name
          example: My MCP Server
        type:
          $ref: '#/components/schemas/McpServerType'
        url:
          type: string
          description: MCP server URL (for sse and streamable types)
          example: https://example.com/mcp
        command:
          type: string
          description: Command to execute (for stdio type)
          example: python
        args:
          type: array
          description: Command arguments (for stdio type)
          items:
            type: string
          example: ["-m", "server.py"]
        env:
          type: object
          description: Environment variables (for stdio type)
          additionalProperties:
            type: string
          example:
            API_KEY: your_api_key
        headers:
          type: object
          description: HTTP headers (for sse and streamable types)
          additionalProperties:
            type: string
          example:
            Authorization: Bearer token
        reconnect:
          type: object
          description: Reconnection configuration
          properties:
            enabled:
              type: boolean
              description: Whether reconnection is enabled
            maxAttempts:
              type: integer
              description: Maximum number of reconnection attempts
            delayMs:
              type: integer
              description: Delay between reconnection attempts in milliseconds
        config:
          type: object
          description: Additional configuration
          additionalProperties: true
        enabled:
          type: boolean
          description: Whether the MCP server is enabled
        isGlobal:
          type: boolean
          description: Whether the MCP server is global
        createdAt:
          type: string
          format: date-time
          description: MCP server creation time
        updatedAt:
          type: string
          format: date-time
          description: MCP server update time

    ListMcpServersResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/McpServerDTO'

    UpsertMcpServerRequest:
      type: object
      required:
        - name
        - type
      properties:
        name:
          type: string
          description: MCP server name
        type:
          $ref: '#/components/schemas/McpServerType'
        url:
          type: string
          description: MCP server URL (required for sse and streamable types)
        command:
          type: string
          description: Command to execute (required for stdio type)
        args:
          type: array
          description: Command arguments (required for stdio type)
          items:
            type: string
        env:
          type: object
          description: Environment variables (for stdio type)
          additionalProperties:
            type: string
        headers:
          type: object
          description: HTTP headers (for sse and streamable types)
          additionalProperties:
            type: string
        reconnect:
          type: object
          description: Reconnection configuration
          properties:
            enabled:
              type: boolean
              description: Whether reconnection is enabled
            maxAttempts:
              type: integer
              description: Maximum number of reconnection attempts
            delayMs:
              type: integer
              description: Delay between reconnection attempts in milliseconds
        config:
          type: object
          description: Additional configuration
          additionalProperties: true
        enabled:
          type: boolean
          description: Whether the MCP server is enabled

    UpsertMcpServerResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/McpServerDTO'

    DeleteMcpServerRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: MCP name to delete

    McpServerTool:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
          description: Tool name
          example: tool_name
        description:
          type: string
          description: Tool description
          example: This tool does something useful

    ValidateMcpServerResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/McpServerTool'

    DeleteMcpServerResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: 'null'

    Page:
      type: object
      required:
        - pageId
        - title
        - createdAt
        - updatedAt
      properties:
        pageId:
          type: string
          description: Page ID
          example: pg-g30e1b80b5g1itbemc0g5jj3
        title:
          type: string
          description: Page title
          example: My Page
        description:
          type: string
          description: Page description
        status:
          type: string
          description: Page status
          enum:
            - draft
            - published
        canvasId:
          type: string
          description: Canvas ID associated with this page
          example: cv-g30e1b80b5g1itbemc0g5jj3
        coverUrl:
          type: string
          description: Page cover URL
        createdAt:
          type: string
          format: date-time
          description: Page creation time
        updatedAt:
          type: string
          format: date-time
          description: Page last update time

    PageNodeRelation:
      type: object
      required:
        - relationId
        - nodeId
        - nodeType
        - entityId
        - orderIndex
      properties:
        relationId:
          type: string
          description: Relation ID
        pageId:
          type: string
          description: Page ID
        nodeId:
          type: string
          description: Node ID
        nodeType:
          type: string
          description: Node type
        entityId:
          type: string
          description: Entity ID
        orderIndex:
          type: integer
          description: Order index
        nodeData:
          description: Node data
          $ref: '#/components/schemas/CanvasNodeData'

    PageDetail:
      type: object
      allOf:
        - $ref: '#/components/schemas/Page'
        - type: object
          properties:
            nodeRelations:
              type: array
              description: List of node relations
              items:
                $ref: '#/components/schemas/PageNodeRelation'
            pageConfig:
              type: object
              description: Page configuration

    UpdatePageRequest:
      type: object
      properties:
        title:
          type: string
          description: Page title
        description:
          type: string
          description: Page description
        nodeRelations:
          type: array
          description: List of node relations with updated order
          items:
            type: object
            properties:
              nodeId:
                type: string
                description: Node ID
              orderIndex:
                type: integer
                description: New order index

    UpdatePageResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              allOf:
                - $ref: '#/components/schemas/Page'
                - type: object
                  properties:
                    nodeRelations:
                      type: array
                      description: List of node relations
                      items:
                        $ref: '#/components/schemas/PageNodeRelation'

    DeletePageResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                pageId:
                  type: string
                  description: ID of the deleted page
                canvasId:
                  type: string
                  description: Canvas ID associated with the deleted page

    SharePageResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                pageId:
                  type: string
                  description: Page ID
                canvasId:
                  type: string
                  description: Canvas ID associated with the page
                shareId:
                  type: string
                  description: Share ID
                shareUrl:
                  type: string
                  description: Share URL

    DeletePageNodeResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                pageId:
                  type: string
                  description: Page ID
                canvasId:
                  type: string
                  description: Canvas ID associated with the page
                nodeId:
                  type: string
                  description: ID of the deleted node

    ListPagesResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                total:
                  type: integer
                  description: Total number of pages
                pages:
                  type: array
                  description: List of pages
                  items:
                    $ref: '#/components/schemas/Page'

    PageDetailResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/PageDetail'

    AddPageNodesRequest:
      type: object
      required:
        - nodeIds
      properties:
        nodeIds:
          type: array
          description: List of node IDs to add to the page
          items:
            type: string

    AddPageNodesResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                page:
                  $ref: '#/components/schemas/Page'
                nodeRelations:
                  type: array
                  description: List of node relations
                  items:
                    $ref: '#/components/schemas/PageNodeRelation'

    CanvasPageResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                page:
                  $ref: '#/components/schemas/Page'
                nodeRelations:
                  type: array
                  description: List of node relations
                  items:
                    $ref: '#/components/schemas/PageNodeRelation'

    User:
      type: object
      description: Refly user, used as JWT payload
      required:
        - uid
      properties:
        uid:
          type: string
          description: UID
        email:
          type: string
          description: Email
    AuthType:
      type: string
      description: Auth type
      enum:
        - email
        - oauth
    Account:
      type: object
      description: Auth account
      required:
        - type
        - provider
        - providerAccountId
      properties:
        type:
          $ref: '#/components/schemas/AuthType'
          description: Auth type
        provider:
          type: string
          description: Provider
        scope:
          type: array
          description: Auth scope
          items:
            type: string
        providerAccountId:
          type: string
          description: Provider account ID
    ListAccountsResponse:
      type: object
      description: List auth accounts response
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: List of auth accounts
              items:
                $ref: '#/components/schemas/Account'
    CheckToolOAuthStatusResponse:
      type: object
      description: Check tool OAuth status response
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              description: OAuth status information
              properties:
                authorized:
                  type: boolean
                  description: Whether user has sufficient OAuth authorization
                provider:
                  type: string
                  description: OAuth provider
                scope:
                  type: array
                  description: Required OAuth scopes
                  items:
                    type: string
    ShareUser:
      type: object
      description: Refly user in shared entity
      required:
        - uid
      properties:
        uid:
          type: string
          description: UID
        name:
          type: string
          description: User name
        nickname:
          type: string
          description: User nickname
        avatar:
          type: string
          description: User avatar
    ListOrder:
      type: string
      description: List order
      enum:
        - creationAsc
        - creationDesc
        - updationAsc
        - updationDesc
    CanvasStatus:
      type: string
      description: Canvas status
      enum:
        - ready
        - duplicating
        - duplicate_failed
    Canvas:
      type: object
      required:
        - canvasId
        - title
        - createdAt
        - updatedAt
      properties:
        canvasId:
          type: string
          description: Canvas ID
          example: c-g30e1b80b5g1itbemc0g5jj3
        title:
          type: string
          description: Canvas title
          example: My canvas
        readOnly:
          type: boolean
          description: Whether this canvas is read-only
        status:
          type: string
          description: Canvas status
          $ref: '#/components/schemas/CanvasStatus'
        owner:
          description: Canvas owner
          $ref: '#/components/schemas/ShareUser'
        shareRecord:
          description: Canvas share record
          $ref: '#/components/schemas/ShareRecord'
        usedToolsets:
          type: array
          description: Used toolsets in the canvas
          items:
            type: object
            $ref: '#/components/schemas/GenericToolset'
        minimapUrl:
          type: string
          description: Minimap URL
        minimapStorageKey:
          type: string
          description: Minimap storage key
        createdAt:
          type: string
          format: date-time
          description: Canvas creation time
        updatedAt:
          type: string
          format: date-time
          description: Canvas update time
    CanvasTemplateCategory:
      type: object
      required:
        - categoryId
        - name
        - labelDict
        - descriptionDict
      properties:
        categoryId:
          type: string
          description: Category ID
        name:
          type: string
          description: Category name
        labelDict:
          type: object
          description: Category label dictionary
          additionalProperties:
            type: string
        descriptionDict:
          type: object
          description: Category description dictionary
          additionalProperties:
            type: string
    CanvasTemplate:
      type: object
      required:
        - templateId
        - shareId
        - title
        - description
        - language
        - createdAt
        - updatedAt
      properties:
        templateId:
          type: string
          description: Canvas template ID
          example: ct-g30e1b80b5g1itbemc0g5jj3
        shareId:
          type: string
          description: Share ID
          example: can-g30e1b80b5g1itbemc0g5jj3
        shareUser:
          description: Share user
          $ref: '#/components/schemas/ShareUser'
        version:
          type: integer
          description: Canvas template version
        category:
          description: Canvas template category
          $ref: '#/components/schemas/CanvasTemplateCategory'
        title:
          type: string
          description: Canvas template title
        description:
          type: string
          description: Canvas template description
        language:
          type: string
          description: Canvas template language code
        featured:
          type: boolean
          description: Whether this canvas template is featured
        appId:
          type: string
          description: Workflow app ID
        coverUrl:
          type: string
          description: Canvas template cover image URL
        appShareId:
          type: string
          description: Associated workflow app share ID
        createdAt:
          type: string
          format: date-time
          description: Canvas template creation time
        updatedAt:
          type: string
          format: date-time
          description: Canvas template update time
    ResourceMeta:
      type: object
      description: Resource metadata
      properties:
        url:
          type: string
          description: Weblink URL
          example: https://www.google.com
        title:
          type: string
          description: Weblink title
          example: Google
        contentType:
          type: string
          description: File content type (MIME type)
          example: application/pdf
    ResourceType:
      type: string
      description: Resource type
      enum:
        - weblink
        - text
        - file
        - document
        - image
        - video
        - audio
    IndexError:
      type: object
      description: Error message for resource indexing
      properties:
        type:
          type: string
          description: Error type
          enum:
            - pageLimitExceeded
            - unknownError
        metadata:
          type: object
          description: Error metadata
    Resource:
      type: object
      required:
        - resourceId
        - resourceType
        - title
      properties:
        resourceId:
          type: string
          description: Resource ID (empty if it's external)
          example: r-g30e1b80b5g1itbemc0g5jj3
        resourceType:
          description: Resource type
          $ref: '#/components/schemas/ResourceType'
        title:
          type: string
          description: Resource title
        data:
          type: object
          description: Resource metadata
          $ref: '#/components/schemas/ResourceMeta'
        indexStatus:
          description: Resource index status
          $ref: '#/components/schemas/IndexStatus'
        indexError:
          description: Error message for resource indexing
          $ref: '#/components/schemas/IndexError'
        storageKey:
          type: string
          description: Resource storage key
        storageSize:
          type: string
          description: Resource storage size (in bytes)
        vectorSize:
          type: string
          description: Resource vector storage size (in bytes)
        rawFileKey:
          type: string
          description: Raw file storage key (used to download the file)
        canvasId:
          type: string
          description: Canvas ID to bind with
        createdAt:
          type: string
          format: date-time
          description: Resource creation time
        updatedAt:
          type: string
          format: date-time
          description: Resource update time
        contentPreview:
          type: string
          description: Preview content for this resource
        shareId:
          type: string
          description: Share ID
        content:
          type: string
          description: Document content for this resource (only returned in getResourceDetail API)
        downloadURL:
          type: string
          description: Download URL for this resource (for file type only)
        publicURL:
          type: string
          description: Publicly accessible URL for this resource (file type only)
    Document:
      type: object
      required:
        - docId
        - title
      properties:
        docId:
          type: string
          description: Document ID
          example: d-g30e1b80b5g1itbemc0g5jj3
        title:
          type: string
          description: Document title
          example: My document
        contentPreview:
          type: string
          description: Document content preview
        content:
          type: string
          description: Full document content (only returned in detail api)
        readOnly:
          type: boolean
          description: Whether this document is read-only
        canvasId:
          type: string
          description: Canvas ID to bind with
        createdAt:
          type: string
          format: date-time
          description: Document creation time
        updatedAt:
          type: string
          format: date-time
          description: Document update time
    EntityType:
      type: string
      description: Entity type
      enum:
        - document
        - resource
        - canvas
        - share
        - user
        - project
        - skillResponse
        - codeArtifact
        - page
        - mediaResult
        - workflowApp
    Entity:
      type: object
      description: Entity
      properties:
        entityId:
          type: string
          description: Entity ID
        entityType:
          description: Entity type
          $ref: '#/components/schemas/EntityType'
    ProjectSource:
      type: object
      description: Project source
      properties:
        entityId:
          type: string
          description: Entity ID
        entityType:
          description: Entity type
          $ref: '#/components/schemas/EntityType'
        title:
          type: string
          description: Project title
        createdAt:
          type: string
          format: date-time
          description: Project creation time
        updatedAt:
          type: string
          format: date-time
          description: Project update time
    Project:
      type: object
      description: Project
      required:
        - projectId
        - name
      properties:
        projectId:
          type: string
          description: Project ID
        name:
          type: string
          description: Project name
        description:
          type: string
          description: Project description
        coverUrl:
          type: string
          description: Project cover URL
        customInstructions:
          type: string
          description: Custom instructions for the project
        createdAt:
          type: string
          format: date-time
          description: Project creation time
        updatedAt:
          type: string
          format: date-time
          description: Project update time
    LabelClass:
      type: object
      description: Label class
      required:
        - labelClassId
        - name
        - displayName
        - createdAt
        - updatedAt
      properties:
        labelClassId:
          type: string
          description: Label class ID
          example: lc-g30e1b80b5g1itbemc0g5jj3
        name:
          type: string
          description: Label class name
          example: Related Dataset
        displayName:
          type: string
          description: Label class display name
          example: Label display name
        icon:
          description: Label icon
          $ref: '#/components/schemas/Icon'
        prompt:
          type: string
          description: Label creation instruction prompt
          example: Extract labels for the tech-related keywords
        createdAt:
          type: string
          format: date-time
          description: Label class creation time
        updatedAt:
          type: string
          format: date-time
          description: Label class update time
    LabelInstance:
      type: object
      description: Label instances related to entities
      required:
        - labelId
        - labelClassId
        - value
      properties:
        labelId:
          type: string
          description: Label instance ID
          example: lb-g30e1b80b5g1itbemc0g5jj3
        labelClassId:
          type: string
          description: Label class ID
          example: lc-g30e1b80b5g1itbemc0g5jj3
        labelClass:
          description: Label class
          $ref: '#/components/schemas/LabelClass'
        value:
          type: string
          description: Label value
          example: HotPotQA
    InputMode:
      type: string
      description: Data input mode
      enum:
        - text
        - textarea
        - number
        - select
        - multiSelect
        - radio
        - switch
    ConfigScope:
      type: array
      description: Config scope
      items:
        type: string
        enum: [runtime, template]
    SelectOption:
      type: object
      description: Select option
      required:
        - value
      properties:
        value:
          type: string
          description: Option value
        labelDict:
          type: object
          description: Option label (key is locale, value is label)
          additionalProperties:
            type: string
        disabled:
          type: boolean
          description: Whether this option is disabled
          default: false
    DynamicConfigItem:
      type: object
      description: Dynamic config item
      required:
        - key
        - inputMode
        - labelDict
        - descriptionDict
      properties:
        key:
          type: string
          description: Config key
        inputMode:
          description: Config input mode
          $ref: '#/components/schemas/InputMode'
        required:
          type: boolean
          description: Specifies whether this config is required
          default: false
        labelDict:
          type: object
          description: Config label (key is locale, value is label)
          additionalProperties:
            type: string
        descriptionDict:
          type: object
          description: Config description (key is locale, value is description)
          additionalProperties:
            type: string
        defaultValue:
          description: Default value
          oneOf:
            - type: number
            - type: string
            - type: boolean
            - type: array
              items:
                type: string
        options:
          type: array
          description: Config options
          items:
            $ref: '#/components/schemas/SelectOption'
        inputProps:
          type: object
          description: Additional input properties
          properties:
            min:
              type: number
              description: Minimum value for number input
            max:
              type: number
              description: Maximum value for number input
            step:
              type: number
              description: Step value for number input
            precision:
              type: number
              description: Decimal precision for number input
            passwordType:
              type: boolean
              description: Whether to display as password input
    DynamicConfigValue:
      type: object
      description: Dynamic config value
      required:
        - label
        - value
        - displayValue
      properties:
        label:
          type: string
          description: Config key label
        value:
          oneOf:
            - type: string
            - type: number
            - type: boolean
            - type: array
              items:
                type: string
            - type: object
              additionalProperties: true
          description: Config value
        displayValue:
          type: string
          description: Config display value
        configScope:
          description: The contexts in which the requirement applies
          $ref: '#/components/schemas/ConfigScope'
    SkillTemplateConfigDefinition:
      type: object
      description: Skill template config schema
      required:
        - items
      properties:
        items:
          type: array
          description: Config items
          items:
            $ref: '#/components/schemas/DynamicConfigItem'
    IconType:
      type: string
      description: Icon type
      enum:
        - emoji
        - image
    Icon:
      type: object
      description: Icon
      required:
        - type
        - value
      properties:
        type:
          description: Icon type
          $ref: '#/components/schemas/IconType'
        value:
          type: string
          description: Icon value
    Skill:
      type: object
      description: Skill
      required:
        - name
      properties:
        name:
          type: string
          description: Skill name
        description:
          type: string
          description: Skill description
        icon:
          description: Skill icon
          $ref: '#/components/schemas/Icon'
        configSchema:
          description: Skill config schema
          $ref: '#/components/schemas/SkillTemplateConfigDefinition'
        tplConfig:
          description: Skill template config
          $ref: '#/components/schemas/SkillTemplateConfig'
    SkillTriggerType:
      type: string
      description: Skill trigger type
      enum:
        - timer
        - simpleEvent
    SimpleEventName:
      type: string
      description: Simple event name
      enum:
        - onResourceReady
    SimpleEvent:
      type: object
      required:
        - name
        - displayName
      properties:
        name:
          description: Simple event name
          $ref: '#/components/schemas/SimpleEventName'
        displayName:
          type: object
          description: Simple event display name (key is locale, value is display name)
    TimerInterval:
      type: string
      description: Timer interval
      enum:
        - hour
        - day
        - week
        - month
        - year
    TimerTriggerConfig:
      type: object
      required:
        - datetime
      properties:
        datetime:
          type: string
          format: date-time
          description: Time to run
        repeatInterval:
          type: string
          description: Repeat interval
          $ref: '#/components/schemas/TimerInterval'
    SkillTrigger:
      type: object
      description: Skill triggers
      required:
        - skillId
        - displayName
        - triggerId
        - triggerType
        - enabled
        - createdAt
        - updatedAt
      properties:
        skillId:
          type: string
          description: Skill ID
          example: sk-g30e1b80b5g1itbemc0g5jj3
        displayName:
          type: string
          description: Trigger display name
          example: My trigger
        triggerId:
          type: string
          description: Trigger ID
          example: tr-g30e1b80b5g1itbemc0g5jj3
        triggerType:
          description: Trigger type
          $ref: '#/components/schemas/SkillTriggerType'
        simpleEventName:
          description: Simple event name (only required when trigger type is `simpleEvent`)
          $ref: '#/components/schemas/SimpleEventName'
        timerConfig:
          description: Timer config (only required when trigger type is `timer`)
          $ref: '#/components/schemas/TimerTriggerConfig'
        input:
          description: Skill input
          $ref: '#/components/schemas/SkillInput'
        context:
          description: Skill context
          $ref: '#/components/schemas/SkillContext'
        tplConfig:
          description: Skill template config
          $ref: '#/components/schemas/SkillTemplateConfig'
        enabled:
          type: boolean
          description: Trigger enabled
        createdAt:
          type: string
          format: date-time
          description: Trigger creation time
        updatedAt:
          type: string
          format: date-time
          description: Trigger update time
    SkillMeta:
      type: object
      description: Skill metadata
      required:
        - name
      properties:
        name:
          type: string
          description: Skill name
        icon:
          description: Skill icon
          $ref: '#/components/schemas/Icon'
    ActionMeta:
      type: object
      description: Action metadata
      required:
        - name
      properties:
        type:
          type: string
          description: Action type
          $ref: '#/components/schemas/ActionType'
        name:
          type: string
          description: Action name
        icon:
          description: Action icon
          $ref: '#/components/schemas/Icon'
    SkillRuntimeConfig:
      type: object
      description: Skill runtime config
      properties:
        disableLinkParsing:
          type: boolean
          description: Whether to disable link parsing for input query
        enabledKnowledgeBase:
          type: boolean
          description: Whether to enable knowledge base for input query
    SkillTemplateConfig:
      type: object
      description: Skill template config (key is config item key, value is config value)
      additionalProperties:
        description: Skill template config value
        $ref: '#/components/schemas/DynamicConfigValue'
    ActionConfig:
      type: object
      description: Action config (key is config item key, value is config value)
      additionalProperties:
        description: Skill template config value
        $ref: '#/components/schemas/DynamicConfigValue'
    SkillInstance:
      type: object
      description: Skill
      allOf:
        - $ref: '#/components/schemas/SkillMeta'
        - type: object
          required:
            - createdAt
            - updatedAt
            - invocationConfig
          properties:
            description:
              type: string
              description: Skill instance description
            promptHint:
              type: string
              description: Skill instance prompt hint
            tplConfig:
              description: Skill template config
              $ref: '#/components/schemas/SkillTemplateConfig'
            tplConfigSchema:
              description: Skill template config schema
              $ref: '#/components/schemas/SkillTemplateConfigDefinition'
            pinnedAt:
              type: string
              format: date-time
              description: Skill pinned time
            createdAt:
              type: string
              format: date-time
              description: Skill creation time
            updatedAt:
              type: string
              format: date-time
              description: Skill update time
    SourceMeta:
      type: object
      description: Source metadata
      properties:
        source:
          type: string
          description: Source URL
          deprecated: true
        title:
          type: string
          description: Source title
          deprecated: true
        publishedTime:
          type: string
          format: date-time
          description: Source publish timesss
        entityId:
          type: string
          description: Related entity ID
        entityType:
          type: string
          description: Related entity type
        originalLocale:
          type: string
          description: Original locale
        translatedDisplayLocale:
          type: string
          description: Translated display locale
        isTranslated:
          type: boolean
          description: Whether the source is translated
        originalQuery:
          type: string
          description: Original query
        translatedQuery:
          type: string
          description: Translated query
        sourceType:
          type: string
          description: Source type
          enum:
            - webSearch
            - library
    SourceSelection:
      type: object
      description: Source selection
      required:
        - content
        - type
      properties:
        xPath:
          type: string
          description: Selected xPath
          deprecated: true
        content:
          type: string
          description: Selected content
        type:
          type: string
          description: Selection type
          enum:
            - text
            - table
            - link
            - image
            - video
            - audio
    Source:
      type: object
      description: Source of the message
      required:
        - pageContent
      properties:
        url:
          type: string
          description: Source URL
        title:
          type: string
          description: Source title
        pageContent:
          type: string
          description: Source content
        score:
          type: number
          description: Relativity score
        metadata:
          type: object
          description: Source metadata
          $ref: '#/components/schemas/SourceMeta'
        selections:
          type: array
          description: Source selections
          items:
            $ref: '#/components/schemas/SourceSelection'
    SearchStep:
      type: object
      description: Search step
      properties:
        step:
          type: string
          description: Search step name
        duration:
          type: number
          description: Step duration in milliseconds
        result:
          type: object
          description: Step-specific result data
    ModelTier:
      type: string
      description: Model tier
      enum:
        - t1
        - t2
        - free
    TokenUsageItem:
      type: object
      description: Token usage item
      required:
        - modelName
        - modelProvider
        - inputTokens
        - outputTokens
      properties:
        modelName:
          type: string
          description: Model name
        modelProvider:
          type: string
          description: Model provider
        modelLabel:
          type: string
          description: Model label
        inputTokens:
          type: number
          description: Input tokens
        outputTokens:
          type: number
          description: Output tokens
        providerItemId:
          type: string
          description: Provider item ID
        tier:
          type: string
          description: Model tier
          deprecated: true
    ActionStatus:
      type: string
      description: Action status
      enum:
        - waiting
        - executing
        - finish
        - failed
    ArtifactType:
      type: string
      description: Artifact type
      enum:
        - document
        - codeArtifact
        - image
        - video
        - audio
    ArtifactStatus:
      type: string
      description: Artifact status
      enum:
        - waiting
        - generating
        - finish
        - failed
    Artifact:
      type: object
      description: Artifact
      required:
        - type
        - entityId
        - title
      properties:
        type:
          type: string
          description: Artifact type
          $ref: '#/components/schemas/ArtifactType'
        entityId:
          type: string
          description: Entity ID
        title:
          type: string
          description: Artifact title
        status:
          description: Artifact status
          $ref: '#/components/schemas/ArtifactStatus'
        content:
          type: string
          description: Artifact content
        metadata:
          type: object
          description: Artifact metadata
        createdAt:
          type: string
          format: date-time
          description: Artifact creation time
        updatedAt:
          type: string
          format: date-time
          description: Artifact update time
    ActionStepMeta:
      type: object
      description: Action step metadata
      required:
        - name
      properties:
        name:
          type: string
          description: Step name
    ActionLog:
      type: object
      description: Action log
      required:
        - key
      properties:
        key:
          type: string
          description: Log key
        titleArgs:
          type: object
          description: Log title arguments
        descriptionArgs:
          type: object
          description: Log description arguments
    ActionStep:
      type: object
      description: Action step
      required:
        - name
        - status
      properties:
        name:
          type: string
          description: Step name
        content:
          type: string
          description: Step content
        reasoningContent:
          type: string
          description: Step reasoning content
        artifacts:
          type: array
          description: Step artifacts
          items:
            $ref: '#/components/schemas/Artifact'
        structuredData:
          type: object
          description: Step structured data output
          example:
            sources: [Source]
            relatedQuestions: [string]
        logs:
          type: array
          description: Action step logs
          items:
            $ref: '#/components/schemas/ActionLog'
        tokenUsage:
          type: array
          description: Token usage
          items:
            $ref: '#/components/schemas/TokenUsageItem'
        toolCalls:
          type: array
          description: Tool calls in this step
          items:
            $ref: '#/components/schemas/ToolCallResult'
    CodeArtifactType:
      type: string
      description: Code artifact type
      enum:
        - application/refly.artifacts.react
        - image/svg+xml
        - application/refly.artifacts.mermaid
        - text/markdown
        - application/refly.artifacts.code
        - text/html
        - application/refly.artifacts.mindmap
    CodeArtifact:
      type: object
      description: Code artifact
      required:
        - type
        - artifactId
        - title
      properties:
        type:
          type: string
          description: Artifact type
          $ref: '#/components/schemas/CodeArtifactType'
        artifactId:
          type: string
          description: Artifact ID
        title:
          type: string
          description: Artifact title
        content:
          type: string
          description: Code artifact content
        language:
          type: string
          description: Code artifact language
        resultId:
          type: string
          description: Action result ID
        resultVersion:
          type: number
          description: Action result version
        canvasId:
          type: string
          description: Canvas ID to bind with
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    ActionResult:
      type: object
      description: Action result
      required:
        - resultId
      properties:
        resultId:
          type: string
          readOnly: true
          description: Action result ID
          example: ar-g30e1b80b5g1itbemc0g5jj3
        version:
          type: number
          description: Action result version
        title:
          type: string
          description: Action result title
        input:
          description: Action input
          $ref: '#/components/schemas/SkillInput'
        tier:
          description: Model tier
          $ref: '#/components/schemas/ModelTier'
        status:
          type: string
          description: Step status
          $ref: '#/components/schemas/ActionStatus'
        type:
          description: Action type
          $ref: '#/components/schemas/ActionType'
        modelInfo:
          description: Selected model
          $ref: '#/components/schemas/ModelInfo'
        targetType:
          description: Action target type
          $ref: '#/components/schemas/EntityType'
        targetId:
          type: string
          description: Action target ID
        actionMeta:
          type: object
          description: Action metadata
          $ref: '#/components/schemas/ActionMeta'
        context:
          type: object
          description: Action context
          $ref: '#/components/schemas/SkillContext'
        tplConfig:
          type: object
          description: Action template config
          $ref: '#/components/schemas/SkillTemplateConfig'
          deprecated: true
        runtimeConfig:
          type: object
          description: Action runtime config
          $ref: '#/components/schemas/SkillRuntimeConfig'
          deprecated: true
        history:
          type: array
          description: Action result history
          items:
            $ref: '#/components/schemas/ActionResult'
        steps:
          type: array
          description: Action steps
          items:
            $ref: '#/components/schemas/ActionStep'
        errors:
          type: array
          description: Errors
          items:
            type: string
        toolsets:
          type: array
          description: Action toolsets
          items:
            $ref: '#/components/schemas/GenericToolset'
        toolCalls:
          type: array
          description: Tool calls during action execution
          items:
            $ref: '#/components/schemas/ToolCallResult'
        outputUrl:
          type: string
          format: uri
          description: Media generation output URL (for media type actions)
          example: https://example.com/generated/image_123.png
        storageKey:
          type: string
          description: Media generation output storage key
        pilotStepId:
          type: string
          description: Pilot step ID
        pilotSessionId:
          type: string
          description: Pilot session ID
        workflowExecutionId:
          type: string
          description: Workflow execution ID for workflow context
        workflowNodeExecutionId:
          type: string
          description: Workflow node execution ID for workflow context
        createdAt:
          type: string
          format: date-time
          description: Message creation time
        updatedAt:
          type: string
          format: date-time
          description: Message update time
    IndexStatus:
      type: string
      description: Resource index status
      enum:
        - init
        - wait_parse
        - wait_index
        - finish
        - parse_failed
        - index_failed
    SubscriptionInterval:
      type: string
      description: Payment recurring interval
      enum:
        - monthly
        - yearly
    SubscriptionPlanType:
      type: string
      description: Subscription plan type
      enum:
        - free
        - starter
        - maker
        - enterprise
    SubscriptionStatus:
      type: string
      description: Subscription status
      enum:
        - active
        - canceled
        - incomplete
        - incomplete_expired
        - past_due
        - paused
        - trialing
        - unpaid
    Subscription:
      type: object
      required:
        - subscriptionId
        - planType
        - status
      properties:
        subscriptionId:
          type: string
          description: Subscription ID
        lookupKey:
          type: string
          description: Subscription lookup key
        planType:
          type: string
          description: Subscription plan type
          $ref: '#/components/schemas/SubscriptionPlanType'
        interval:
          description: Payment recurring interval
          $ref: '#/components/schemas/SubscriptionInterval'
        status:
          type: string
          description: Subscription status
          $ref: '#/components/schemas/SubscriptionStatus'
        isTrial:
          type: boolean
          description: Whether the subscription is a trial
        cancelAt:
          type: string
          format: date-time
          description: Subscription cancel time
    TokenUsageMeter:
      type: object
      required:
        - meterId
        - uid
        - startAt
        - t1TokenQuota
        - t1TokenUsed
        - t2TokenQuota
        - t2TokenUsed
      properties:
        meterId:
          type: string
          description: Token usage meter ID
        uid:
          type: string
          description: User ID
        subscriptionId:
          type: string
          description: Subscription ID
        startAt:
          type: string
          format: date-time
          description: Token usage meter start time
        endAt:
          type: string
          format: date-time
          description: Token usage meter end time
        t1CountQuota:
          type: number
          description: Request count quota (T1)
          example: 1000000
        t1CountUsed:
          type: number
          description: Request count used (T1)
          example: 100000
        t1TokenQuota:
          type: number
          description: Token quota (T1)
          example: 1000000
          deprecated: true
        t1TokenUsed:
          type: number
          description: Token used (T1)
          example: 100000
          deprecated: true
        t2CountQuota:
          type: number
          description: Request count quota (T2)
          example: 1000000
        t2CountUsed:
          type: number
          description: Request count used (T2)
          example: 100000
        t2TokenQuota:
          type: number
          description: Token quota (T2)
          example: 1000000
          deprecated: true
        t2TokenUsed:
          type: number
          description: Token used (T2)
          example: 100000
          deprecated: true
    StorageUsageMeter:
      type: object
      required:
        - meterId
        - uid
        - objectStorageQuota
        - resourceSize
        - canvasSize
        - fileSize
        - vectorStorageQuota
        - vectorStorageUsed
      properties:
        meterId:
          type: string
          description: Storage usage meter ID
        uid:
          type: string
          description: User ID
        subscriptionId:
          type: string
          description: Subscription ID
        fileCountUsed:
          type: number
          description: File count used
          example: 100
        fileCountQuota:
          type: number
          description: File count quota
          example: 1000
        objectStorageQuota:
          type: string
          description: Object storage quota (in bytes), including resource, canvas and static files
          example: '104857600'
          deprecated: true
        resourceSize:
          type: string
          description: Resource storage size in use (in bytes)
          example: '1048576'
          deprecated: true
        canvasSize:
          type: string
          description: Canvas storage size in use (in bytes)
          example: '1048576'
          deprecated: true
        fileSize:
          type: string
          description: Static file storage size in use (in bytes)
          example: '1048576'
          deprecated: true
        vectorStorageQuota:
          type: string
          description: Vector storage quota (in bytes)
          example: '1048576'
          deprecated: true
        vectorStorageUsed:
          type: string
          description: Vector storage size used (in bytes)
          example: '1048576'
          deprecated: true
    FileParsingMeter:
      type: object
      required:
        - pagesParsed
        - pagesLimit
      properties:
        pagesParsed:
          type: number
          description: File pages parsed
        pagesLimit:
          type: number
          description: File pages limit
        fileUploadLimit:
          type: number
          description: File upload limit (in MB)
    OperationMode:
      type: string
      description: Operation mode
      enum:
        - mouse
        - touchpad
    ProviderConfig:
      type: object
      description: Provider config
      properties:
        providerId:
          type: string
          description: Provider ID
        providerKey:
          type: string
          description: Provider key
    ModelScene:
      type: string
      description: Model usage scene
      enum:
        - chat
        - agent
        - queryAnalysis
        - titleGeneration
        - image
        - video
        - audio
    DefaultModelConfig:
      type: object
      description: Default model config
      properties:
        chat:
          description: Default chat model to use
          $ref: '#/components/schemas/ProviderItem'
        agent:
          description: Default agent model to use
          $ref: '#/components/schemas/ProviderItem'
        queryAnalysis:
          description: Query analysis and context processing model
          $ref: '#/components/schemas/ProviderItem'
        titleGeneration:
          description: Title generation model for canvas and documents
          $ref: '#/components/schemas/ProviderItem'
        image:
          description: Default image generation model
          $ref: '#/components/schemas/ProviderItem'
        video:
          description: Default video generation model
          $ref: '#/components/schemas/ProviderItem'
        audio:
          description: Default audio generation model
          $ref: '#/components/schemas/ProviderItem'
    ProviderMode:
      type: string
      description: Provider mode
      enum:
        - global
        - custom
    UserPreferences:
      type: object
      description: User preferences
      properties:
        operationMode:
          description: Operation mode
          $ref: '#/components/schemas/OperationMode'
        providerMode:
          description: Provider mode
          $ref: '#/components/schemas/ProviderMode'
        disableHoverCard:
          type: boolean
          description: Whether to disable hover tutorial
          default: false
        webSearch:
          description: Web search config
          $ref: '#/components/schemas/ProviderConfig'
        urlParsing:
          description: URL parsing config
          $ref: '#/components/schemas/ProviderConfig'
        pdfParsing:
          description: PDF parsing config
          $ref: '#/components/schemas/ProviderConfig'
        defaultModel:
          description: Default model config
          $ref: '#/components/schemas/DefaultModelConfig'
    OnboardingStatus:
      type: string
      description: Onboarding status
      enum:
        - not_started
        - skipped
        - completed
    OnboardingConfig:
      type: object
      properties:
        settings:
          description: Settings onboarding status
          $ref: '#/components/schemas/OnboardingStatus'
        tour:
          description: Tour onboarding status
          $ref: '#/components/schemas/OnboardingStatus'
    UserSettings:
      type: object
      required:
        - uid
        - avatar
        - name
        - email
      properties:
        uid:
          type: string
          description: User ID
          example: u-g30e1b80b5g1itbemc0g5jj3
        avatar:
          type: string
          description: User avatar
          example: https://static.refly.ai/avatar/1.jpg
        name:
          type: string
          description: Username (can only contains letters, numbers, and underscores)
          example: john_doe
        nickname:
          type: string
          description: User nickname
          example: John Doe
        email:
          type: string
          description: User email
          example: 6XJpZ@example.com
        emailVerified:
          type: boolean
          description: Whether email is verified
          default: false
        uiLocale:
          type: string
          description: User UI locale
          example: en
        outputLocale:
          type: string
          description: User output locale
          example: en
        customerId:
          type: string
          description: Stripe customer ID
        subscription:
          description: User subscription
          $ref: '#/components/schemas/Subscription'
        hasBetaAccess:
          type: boolean
          description: Whether the user has beta access
          default: false
        preferences:
          description: User preferences
          $ref: '#/components/schemas/UserPreferences'
        onboarding:
          description: Onboarding config
          $ref: '#/components/schemas/OnboardingConfig'
    AuthProvider:
      type: string
      description: Auth provider
      enum:
        - email
        - google
        - github
    AuthConfigItem:
      type: object
      required:
        - provider
      properties:
        provider:
          description: Auth provider
          $ref: '#/components/schemas/AuthProvider'
    AuthConfigResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Auth providers
              items:
                $ref: '#/components/schemas/AuthConfigItem'
    EmailSignupRequest:
      type: object
      description: Email signup request
      required:
        - email
        - password
      properties:
        email:
          type: string
          description: Email
        password:
          type: string
          description: Password
    EmailSignupData:
      type: object
      properties:
        sessionId:
          type: string
          description: Verification session ID
        skipVerification:
          type: boolean
          description: Whether email verification is skipped
    EmailSignupResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/EmailSignupData'
    VerificationPurpose:
      type: string
      description: Verification purpose
      enum:
        - signup
        - resetPassword
    CreateVerificationRequest:
      type: object
      description: Create verification session request
      required:
        - email
        - purpose
      properties:
        email:
          type: string
          description: Email
        purpose:
          type: string
          description: Verification purpose
          $ref: '#/components/schemas/VerificationPurpose'
        password:
          type: string
          description: Password
    CreateVerificationData:
      type: object
      properties:
        sessionId:
          type: string
          description: Verification session ID
    CreateVerificationResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/CreateVerificationData'
    ResendVerificationRequest:
      type: object
      description: Resend verification request
      required:
        - sessionId
      properties:
        sessionId:
          type: string
          description: Verification session ID
    CheckVerificationRequest:
      type: object
      description: Check verification code request
      required:
        - sessionId
        - code
      properties:
        sessionId:
          type: string
          description: Verification session ID
        code:
          type: string
          description: Verification code
    EmailLoginRequest:
      type: object
      description: Email login request
      required:
        - email
        - password
      properties:
        email:
          type: string
          description: Email
        password:
          type: string
          description: Password
    EmailLoginData:
      type: object
      properties:
        accessToken:
          type: string
          description: Access token
    EmailLoginResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/EmailLoginData'
    GetUserSettingsResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/UserSettings'
    CollabTokenData:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          description: Collab token
        expiresAt:
          type: number
          description: Token expiration time (in unix milliseconds)
    GetCollabTokenResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/CollabTokenData'
    BaseResponse:
      type: object
      required:
        - success
      properties:
        success:
          type: boolean
          description: Whether the operation was successful
          example: true
        errCode:
          type: string
          description: Error code
        errMsg:
          type: string
          description: Error message
          example: Operation failed
        traceId:
          type: string
          description: Trace ID
        stack:
          type: string
          description: Error stack (only returned in development environment)
    ListCanvasResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Canvas list
              items:
                $ref: '#/components/schemas/Canvas'
    GetCanvasDetailResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/Canvas'
    CanvasHistoryVersion:
      type: object
      required:
        - version
        - hash
        - timestamp
      properties:
        version:
          type: string
          description: Canvas version
        hash:
          type: string
          description: Canvas hash
        timestamp:
          type: number
          description: Canvas timestamp (in unix milliseconds)
    CanvasData:
      type: object
      description: Canvas data
      required:
        - nodes
        - edges
      properties:
        nodes:
          type: array
          description: Canvas nodes
          items:
            $ref: '#/components/schemas/CanvasNode'
        edges:
          type: array
          description: Canvas edges
          items:
            $ref: '#/components/schemas/CanvasEdge'
    CanvasState:
      type: object
      description: Canvas state
      allOf:
        - $ref: '#/components/schemas/CanvasData'
        - type: object
          properties:
            version:
              type: string
              description: Canvas version
            hash:
              type: string
              description: Canvas state hash (sha256), calculated from nodes and edges
            transactions:
              type: array
              description: Canvas transaction list
              items:
                $ref: '#/components/schemas/CanvasTransaction'
            history:
              type: array
              description: Canvas history versions
              items:
                $ref: '#/components/schemas/CanvasHistoryVersion'
            createdAt:
              type: number
              description: Canvas creation timestamp (in unix milliseconds)
            updatedAt:
              type: number
              description: Canvas last updated timestamp (in unix milliseconds)
    RawCanvasData:
      type: object
      description: Raw canvas data
      allOf:
        - $ref: '#/components/schemas/CanvasData'
        - type: object
          properties:
            canvasId:
              type: string
              description: Canvas ID
            title:
              type: string
              description: Canvas title
            owner:
              type: object
              description: Canvas owner
              $ref: '#/components/schemas/ShareUser'
            minimapUrl:
              type: string
              description: Minimap URL
            variables:
              type: array
              description: Workflow variables
              items:
                $ref: '#/components/schemas/WorkflowVariable'
    GetCanvasDataResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/RawCanvasData'
    SharedCanvasData:
      allOf:
        - $ref: '#/components/schemas/RawCanvasData'
        - type: object
          properties:
            resources:
              type: array
              description: Resources in the canvas
              items:
                $ref: '#/components/schemas/Resource'
    ExportCanvasResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                downloadUrl:
                  type: string
                  description: Download URL for the canvas data
    ImportCanvasRequest:
      type: object
      required:
        - file
      properties:
        file:
          type: string
          format: binary
          description: File to import
        canvasId:
          type: string
          description: Canvas ID to specify
    DuplicateCanvasRequest:
      type: object
      required:
        - canvasId
      properties:
        canvasId:
          type: string
          description: Canvas ID to duplicate
        title:
          type: string
          description: Custom canvas title
        projectId:
          type: string
          description: Project ID to bind with
        duplicateEntities:
          type: boolean
          description: Whether to duplicate entities within the canvas
    DuplicateDocumentRequest:
      type: object
      required:
        - docId
      properties:
        docId:
          type: string
          description: Document ID to duplicate
        title:
          type: string
          description: Custom document title for the duplicate
        canvasId:
          type: string
          description: Target canvas ID
    DuplicateResourceRequest:
      type: object
      required:
        - resourceId
      properties:
        resourceId:
          type: string
          description: Resource ID to duplicate
        title:
          type: string
          description: Custom resource title for the duplicate
        canvasId:
          type: string
          description: Target canvas ID
    UpsertCanvasRequest:
      type: object
      properties:
        title:
          type: string
          description: Canvas title
          example: My Canvas
        canvasId:
          type: string
          description: Canvas ID (only used for update)
          example: c-g30e1b80b5g1itbemc0g5jj3
        projectId:
          type: string
          description: Project ID to bind with
        minimapStorageKey:
          type: string
          description: Minimap storage key
        variables:
          type: array
          description: Workflow variables
          items:
            $ref: '#/components/schemas/WorkflowVariable'
        visibility:
          type: boolean
          description: Whether this canvas is visible in lists
          default: true
    UpsertCanvasResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/Canvas'
    DeleteCanvasRequest:
      type: object
      required:
        - canvasId
      properties:
        canvasId:
          type: string
          description: Canvas ID to delete
          example: c-g30e1b80b5g1itbemc0g5jj3
        deleteAllFiles:
          type: boolean
          description: Whether to delete all files in the canvas
          default: false
    AutoNameCanvasRequest:
      type: object
      required:
        - canvasId
      properties:
        canvasId:
          type: string
          description: Canvas ID
        directUpdate:
          type: boolean
          description: Whether to directly update the canvas title
          default: false
    AutoNameCanvasResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              description: Auto name canvas result
              properties:
                title:
                  type: string
                  description: New canvas title
    GetCanvasStateResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/CanvasState'
    SetCanvasStateRequest:
      type: object
      required:
        - canvasId
        - state
      properties:
        canvasId:
          type: string
          description: Canvas ID
        state:
          type: object
          description: Canvas state to set
          $ref: '#/components/schemas/CanvasState'
    GetCanvasTransactionsResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Canvas diff list
              items:
                $ref: '#/components/schemas/CanvasTransaction'
    DiffType:
      type: string
      description: Diff type
      enum:
        - add
        - update
        - delete
    NodeDiff:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
          description: Node ID
        type:
          type: string
          description: Node diff type
          $ref: '#/components/schemas/DiffType'
        from:
          type: object
          description: Node diff from (only the fields that are different will be included)
          additionalProperties: true
        to:
          type: object
          description: Node diff to (only the fields that are different will be included)
          additionalProperties: true
    EdgeDiff:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
          description: Edge ID
        type:
          type: string
          description: Edge diff type
          $ref: '#/components/schemas/DiffType'
        from:
          type: object
          description: Edge diff from
          $ref: '#/components/schemas/CanvasEdge'
        to:
          type: object
          description: Edge diff to
          $ref: '#/components/schemas/CanvasEdge'
    CanvasTransactionSource:
      type: object
      description: Canvas transaction source
      required:
        - type
      properties:
        type:
          type: string
          description: Source type
          enum:
            - user
            - system
        uid:
          type: string
          description: Source user ID
    CanvasTransaction:
      type: object
      required:
        - txId
        - nodeDiffs
        - edgeDiffs
        - createdAt
      properties:
        txId:
          type: string
          description: Transaction ID
        nodeDiffs:
          type: array
          description: Node diffs
          items:
            $ref: '#/components/schemas/NodeDiff'
        edgeDiffs:
          type: array
          description: Edge diffs
          items:
            $ref: '#/components/schemas/EdgeDiff'
        revoked:
          type: boolean
          description: Whether the transaction is revoked
        source:
          type: object
          description: Transaction source
          $ref: '#/components/schemas/CanvasTransactionSource'
        deleted:
          type: boolean
          description: Whether the transaction is deleted
        createdAt:
          type: number
          description: Transaction creation timestamp (in unix milliseconds)
        syncedAt:
          type: number
          description: Transaction synchronization timestamp (in unix milliseconds)
    SyncCanvasStateRequest:
      type: object
      required:
        - canvasId
        - transactions
      properties:
        canvasId:
          type: string
          description: Canvas ID
        version:
          type: string
          description: Canvas state version
        transactions:
          type: array
          description: Transaction list
          items:
            $ref: '#/components/schemas/CanvasTransaction'
    SyncCanvasStateResult:
      type: object
      required:
        - transactions
      properties:
        transactions:
          type: array
          description: Transaction list
          items:
            $ref: '#/components/schemas/CanvasTransaction'
    SyncCanvasStateResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              description: Apply canvas state result
              $ref: '#/components/schemas/SyncCanvasStateResult'
    CreateCanvasVersionRequest:
      type: object
      required:
        - canvasId
        - state
      properties:
        canvasId:
          type: string
          description: Canvas ID
        state:
          type: object
          description: Canvas state
          $ref: '#/components/schemas/CanvasState'
    VersionConflict:
      type: object
      required:
        - localState
        - remoteState
      properties:
        localState:
          type: object
          description: Local canvas state
          $ref: '#/components/schemas/CanvasState'
        remoteState:
          type: object
          description: Server canvas state
          $ref: '#/components/schemas/CanvasState'
    CreateCanvasVersionResult:
      type: object
      required:
        - canvasId
      properties:
        canvasId:
          type: string
          description: Canvas ID
        conflict:
          type: object
          description: Version conflict (when there is a conflict)
          $ref: '#/components/schemas/VersionConflict'
        newState:
          type: object
          description: New canvas state (when there is no conflict)
          $ref: '#/components/schemas/CanvasState'
    CreateCanvasVersionResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              description: Create canvas version result
              $ref: '#/components/schemas/CreateCanvasVersionResult'
    ListCanvasTemplateResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Canvas template list
              items:
                $ref: '#/components/schemas/CanvasTemplate'
    CreateCanvasTemplateRequest:
      type: object
      required:
        - canvasId
        - title
        - description
        - language
      properties:
        canvasId:
          type: string
          description: Canvas ID
        title:
          type: string
          description: Canvas template title
        description:
          type: string
          description: Canvas template description
        categoryId:
          type: string
          description: Canvas template category ID
        language:
          type: string
          description: Canvas template language code
        coverStorageKey:
          type: string
          description: Cover storage key
    UpdateCanvasTemplateRequest:
      type: object
      required:
        - templateId
      properties:
        templateId:
          type: string
          description: Canvas template ID
        title:
          type: string
          description: Canvas template title
        description:
          type: string
          description: Canvas template description
        categoryId:
          type: string
          description: Canvas template category ID
        language:
          type: string
          description: Canvas template language code
    UpsertCanvasTemplateResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              description: Canvas template
              $ref: '#/components/schemas/CanvasTemplate'
    ListCanvasTemplateCategoryResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Canvas template category list
              items:
                $ref: '#/components/schemas/CanvasTemplateCategory'
    UpsertResourceRequest:
      type: object
      required:
        - title
        - resourceType
      properties:
        title:
          type: string
          description: Resource title
          example: My Resource
        resourceType:
          description: Resource type
          $ref: '#/components/schemas/ResourceType'
        resourceId:
          type: string
          description: Resource ID (only used for update)
          example: r-g30e1b80b5g1itbemc0g5jj3
        projectId:
          type: string
          description: Project ID to bind with
        canvasId:
          type: string
          description: Canvas ID to bind with
        data:
          description: Resource metadata
          $ref: '#/components/schemas/ResourceMeta'
        storageKey:
          type: string
          description: Storage key
        content:
          type: string
          description: Resource content (this will be ignored if storageKey was set)
    UpsertResourceResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/Resource'
    BatchCreateResourceResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Resource list
              items:
                $ref: '#/components/schemas/Resource'
    ReindexResourceRequest:
      type: object
      required:
        - resourceIds
      properties:
        resourceIds:
          type: array
          description: Resource ID list
          items:
            type: string
    ReindexResourceResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Resource list
              items:
                $ref: '#/components/schemas/Resource'
    DeleteResourceRequest:
      type: object
      required:
        - resourceId
      properties:
        resourceId:
          type: string
          description: Resource ID to delete
          example: r-g30e1b80b5g1itbemc0g5jj3
    ListResourceResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Resource list
              items:
                $ref: '#/components/schemas/Resource'
    GetResourceDetailResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              description: Resource data
              $ref: '#/components/schemas/Resource'
    ListDocumentResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Canvas list
              items:
                $ref: '#/components/schemas/Document'
    GetDocumentDetailResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              description: Document data
              $ref: '#/components/schemas/Document'
    UpsertDocumentRequest:
      type: object
      properties:
        title:
          type: string
          description: Canvas title
          example: My Canvas
        docId:
          type: string
          description: Document ID (only used for update)
          example: d-g30e1b80b5g1itbemc0g5jj3
        projectId:
          type: string
          description: Project ID to bind with
        canvasId:
          type: string
          description: Canvas ID to bind with
        readOnly:
          type: boolean
          description: Whether this document is read-only
          default: false
        initialContent:
          type: string
          description: Document initial content
        resultId:
          type: string
          description: Action result ID to bind with
    UpsertDocumentResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/Document'
    DeleteDocumentRequest:
      type: object
      required:
        - docId
      properties:
        docId:
          type: string
          description: Document ID to delete
          example: d-g30e1b80b5g1itbemc0g5jj3
    GetActionResultResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/ActionResult'
    AbortActionRequest:
      type: object
      required:
        - resultId
      properties:
        resultId:
          type: string
          description: Action result ID
        version:
          type: integer
          description: Action result version
    ListProjectResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Project list
              items:
                $ref: '#/components/schemas/Project'
    GetProjectDetailResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/Project'
    UpsertProjectRequest:
      type: object
      properties:
        projectId:
          type: string
          description: Project ID (only used for update)
        name:
          type: string
          description: Project name
        description:
          type: string
          description: Project description
        coverStorageKey:
          type: string
          description: Project cover storage key
        customInstructions:
          type: string
          description: Custom instructions
    UpsertProjectResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/Project'
    UpdateProjectItemsRequest:
      type: object
      properties:
        projectId:
          type: string
          description: Project ID
        operation:
          type: string
          description: Operation type
          enum:
            - add
            - remove
        items:
          type: array
          description: Item list
          items:
            $ref: '#/components/schemas/Entity'
    DeleteProjectRequest:
      type: object
      required:
        - projectId
      properties:
        projectId:
          type: string
          description: Project ID to delete
          example: p-g30e1b80b5g1itbemc0g5jj3
    DeleteProjectItemsRequest:
      type: object
      required:
        - projectId
        - items
      properties:
        projectId:
          type: string
          description: Project ID
        items:
          type: array
          description: Item list
          items:
            $ref: '#/components/schemas/Entity'
    SkillEventType:
      type: string
      description: Skill event type
      enum:
        - start
        - end
        - stream
        - log
        - artifact
        - structured_data
        - token_usage
        - create_node
        - tool_call_start
        - tool_call_stream
        - error
    SkillEvent:
      type: object
      required:
        - event
        - resultId
      properties:
        event:
          description: Event type
          $ref: '#/components/schemas/SkillEventType'
        skillMeta:
          description: Skill metadata
          $ref: '#/components/schemas/SkillMeta'
        step:
          description: Action step metadata
          $ref: '#/components/schemas/ActionStepMeta'
        resultId:
          type: string
          description: Result ID
        version:
          type: number
          description: Result version
        content:
          type: string
          description: Event content. Only present when `event` is `stream`
        reasoningContent:
          type: string
          description: Reasoning content. Only present when `event` is `stream`
        tokenUsage:
          description: Token usage data. Only present when `event` is `token_usage`.
          $ref: '#/components/schemas/TokenUsageItem'
        log:
          description: Log data. Only present when `event` is `log`.
          $ref: '#/components/schemas/ActionLog'
        structuredData:
          type: object
          description: Structured data. Only present when `event` is `structured_data`.
        artifact:
          description: Artifact data. Only present when `event` is `artifact`.
          $ref: '#/components/schemas/Artifact'
        node:
          description: Canvas node data. Only present when `event` is `create_node`.
          $ref: '#/components/schemas/CanvasNode'
        error:
          description: Error data. Only present when `event` is `error`.
          $ref: '#/components/schemas/BaseResponse'
        originError:
          type: string
          description: Original error message. Only present when `event` is `error`.
        toolCallResult:
          description: Tool call result data.
          $ref: '#/components/schemas/ToolCallResult'
    ToolCallResult:
      type: object
      required:
        - callId
        - status
        - createdAt
        - updatedAt
      properties:
        callId:
          type: string
          description: Tool call ID (run_id from LangChain)
        uid:
          type: string
          description: User ID
        toolsetId:
          type: string
          description: Toolset ID (toolsetKey)
        toolName:
          type: string
          description: Tool name
        stepName:
          type: string
          description: Step name (the action step in which this tool was called)
        input:
          # input can be structured object or raw string; keep it flexible
          oneOf:
            - type: object
            - type: string
          description: Tool input arguments
        output:
          # output can be structured object or raw string
          oneOf:
            - type: object
            - type: string
          description: Tool output result
        error:
          type: string
          description: Error message if tool execution failed
        status:
          type: string
          description: Tool call status
          enum:
            - executing
            - completed
            - failed
        createdAt:
          type: number
          description: Tool call start timestamp (milliseconds)
        updatedAt:
          type: number
          description: Tool call last update timestamp (milliseconds)
        deletedAt:
          type: number
          description: Tool call deletion timestamp (milliseconds)
    ShareRecord:
      type: object
      required:
        - shareId
        - entityType
        - entityId
      properties:
        shareId:
          type: string
          description: Share ID
        title:
          type: string
          description: Share title
        entityType:
          $ref: '#/components/schemas/EntityType'
          description: Entity type
        entityId:
          type: string
          description: Entity ID
        allowDuplication:
          type: boolean
          description: Whether to allow duplication of the shared entity
        parentShareId:
          type: string
          description: Parent share ID
        templateId:
          type: string
          description: Canvas template ID
        createdAt:
          type: string
          description: Create timestamp
        updatedAt:
          type: string
          description: Update timestamp
    UpsertCodeArtifactRequest:
      type: object
      properties:
        artifactId:
          type: string
          description: Code artifact ID (not needed for creation)
        title:
          type: string
          description: Code artifact title
        type:
          type: string
          description: Code artifact type
        content:
          type: string
          description: Code artifact content
        language:
          type: string
          description: Code artifact language
        resultId:
          type: string
          description: Action result ID
        resultVersion:
          type: number
          description: Action result version
        canvasId:
          type: string
          description: Canvas ID to bind with
        previewStorageKey:
          type: string
          description: Code artifact preview storage key
        createIfNotExists:
          type: boolean
          description: Whether to create the code artifact if it does not exist
          default: false
    UpsertCodeArtifactResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/CodeArtifact'
    ListCodeArtifactResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Code artifact list
              items:
                $ref: '#/components/schemas/CodeArtifact'
    GetCodeArtifactDetailResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/CodeArtifact'
    DuplicateCodeArtifactRequest:
      type: object
      required:
        - artifactId
      properties:
        artifactId:
          type: string
          description: Code artifact ID to duplicate
        canvasId:
          type: string
          description: Target canvas ID
    CreateShareRequest:
      type: object
      required:
        - entityType
        - entityId
      properties:
        entityType:
          $ref: '#/components/schemas/EntityType'
          description: Entity type
        entityId:
          type: string
          description: Entity ID
        title:
          type: string
          description: Share title
        allowDuplication:
          type: boolean
          description: Whether to allow duplication of the shared entity
          default: false
        parentShareId:
          type: string
          description: Parent share ID
        shareData:
          type: string
          description: Raw share data (JSON string)
        shareDataStorageKey:
          type: string
          description: Share data storage key
        coverStorageKey:
          type: string
          description: Cover storage key
    CreateShareResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/ShareRecord'
              description: Share created
    ListShareResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Share record list
              items:
                $ref: '#/components/schemas/ShareRecord'
    DeleteShareRequest:
      type: object
      required:
        - shareId
      properties:
        shareId:
          type: string
          description: Share ID
    DuplicateShareRequest:
      type: object
      required:
        - shareId
      properties:
        shareId:
          type: string
          description: Share ID
        projectId:
          type: string
          description: Project ID to duplicate the share to
        canvasId:
          type: string
          description: Target canvas ID
        title:
          type: string
          description: Custom title for the duplicated entity
    DuplicateShareResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              description: Duplicated entity
              $ref: '#/components/schemas/Entity'
    ListLabelClassesResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Label class list
              items:
                $ref: '#/components/schemas/LabelClass'
    CreateLabelClassRequest:
      type: object
      required:
        - name
        - displayName
        - prompt
      properties:
        name:
          type: string
          description: Label class name
          example: my_class
        displayName:
          type: string
          description: Label display name
          example: My Class
        icon:
          description: Label icon
          $ref: '#/components/schemas/Icon'
        prompt:
          type: string
          description: Label creation instruction prompt
          example: Extract labels for the tech-related keywords
    UpdateLabelClassRequest:
      type: object
      required:
        - labelClassId
      properties:
        labelClassId:
          type: string
          description: Label class ID
        name:
          type: string
          description: Label class name
          example: My Class
        displayName:
          type: string
          description: Label display name
          example: My Class
        icon:
          description: Label icon
          $ref: '#/components/schemas/Icon'
        prompt:
          type: string
          description: Label creation instruction prompt
          example: Extract labels for the tech-related keywords
    UpsertLabelClassResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              description: Label class upserted
              $ref: '#/components/schemas/LabelClass'
    DeleteLabelClassRequest:
      type: object
      required:
        - labelClassId
      properties:
        labelClassId:
          type: string
          description: Label class ID to delete
          example: lc-g30e1b80b5g1itbemc0g5jj3
    ListLabelInstancesResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Label list
              items:
                $ref: '#/components/schemas/LabelInstance'
    CreateLabelInstanceRequest:
      type: object
      required:
        - labelClassId
        - valueList
        - entityType
        - entityId
      properties:
        labelClassId:
          type: string
          description: Label class ID
          example: lc-g30e1b80b5g1itbemc0g5jj3
        valueList:
          type: array
          description: Label value list
          items:
            type: string
            example: label-1
        entityType:
          description: Label entity type
          $ref: '#/components/schemas/EntityType'
        entityId:
          description: Label entity ID
          type: string
    UpdateLabelInstanceRequest:
      type: object
      properties:
        labelId:
          type: string
          description: Label ID to update
        value:
          type: string
          description: Updated label value
    UpsertLabelInstanceResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Label instance upserted
              items:
                $ref: '#/components/schemas/LabelInstance'
    DeleteLabelInstanceRequest:
      type: object
      required:
        - labelId
      properties:
        labelId:
          type: string
          description: Label ID to delete
          example: lb-g30e1b80b5g1itbemc0g5jj3
    Action:
      type: object
      required:
        - actionType
        - actionName
      properties:
        actionType:
          type: string
          description: Action type
          $ref: '#/components/schemas/ActionType'
        actionName:
          type: string
          description: Action name
        icon:
          description: Action icon
          $ref: '#/components/schemas/Icon'
    ListActionResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Action list
              items:
                $ref: '#/components/schemas/Action'
    ListSkillResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Skill list
              items:
                $ref: '#/components/schemas/Skill'
    ListSkillInstanceResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Skill list
              items:
                $ref: '#/components/schemas/SkillInstance'
    SkillInstanceCreateParam:
      type: object
      required:
        - displayName
      properties:
        tplName:
          type: string
          description: Skill template name
          example: online-search
        displayName:
          type: string
          description: Skill display name
          example: My Custom Skill
        description:
          type: string
          description: Skill description
        icon:
          description: Skill instance icon
          $ref: '#/components/schemas/Icon'
        tplConfig:
          description: Skill template config
          $ref: '#/components/schemas/SkillTemplateConfig'
    CreateSkillInstanceRequest:
      type: object
      required:
        - instanceList
      properties:
        instanceList:
          type: array
          description: Skill instances to upsert
          items:
            $ref: '#/components/schemas/SkillInstanceCreateParam'
    CreateSkillInstanceResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Skill instance list
              items:
                $ref: '#/components/schemas/SkillInstance'
    UpdateSkillInstanceRequest:
      type: object
      required:
        - skillId
      properties:
        skillId:
          type: string
          description: Skill ID
          example: s-g30e1b80b5g1itbemc0g5jj3
        displayName:
          type: string
          description: Skill display name
          example: My Custom Skill
        description:
          type: string
          description: Skill description
        icon:
          description: Skill instance icon
          $ref: '#/components/schemas/Icon'
        tplConfig:
          description: Skill template config
          $ref: '#/components/schemas/SkillTemplateConfig'
    UpdateSkillInstanceResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              description: Skill instance list
              $ref: '#/components/schemas/SkillInstance'
    PinSkillInstanceRequest:
      type: object
      required:
        - skillId
      properties:
        skillId:
          type: string
          description: Skill ID to pin
    UnpinSkillInstanceRequest:
      type: object
      required:
        - skillId
      properties:
        skillId:
          type: string
          description: Skill ID to unpin
    DeleteSkillInstanceRequest:
      type: object
      required:
        - skillId
      properties:
        skillId:
          type: string
          description: Skill ID to delete
    SkillInput:
      type: object
      description: Skill input
      properties:
        query:
          type: string
          description: User query
        originalQuery:
          type: string
          description: Original user query
        images:
          type: array
          description: Image list (storage keys)
          items:
            type: string
    SkillContextResourceItem:
      type: object
      description: Skill context resource item
      properties:
        resourceId:
          type: string
          description: Resource ID (if empty, this will be considered as external resource)
        resource:
          description: Resource
          $ref: '#/components/schemas/Resource'
        isCurrent:
          type: boolean
          description: Whether this resource is current
        metadata:
          type: object
          description: Resource context metadata
    SkillContextDocumentItem:
      type: object
      description: Skill context document item
      properties:
        docId:
          type: string
          description: Document ID
        document:
          description: Document
          $ref: '#/components/schemas/Document'
        isCurrent:
          type: boolean
          description: Whether this document is current
        metadata:
          type: object
          description: Canvas context metadata
    SkillContextCodeArtifactItem:
      type: object
      description: Skill context code artifact item
      properties:
        artifactId:
          type: string
          description: Artifact ID
        codeArtifact:
          description: Code artifact
          $ref: '#/components/schemas/CodeArtifact'
        isCurrent:
          type: boolean
          description: Whether this code artifact is current
        metadata:
          type: object
          description: Code artifact context metadata
    SkillContextContentItem:
      type: object
      description: Skill context content item
      required:
        - content
      properties:
        content:
          type: string
          description: Content
        metadata:
          type: object
          description: Content context metadata
    SkillContextUrlItem:
      type: object
      description: Skill context url item
      required:
        - url
      properties:
        url:
          type: string
          description: URL
        metadata:
          type: object
          description: URL context metadata
    SkillContextMediaItem:
      type: object
      description: Skill context media item
      required:
        - mediaType
        - entityId
        - title
        - url
        - storageKey
      properties:
        mediaType:
          type: string
          description: Media type
          $ref: '#/components/schemas/MediaType'
        entityId:
          type: string
          description: Media entity ID
        title:
          type: string
          description: Media title
        url:
          type: string
          description: Media URL
        storageKey:
          type: string
          description: Media storage key
        metadata:
          type: object
          description: Media context metadata
    SkillContext:
      type: object
      description: Skill invocation context
      properties:
        resources:
          type: array
          description: Context resources
          items:
            $ref: '#/components/schemas/SkillContextResourceItem'
        documents:
          type: array
          description: Context documents
          items:
            $ref: '#/components/schemas/SkillContextDocumentItem'
        codeArtifacts:
          type: array
          description: Context code artifacts
          items:
            $ref: '#/components/schemas/SkillContextCodeArtifactItem'
        contentList:
          type: array
          description: Context content list
          items:
            $ref: '#/components/schemas/SkillContextContentItem'
        urls:
          type: array
          description: List of URLs
          items:
            $ref: '#/components/schemas/SkillContextUrlItem'
          deprecated: true
        mediaList:
          type: array
          description: List of media
          items:
            $ref: '#/components/schemas/SkillContextMediaItem'
    SelectionKey:
      type: string
      enum:
        - documentSelection
        - resourceSelection
        - skillResponseSelection
        - extensionWeblinkSelection
        - documentCursorSelection
        - documentBeforeCursorSelection
        - documentAfterCursorSelection
    ActionType:
      type: string
      enum:
        - skill
        - tool
        - media
    InvokeSkillRequest:
      type: object
      properties:
        input:
          description: Skill input
          $ref: '#/components/schemas/SkillInput'
        context:
          description: Skill invocation context
          $ref: '#/components/schemas/SkillContext'
        resultHistory:
          type: array
          description: Skill result history
          items:
            $ref: '#/components/schemas/ActionResult'
        runtimeConfig:
          description: Skill runtime config
          $ref: '#/components/schemas/SkillRuntimeConfig'
          deprecated: true
        tplConfig:
          description: Skill template config
          $ref: '#/components/schemas/SkillTemplateConfig'
          deprecated: true
        skillName:
          type: string
          description: Skill name (if not provided, commonQnA will be used)
          deprecated: true
        target:
          description: Skill invocation target
          $ref: '#/components/schemas/Entity'
        projectId:
          type: string
          description: Project ID
        resultId:
          type: string
          description: |
            Result ID associated with this invocation.
            1) If not provided, a new resultId will be generated.
            2) If there is no existing result with this resultId, it will be created and run.
            3) If there is an existing result with this resultId, it will be rerun.
        locale:
          type: string
          description: Selected output locale
        modelName:
          type: string
          description: Selected model
          deprecated: true
        modelItemId:
          type: string
          description: Selected model item ID
        skillId:
          type: string
          description: Skill ID
        triggerId:
          type: string
          description: Trigger ID
        selectedMcpServers:
          type: array
          description: Selected MCP servers (deprecated, use `tools` instead)
          items:
            type: string
          deprecated: true
        toolsets:
          type: array
          description: Selected toolsets
          items:
            $ref: '#/components/schemas/GenericToolset'
        workflowExecutionId:
          type: string
          description: Workflow execution ID for workflow context
        workflowNodeExecutionId:
          type: string
          description: Workflow node execution ID for workflow context
    InvokeSkillResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            resultId:
              type: string
              description: Skill result ID
    ListSkillTriggerResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Skill trigger list
              items:
                $ref: '#/components/schemas/SkillTrigger'
    SkillTriggerCreateParam:
      type: object
      required:
        - skillId
        - displayName
        - triggerType
      properties:
        skillId:
          type: string
          description: Skill ID
          example: sk-g30e1b80b5g1itbemc0g5jj3
        displayName:
          type: string
          description: Trigger display name
          example: My trigger
        triggerType:
          description: Trigger type
          $ref: '#/components/schemas/SkillTriggerType'
        simpleEventName:
          description: Simple event name (only required when trigger type is `simpleEvent`)
          $ref: '#/components/schemas/SimpleEventName'
        timerConfig:
          description: Timer config (only required when trigger type is `timer`)
          $ref: '#/components/schemas/TimerTriggerConfig'
        input:
          description: Skill input
          $ref: '#/components/schemas/SkillInput'
        context:
          description: Skill invocation context
          $ref: '#/components/schemas/SkillContext'
        tplConfig:
          description: Skill template config
          $ref: '#/components/schemas/SkillTemplateConfig'
        enabled:
          type: boolean
          description: Whether this trigger is enabled
    CreateSkillTriggerRequest:
      type: object
      required:
        - triggerList
      properties:
        triggerList:
          type: array
          description: Skill triggers to upsert
          items:
            $ref: '#/components/schemas/SkillTriggerCreateParam'
    CreateSkillTriggerResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Skill trigger list
              items:
                $ref: '#/components/schemas/SkillTrigger'
    UpdateSkillTriggerRequest:
      allOf:
        - $ref: '#/components/schemas/SkillTriggerCreateParam'
        - type: object
          required:
            - triggerId
          properties:
            triggerId:
              type: string
              description: Trigger ID
              example: tr-g30e1b80b5g1itbemc0g5jj3
    UpdateSkillTriggerResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              description: Updated skill trigger
              $ref: '#/components/schemas/SkillTrigger'
    DeleteSkillTriggerRequest:
      type: object
      required:
        - triggerId
      properties:
        triggerId:
          type: string
          description: Trigger ID to delete
    MediaType:
      type: string
      description: media type
      enum: [image, video, audio]
      example: image
    MediaGenerateRequest:
        type: object
        required:
          - mediaType
          - prompt
        properties:
          mediaType:
            $ref: '#/components/schemas/MediaType'
          model:
            type: string
            description: Model name for content generation
          targetType:
            $ref: '#/components/schemas/EntityType'
          targetId:
            type: string
            description: Target ID
          providerItemId:
            type: string
            description: Provider item ID
          provider:
            type: string
            description: Optional provider selection (use providerItemId instead)
            nullable: true
          prompt:
            type: string
            description: Text prompt for content generation
          wait:
            type: boolean
            description: Whether to wait for the generation to complete
            default: false
          resultId:
            type: string
            description: Media generation result ID
          parentResultId:
            type: string
            description: Parent result ID for the media generation (usually the actor agent result ID)
          apiKey:
            type: string
            description: API key for the provider
          inputParameters:
            type: array
            description: Input parameter configurations
            items:
              $ref: '#/components/schemas/MediaModelParameter'
          input:
            type: object
            description: Flexible key-value pairs for additional input parameters
            additionalProperties: true
          unitCost:
            type: number
            description: Unit cost for the media generation
          
    MediaGenerateResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            resultId:
              type: string
              description: Media generation result ID
              example: ar-g30e1b80b5g1itbemc0g5jj3
            outputUrl:
              type: string
              description: Media generation output URL (only available when `wait` is true)
            storageKey:
              type: string
              description: Media generation output storage key (only available when `wait` is true)
            originalResult:
              type: object
              description: Media generation original result from provider

    PilotStepStatus:
      type: string
      enum:
        - init
        - executing
        - finish
        - failed
    PilotStep:
      type: object
      properties:
        stepId:
          type: string
          description: Pilot step ID
        name:
          type: string
          description: Pilot step name
        epoch:
          type: number
          description: Pilot step epoch
        entityId:
          type: string
          description: Pilot step entity ID
        entityType:
          type: string
          description: Pilot step entity type
        status:
          description: Pilot step status
          $ref: '#/components/schemas/PilotStepStatus'
        rawOutput:
          type: string
          description: Pilot step raw output
        actionResult:
          description: Pilot step action result
          $ref: '#/components/schemas/ActionResult'
        createdAt:
          type: string
          description: Pilot step created at
        updatedAt:
          type: string
          description: Pilot step updated at
    PilotSessionStatus:
      type: string
      enum:
        - init
        - executing
        - waiting
        - finish
        - failed
    PilotSession:
      type: object
      required:
        - sessionId
        - status
        - targetType
        - targetId
        - title
        - input
        - currentEpoch
        - maxEpoch
      properties:
        sessionId:
          type: string
          description: Pilot session ID
        title:
          type: string
          description: Pilot session title
        input:
          description: Pilot session input
          $ref: '#/components/schemas/SkillInput'
        status:
          description: Pilot session status
          $ref: '#/components/schemas/PilotSessionStatus'
        targetType:
          description: Pilot session target type
          $ref: '#/components/schemas/EntityType'
        targetId:
          type: string
          description: Pilot session target ID
        currentEpoch:
          type: number
          description: Pilot session current epoch
        maxEpoch:
          type: number
          description: Pilot session max epoch
        steps:
          type: array
          description: Pilot steps
          items:
            $ref: '#/components/schemas/PilotStep'
        createdAt:
          type: string
          description: Pilot session created at
        updatedAt:
          type: string
          description: Pilot session updated at
    CreatePilotSessionRequest:
      type: object
      required:
        - targetId
        - targetType
        - input
      properties:
        targetId:
          type: string
          description: Pilot session target ID
        targetType:
          description: Pilot session target type
          $ref: '#/components/schemas/EntityType'
        maxEpoch:
          type: number
          description: Pilot session max epoch
          default: 2
        title:
          type: string
          description: Pilot session title
        input:
          description: Pilot session input
          $ref: '#/components/schemas/SkillInput'
        providerItemId:
          type: string
          description: Pilot session provider item ID
    UpdatePilotSessionRequest:
      type: object
      required:
        - sessionId
      properties:
        sessionId:
          type: string
          description: Pilot session ID
        input:
          description: Pilot session input
          $ref: '#/components/schemas/SkillInput'
        maxEpoch:
          type: number
          description: Pilot session max epoch
          default: 2
    RecoverPilotSessionRequest:
      type: object
      required:
        - sessionId
      properties:
        sessionId:
          type: string
          description: Pilot session ID to recover
        stepIds:
          type: array
          description: Optional array of specific step IDs to recover. If not provided, recovers all failed steps in the current epoch.
          items:
            type: string
    UpsertPilotSessionResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              description: Upserted pilot session
              $ref: '#/components/schemas/PilotSession'
    ListPilotSessionsResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Pilot session list
              items:
                $ref: '#/components/schemas/PilotSession'
    GetPilotSessionDetailResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              description: Pilot session detail
              $ref: '#/components/schemas/PilotSession'
    UpdateUserSettingsRequest:
      type: object
      properties:
        name:
          type: string
          description: User name
          example: john_name
        nickname:
          type: string
          description: User nickname
          example: John Doe
        avatar:
          type: string
          description: User avatar
        avatarStorageKey:
          type: string
          description: User avatar storage key
        uiLocale:
          type: string
          description: UI locale
          example: en
        outputLocale:
          type: string
          description: Output locale
          example: en
        preferences:
          description: User preferences
          $ref: '#/components/schemas/UserPreferences'
        onboarding:
          description: Onboarding config
          $ref: '#/components/schemas/OnboardingConfig'
    CheckSettingsFieldResult:
      type: object
      required:
        - field
        - value
        - available
      properties:
        field:
          type: string
          description: Settings field
        value:
          type: string
          description: Settings field value
        available:
          type: boolean
          description: Whether the field value is available
    CheckSettingsFieldResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              description: Settings field check result
              $ref: '#/components/schemas/CheckSettingsFieldResult'
    CreateCheckoutSessionRequest:
      type: object
      required:
        - planType
      properties:
        planType:
          description: Subscription plan type
          $ref: '#/components/schemas/SubscriptionPlanType'
        interval:
          description: Subscription billing interval
          $ref: '#/components/schemas/SubscriptionInterval'
    CreateCheckoutSessionResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              description: Checkout session
              properties:
                url:
                  type: string
                  description: Checkout session URL
    CreatePortalSessionResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              description: Portal session
              properties:
                url:
                  type: string
                  description: Portal session URL
    GetCreditRechargeResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              description: Credit recharge data with pagination
              properties:
                data:
                  type: array
                  description: Credit recharge list
                  items:
                    $ref: '#/components/schemas/CreditRecharge'
                total:
                  type: integer
                  description: Total number of records
                page:
                  type: integer
                  description: Current page number
                pageSize:
                  type: integer
                  description: Number of items per page
    GetCreditUsageResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              description: Credit usage data with pagination
              properties:
                data:
                  type: array
                  description: Credit usage list
                  items:
                    $ref: '#/components/schemas/CreditUsage'
                total:
                  type: integer
                  description: Total number of records
                page:
                  type: integer
                  description: Current page number
                pageSize:
                  type: integer
                  description: Number of items per page
    getCreditBalanceResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              description: Credit balance
              properties:
                creditBalance:
                  type: number
                  description: Credit balance
                creditAmount:
                  type: number
                  description: Credit amount
    SubscriptionPlan:
      type: object
      properties:
        planType:
          type: string
          description: Subscription plan type
        creditQuota:
          type: number
          description: Credit quota per month
        dailyGiftCreditQuota:
          type: number
          description: Daily gift credit quota
        t1TokenQuota:
          type: number
          description: Token quota per month (T1)
        t2TokenQuota:
          type: number
          description: Token quota per month (T2)
        objectStorageQuota:
          type: string
          description: Object storage quota (in bytes)
        vectorStorageQuota:
          type: string
          description: Vector storage quota (in bytes)
    GetSubscriptionPlansResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Subscription plans
              items:
                $ref: '#/components/schemas/SubscriptionPlan'
    SubscriptionUsageData:
      type: object
      properties:
        token:
          description: Token usage meter
          $ref: '#/components/schemas/TokenUsageMeter'
        storage:
          description: Storage usage meter
          $ref: '#/components/schemas/StorageUsageMeter'
        fileParsing:
          description: File parsing meter
          $ref: '#/components/schemas/FileParsingMeter'
    GetSubscriptionUsageResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              description: Subscription usage
              $ref: '#/components/schemas/SubscriptionUsageData'
    WebSearchRequest:
      type: object
      properties:
        q:
          type: string
          description: Search query
        hl:
          type: string
          description: Language/locale code
        gl:
          type: string
          description: Country/region code
        location:
          type: string
          description: Location string
        limit:
          type: number
          description: Web search result limit
          default: 10
    BatchWebSearchRequest:
      type: object
      properties:
        limit:
          type: number
          description: Web search result limit
          default: 10
        queries:
          type: array
          description: Web search queries
          items:
            $ref: '#/components/schemas/WebSearchRequest'
    MultiLingualWebSearchRequest:
      type: object
      required:
        - query
        - searchLocaleList
      properties:
        query:
          type: string
          description: Search query
        searchLocaleList:
          type: array
          description: List of search locales
          items:
            type: string
        displayLocale:
          type: string
          description: Display locale
          default: auto
        searchLimit:
          type: number
          description: Web search result limit per locale
        enableRerank:
          type: boolean
          description: Whether to enable reranking of search results
        rerankLimit:
          type: number
          description: Limit for reranked results
        rerankRelevanceThreshold:
          type: number
          description: Relevance threshold for reranking
    MultiLingualWebSearchResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              description: Multilingual web search results
              required:
                - sources
                - searchSteps
              properties:
                sources:
                  type: array
                  description: Search result sources
                  items:
                    $ref: '#/components/schemas/Source'
                searchSteps:
                  type: array
                  description: Search steps
                  items:
                    $ref: '#/components/schemas/SearchStep'
    WebSearchResult:
      type: object
      properties:
        name:
          type: string
          description: Web search result name
        url:
          type: string
          description: Web search result url
        snippet:
          type: string
          description: Web search result snippet
        locale:
          type: string
          description: Web search result locale
    WebSearchResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Web search results
              items:
                $ref: '#/components/schemas/WebSearchResult'
    RerankResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Reranked results
              items:
                $ref: '#/components/schemas/SearchResult'
    SearchOptions:
      type: object
      description: Search options for internal use
      properties:
        enableReranker:
          type: boolean
          description: Whether to enable reranker
          default: true
    SearchDomain:
      type: string
      enum:
        - resource
        - document
        - canvas
    SearchMode:
      type: string
      enum:
        - keyword
        - vector
        - hybrid
    SearchRequest:
      type: object
      required:
        - query
      properties:
        query:
          type: string
          description: Search query (if empty, return last updated data)
        domains:
          type: array
          description: Search domains (if not specified, return all domains)
          items:
            $ref: '#/components/schemas/SearchDomain'
        entities:
          type: array
          description: Search entities
          items:
            $ref: '#/components/schemas/Entity'
        mode:
          type: string
          description: Search mode
          $ref: '#/components/schemas/SearchMode'
          default: keyword
        projectId:
          type: string
          description: Project ID
        limit:
          type: number
          description: Search result limit for each domain
          default: 5
    SearchResultSnippet:
      type: object
      properties:
        text:
          type: string
          description: Search result content text
        highlightedText:
          type: string
          description: Search result highlighted content text with em html tags
    SearchResult:
      type: object
      required:
        - id
        - domain
        - title
      properties:
        id:
          type: string
          description: Search result ID to navigate to
        domain:
          description: Search result domain
          $ref: '#/components/schemas/SearchDomain'
        title:
          type: string
          description: Search result title
        highlightedTitle:
          type: string
          description: Search result highlighted title with em html tags
        contentPreview:
          type: string
          description: Search result content preview
        snippets:
          type: array
          description: Search result content list with highlight marks
          items:
            $ref: '#/components/schemas/SearchResultSnippet'
        relevanceScore:
          type: number
          description: Search result relevance score
        metadata:
          type: object
          description: Search result metadata
          additionalProperties: true
        createdAt:
          type: string
          format: date-time
          description: Data creation time
        updatedAt:
          type: string
          format: date-time
          description: Data update time
    SearchResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Search result
              items:
                $ref: '#/components/schemas/SearchResult'
    ScrapeWeblinkRequest:
      type: object
      required:
        - url
      properties:
        url:
          type: string
          description: Weblink URL
    ScrapeWeblinkResult:
      type: object
      properties:
        title:
          type: string
          description: Weblink title
        description:
          type: string
          description: Weblink description
        image:
          type: string
          description: Weblink image
    ScrapeWeblinkResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              description: Weblink scrape result
              $ref: '#/components/schemas/ScrapeWeblinkResult'
    FileVisibility:
      type: string
      enum:
        - public
        - private
    UploadRequest:
      type: object
      required:
        - file
      properties:
        file:
          type: string
          format: binary
          description: File to upload
        entityId:
          type: string
          description: Entity ID
        entityType:
          description: Entity type
          $ref: '#/components/schemas/EntityType'
        visibility:
          description: File visibility (default is private)
          $ref: '#/components/schemas/FileVisibility'
        storageKey:
          type: string
          description: Storage key (if provided, the file will be replaced if it already exists)
    UploadResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              description: File upload result
              required:
                - url
                - storageKey
              properties:
                url:
                  type: string
                  description: File URL
                storageKey:
                  type: string
                  description: Storage key
    ConvertRequest:
      type: object
      required:
        - file
      properties:
        file:
          type: string
          format: binary
          description: The file to convert
        from:
          type: string
          description: Source format (e.g., html)
          default: html
        to:
          type: string
          description: Target format (e.g., markdown)
          default: markdown
    ConvertResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                content:
                  type: string
                  description: Converted markdown content
    MediaGenerationModelCapabilities:
      type: object
      properties:
        image:
          type: boolean
          description: Whether this model supports image generation
        video:
          type: boolean
          description: Whether this model supports video generation
        audio:
          type: boolean
          description: Whether this model supports audio generation
    ModelCapabilities:
      type: object
      properties:
        functionCall:
          type: boolean
          description: Whether this model supports function calling
        vision:
          type: boolean
          description: Whether this model can take images as input
        reasoning:
          type: boolean
          description: Whether this model includes reasoning content
        contextCaching:
          type: boolean
          description: Whether this model supports context caching
        image:
          type: boolean
          description: Whether this model supports image generation
        video:
          type: boolean
          description: Whether this model supports video generation
        audio:
          type: boolean
          description: Whether this model supports audio generation
    ModelInfo:
      type: object
      required:
        - name
        - label
        - provider
        - contextLimit
        - maxOutput
      properties:
        name:
          type: string
          description: Model name
        label:
          type: string
          description: Model label
        provider:
          type: string
          description: Model provider
        providerItemId:
          type: string
          description: Model provider item ID
        tier:
          type: string
          description: Model tier
          $ref: '#/components/schemas/ModelTier'
        contextLimit:
          type: number
          description: Model context limit (in tokens)
        maxOutput:
          type: number
          description: Model max output length (in tokens)
        capabilities:
          description: Model capabilities
          $ref: '#/components/schemas/ModelCapabilities'
        isDefault:
          type: boolean
          description: Whether this model is the default model
        group:
          type: string
          description: Model group
        category:
          type: string
          description: Model category
          $ref: '#/components/schemas/ProviderCategory'
        creditBilling:
          $ref: '#/components/schemas/CreditBilling'
          description: Credit billing info
        inputParameters:
            type: array
            description: Input parameter configurations
            items:
              $ref: '#/components/schemas/MediaModelParameter'
    ListModelsResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Model list
              items:
                $ref: '#/components/schemas/ModelInfo'
    ProviderCategory:
      type: string
      enum:
        - llm
        - embedding
        - reranker
        - webSearch
        - urlParsing
        - pdfParsing
        - mediaGeneration
    Provider:
      type: object
      description: General provider info
      required:
        - providerId
        - providerKey
        - categories
        - name
        - enabled
      properties:
        providerId:
          type: string
          description: Provider ID
        providerKey:
          type: string
          description: Provider key
        name:
          type: string
          description: Provider name
        categories:
          type: array
          description: Provider categories
          items:
            $ref: '#/components/schemas/ProviderCategory'
        baseUrl:
          type: string
          description: Provider base URL
        enabled:
          type: boolean
          description: Whether the provider is enabled
        isGlobal:
          type: boolean
          description: Whether the provider is global
        apiKey:
          type: string
          description: Provider API key (this will never be exposed to the frontend)
    LLMModelConfig:
      type: object
      description: Provider config for LLMs
      required:
        - modelId
        - modelName
      properties:
        modelId:
          type: string
          description: Model ID
        modelName:
          type: string
          description: Model name
        contextLimit:
          type: number
          description: Model context limit (in tokens)
        maxOutput:
          type: number
          description: Model max output length (in tokens)
        disallowTemperature:
          type: boolean
          description: Whether the model disallow setting custom temperature
        capabilities:
          description: Model capabilities
          $ref: '#/components/schemas/ModelCapabilities'

    MediaModelParameter:
      type: object
      description: Media generation parameter configuration
      required:
        - name
        - type
        - required
        - visible
      properties:
        name:
          type: string
          description: Parameter name
        type:
          type: string
          description: Parameter type
          enum: [url, text, option]
        value:
          oneOf:
            - type: string
              description: String value for url/text type or option value
            - type: array
              description: Array of URLs for url type
              items:
                type: string
            - type: number
              description: Numeric value for option type
            - type: integer
              description: Integer value for option type
            - type: boolean
              description: Boolean value for option type
        options:
          type: array
          description: Available options for option type
          items:
            oneOf:
              - type: string
                description: String option
              - type: number
                description: Numeric option
              - type: integer
                description: Integer option
              - type: boolean
                description: Boolean option
        description:
          type: string
          description: Parameter description
        required:
          type: boolean
          description: Whether this parameter is required
        visible:
          type: boolean
          description: Whether this parameter should be displayed in UI

    MediaGenerationModelConfig:
      type: object
      description: Provider config for media generation
      required:
        - modelId
        - modelName
      properties:
        modelId:
          type: string
          description: Model ID
        modelName:
          type: string
          description: Model name
        capabilities:
          description: Model capabilities
          $ref: '#/components/schemas/MediaGenerationModelCapabilities'
        description:
          type: string
          description: Model description
        supportedLanguages:
          type: array
          description: Supported languages for translation
          items:
            type: string
            example: ["en", "zh", "ja", "ko"]
        inputParameters:
          type: array
          description: Input parameter configurations
          items:
            $ref: '#/components/schemas/MediaModelParameter'
        outputParameters:
          type: array
          description: Output parameter configurations
          items:
            $ref: '#/components/schemas/MediaModelParameter'
        baseModel:
          type: string
          description: Base model for the model

    EmbeddingModelConfig:
      type: object
      description: Provider config for embeddings
      required:
        - modelId
        - dimensions
      properties:
        modelId:
          type: string
          description: Embedding model ID
        modelName:
          type: string
          description: Embedding model name
        dimensions:
          type: number
          description: Embedding model dimension
        batchSize:
          type: number
          description: Embedding model batch size
    RerankerModelConfig:
      type: object
      description: Provider config for rerankers
      required:
        - modelId
      properties:
        modelId:
          type: string
          description: Reranking model ID
        modelName:
          type: string
          description: Reranking model name
        topN:
          type: number
          description: Number of top results to return
        relevanceThreshold:
          type: number
          description: Minimum relevance score threshold (0.0-1.0)
    ProviderItemConfig:
      oneOf:
        - $ref: '#/components/schemas/LLMModelConfig'
        - $ref: '#/components/schemas/EmbeddingModelConfig'
        - $ref: '#/components/schemas/RerankerModelConfig'
        - $ref: '#/components/schemas/MediaGenerationModelConfig'
    CreditBilling:
      type: object
      description: Credit billing configuration for provider items
      required:
        - unitCost
        - unit
        - minCharge
      properties:
        unitCost:
          type: number
          description: Credit consumption per unit usage
          minimum: 0
        unit:
          type: string
          description: Measurement unit (e.g., token, product, second)
          example: "5k_tokens"
        minCharge:
          type: number
          description: Minimum credit charge per request
          minimum: 0
        isEarlyBirdFree:
          type: boolean
          description: Whether this billing is free for early bird users
          default: false

    ProviderItemOption:
      type: object
      properties:
        name:
          type: string
          description: Provider item name
        category:
          description: Provider category
          $ref: '#/components/schemas/ProviderCategory'
        tier:
          type: string
          description: Provider item tier
          $ref: '#/components/schemas/ModelTier'
        config:
          type: object
          description: Provider item config
          $ref: '#/components/schemas/ProviderItemConfig'
    ProviderItem:
      type: object
      required:
        - itemId
        - name
        - providerId
        - category
        - enabled
      properties:
        itemId:
          type: string
          description: Provider item ID
        name:
          type: string
          description: Provider item name
        enabled:
          type: boolean
          description: Whether the provider item is enabled
        category:
          description: Provider category
          $ref: '#/components/schemas/ProviderCategory'
        tier:
          description: Provider item tier
          $ref: '#/components/schemas/ModelTier'
        providerId:
          type: string
          description: Provider ID
        provider:
          type: object
          description: Provider detail info
          $ref: '#/components/schemas/Provider'
        config:
          description: Provider item config
          $ref: '#/components/schemas/ProviderItemConfig'
        order:
          type: number
          description: Provider item order
        group:
          type: string
          description: Provider item group
        creditBilling:
          description: Credit billing info
          $ref: '#/components/schemas/CreditBilling'
    CreditRecharge:
      type: object
      description: Credit recharge record for user balance management
      required:
        - rechargeId
        - uid
        - amount
        - balance
        - enabled
        - expiresAt
        - createdAt
        - updatedAt
      properties:
        rechargeId:
          type: string
          description: Unique recharge record ID
        uid:
          type: string
          description: User UID who owns this recharge record
        amount:
          type: integer
          description: Original recharge amount in credits
          minimum: 0
        balance:
          type: integer
          description: Remaining balance for this recharge record
          minimum: 0
        enabled:
          type: boolean
          description: Whether this recharge record is enabled (false after 30 days)
          default: true
        source:
          type: string
          description: Recharge source type
          enum:
            - subscription
            - purchase
            - gift
            - promotion
            - refund
          default: "purchase"
        description:
          type: string
          description: Optional description for this recharge
        expiresAt:
          type: string
          format: date-time
          description: Expiration timestamp (30 days from creation)
        createdAt:
          type: string
          format: date-time
          description: Record creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Record last update timestamp

    CreditUsage:
      type: object
      description: Credit usage record for tracking consumption
      required:
        - usageId
        - uid
        - amount
        - usageType
        - createdAt
      properties:
        usageId:
          type: string
          description: Unique usage record ID
        uid:
          type: string
          description: User UID who consumed the credits
        amount:
          type: integer
          description: Amount of credits consumed
          minimum: 0
        providerItemId:
          type: string
          description: Provider item ID that consumed the credits
        modelName:
          type: string
          description: Model name used for this consumption
        usageType:
          type: string
          description: Type of usage that consumed credits
          enum:
            - model_call
            - media_generation
            - embedding
            - reranking
            - other
          default: "model_call"
        actionResultId:
          type: string
          description: Related action result ID (if applicable)
        pilotSessionId:
          type: string
          description: Related pilot session ID (if applicable)
        description:
          type: string
          description: Optional description for this usage
        modelUsageDetails:
          type: string
          description: Model usage details for skill execution (JSON array of model usage)
        createdAt:
          type: string
          format: date-time
          description: Usage record creation timestamp
    ListProvidersResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Provider'
    UpsertProviderRequest:
      type: object
      properties:
        providerId:
          type: string
          description: Provider ID (only for update)
        providerKey:
          type: string
          description: Provider key
        name:
          type: string
          description: Provider name
        categories:
          type: array
          description: Provider categories
          items:
            $ref: '#/components/schemas/ProviderCategory'
        apiKey:
          type: string
          description: Provider API key
        baseUrl:
          type: string
          description: Provider base URL
        enabled:
          type: boolean
          description: Whether the provider is enabled
    UpsertProviderResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/Provider'
    DeleteProviderRequest:
      type: object
      required:
        - providerId
      properties:
        providerId:
          type: string
          description: Provider ID
    TestProviderConnectionRequest:
      type: object
      required:
        - providerId
      properties:
        providerId:
          type: string
          description: Provider ID to test
        category:
          description: Provider category to test (optional)
          $ref: '#/components/schemas/ProviderCategory'
    ProviderTestResult:
      type: object
      properties:
        providerId:
          type: string
          description: Provider ID
        providerKey:
          type: string
          description: Provider key
        name:
          type: string
          description: Provider name
        baseUrl:
          type: string
          description: Provider base URL
        categories:
          type: array
          description: Provider categories
          items:
            type: string
        status:
          type: string
          description: Test result status
          enum:
            - success
            - failed
            - unknown
        message:
          type: string
          description: Test result message
        details:
          type: object
          description: Detailed test results
          additionalProperties: true
        timestamp:
          type: string
          description: Test timestamp
          format: date-time
    TestProviderConnectionResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/ProviderTestResult'
    ListProviderItemOptionsResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/ProviderItemOption'
    ListProviderItemsResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/ProviderItem'
    UpsertProviderItemRequest:
      type: object
      properties:
        itemId:
          type: string
          description: Provider item ID (only for update)
        providerId:
          type: string
          description: Provider ID
        globalItemId:
          type: string
          description: Global provider item ID
        name:
          type: string
          description: Provider item name
        category:
          description: Provider category
          $ref: '#/components/schemas/ProviderCategory'
        enabled:
          type: boolean
          description: Whether the provider item is enabled
        config:
          description: Provider item config
          $ref: '#/components/schemas/ProviderItemConfig'
        order:
          type: number
          description: Provider item order
        group:
          type: string
          description: Provider item group
    UpsertProviderItemResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/ProviderItem'
    BatchUpsertProviderItemsRequest:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          description: Provider items to upsert
          items:
            $ref: '#/components/schemas/UpsertProviderItemRequest'
    BatchUpsertProviderItemsResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Upserted provider items
              items:
                $ref: '#/components/schemas/ProviderItem'
    DeleteProviderItemRequest:
      type: object
      required:
        - itemId
      properties:
        itemId:
          type: string
          description: Provider item ID
    ToolsetAuthType:
      type: string
      description: Toolset auth type
      enum:
        - credentials
        - oauth
    ToolDefinition:
      type: object
      required:
        - name
        - descriptionDict
      properties:
        name:
          type: string
          description: Tool name
        descriptionDict:
          type: object
          additionalProperties: true
          description: Tool description dictionary for humans
    AuthPattern:
      type: object
      required:
        - type
        - pattern
      properties:
        type:
          type: string
          description: Auth pattern type
          $ref: '#/components/schemas/ToolsetAuthType'
        credentialItems:
          type: array
          description: Credential items, only for `credentials` type
          items:
            $ref: '#/components/schemas/DynamicConfigItem'
        provider:
          type: string
          description: Auth provider, only for `oauth` type
        scope:
          type: array
          description: Auth scope, only for `oauth` type
          items:
            type: string
    ToolsetDefinition:
      type: object
      required:
        - key
        - descriptionDict
        - tools
      properties:
        key:
          type: string
          description: Toolset key
        domain:
          type: string
          description: Toolset domain (used for display icon)
        labelDict:
          type: object
          additionalProperties: true
          description: Toolset label dictionary
        descriptionDict:
          type: object
          additionalProperties: true
          description: Toolset description dictionary for humans
        tools:
          type: array
          description: Toolset tools
          items:
            $ref: '#/components/schemas/ToolDefinition'
        requiresAuth:
          type: boolean
          description: Whether the toolset requires auth
          default: false
        authPatterns:
          type: array
          description: Toolset auth patterns
          items:
            $ref: '#/components/schemas/AuthPattern'
        configItems:
          type: array
          description: Toolset config items
          items:
            $ref: '#/components/schemas/DynamicConfigItem'
    ToolsetInstance:
      type: object
      required:
        - toolsetId
        - name
        - key
      properties:
        toolsetId:
          type: string
          description: Toolset ID
        name:
          type: string
          description: Toolset name
        key:
          type: string
          description: Toolset key
        isGlobal:
          type: boolean
          description: Whether the toolset is global
        enabled:
          type: boolean
          description: Whether the toolset is enabled
        authType:
          $ref: '#/components/schemas/ToolsetAuthType'
          description: Toolset auth type
        authData:
          type: object
          additionalProperties: true
          description: Toolset auth data
        config:
          type: object
          additionalProperties: true
          description: Toolset config
        definition:
          description: Toolset definition
          $ref: '#/components/schemas/ToolsetDefinition'
        createdAt:
          type: string
          format: date-time
          description: Toolset creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Toolset update timestamp
    ListToolsetInventoryResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/ToolsetDefinition'
    ListToolsetsResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/ToolsetInstance'
    UpsertToolsetRequest:
      type: object
      properties:
        toolsetId:
          type: string
          description: Toolset ID (only for update)
        name:
          type: string
          description: Toolset name
        key:
          type: string
          description: Toolset key
        enabled:
          type: boolean
          description: Whether the toolset is enabled
        authType:
          $ref: '#/components/schemas/ToolsetAuthType'
          description: Toolset auth type
        authData:
          type: object
          additionalProperties: true
          description: Toolset auth data
        config:
          type: object
          additionalProperties: true
          description: Toolset config
        provider:
          type: string
          description: OAuth toolset provider
        scope:
          type: array
          description: OAuth toolset scope
          items:
            type: string
    UpsertToolsetResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/ToolsetInstance'
    GenericToolsetType:
      type: string
      enum:
        - regular
        - mcp
    GenericToolset:
      type: object
      required:
        - type
        - id
        - name
      properties:
        type:
          $ref: '#/components/schemas/GenericToolsetType'
          description: Toolset type
        id:
          type: string
          description: Toolset ID (toolsetId for regular toolset, name for MCP toolset)
        name:
          type: string
          description: Toolset name
        builtin:
          type: boolean
          description: Whether the toolset is builtin
        uninstalled:
          type: boolean
          description: Whether the toolset is uninstalled
        toolset:
          $ref: '#/components/schemas/ToolsetInstance'
          description: Toolset detail
        mcpServer:
          $ref: '#/components/schemas/McpServerDTO'
          description: MCP server
        selectedTools:
          type: array
          description: Selected tools (used for skill invocation)
          items:
            type: string
    ListToolsResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/GenericToolset'
    DeleteToolsetRequest:
      type: object
      required:
        - toolsetId
      properties:
        toolsetId:
          type: string
          description: Toolset ID
    DocumentInterface:
      type: object
      properties:
        id:
          type: string
          description: An optional identifier for the document. Ideally this should be unique across the document collection and formatted as a UUID.
        pageContent:
          type: string
          description: The main content of the document.
        metadata:
          type: object
          additionalProperties: true
          description: Metadata associated with the document.
    InMemorySearchResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/DocumentInterface'
    CanvasNodeType:
      type: string
      enum:
        - document
        - codeArtifact
        - website
        - resource
        - skill
        - tool
        - skillResponse
        - toolResponse
        - memo
        - group
        - image
        - video
        - audio
        - mediaSkill
        - mediaSkillResponse
        - start
    CanvasNodeData:
      type: object
      description: Node data
      required:
        - title
        - entityId
      properties:
        title:
          type: string
          description: Node title
        editedTitle:
          type: string
          description: Node edited title
        entityId:
          type: string
          description: Node entity ID
        contentPreview:
          type: string
          description: Node content preview
        metadata:
          type: object
          additionalProperties: true
          description: Node metadata
    XYPosition:
      type: object
      required:
        - x
        - y
      properties:
        x:
          type: number
          description: Node position x
        y:
          type: number
          description: Node position y
    CanvasNode:
      type: object
      required:
        - id
        - type
        - position
        - data
      properties:
        id:
          type: string
          description: Node ID
        type:
          description: Node type
          $ref: '#/components/schemas/CanvasNodeType'
        position:
          $ref: '#/components/schemas/XYPosition'
          description: Node position
        offsetPosition:
          $ref: '#/components/schemas/XYPosition'
          description: Node offset position
        data:
          type: object
          description: Node data
          $ref: '#/components/schemas/CanvasNodeData'
        style:
          type: object
          description: Node style
        selected:
          type: boolean
          description: Whether the node is selected
        dragging:
          type: boolean
          description: Whether the node is being dragged
        parentId:
          type: string
          description: Parent node ID
    CanvasEdge:
      type: object
      required:
        - id
        - source
        - target
        - type
      properties:
        id:
          type: string
          description: Edge ID
        source:
          type: string
          description: Edge source node ID
        target:
          type: string
          description: Edge target node ID
        type:
          type: string
          description: Edge type
    InitializeWorkflowRequest:
      type: object
      required:
        - canvasId
      properties:
        canvasId:
          type: string
          description: Canvas ID to initialize workflow for
          example: "canvas-123"
        newCanvasId:
          type: string
          description: New canvas ID
          example: "canvas-456"
        variables:
          type: array
          description: Workflow variables
          items:
            $ref: '#/components/schemas/WorkflowVariable'
        startNodes:
          type: array
          description: Start node IDs
          items:
            type: string
            example: "node-123"
    InitializeWorkflowResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              required:
                - workflowExecutionId
              properties:
                workflowExecutionId:
                  type: string
                  description: Workflow execution ID
                  example: "we-abc123"
    WorkflowNodeExecution:
      type: object
      required:
        - nodeId
      properties:
        nodeExecutionId:
          type: string
          description: Node execution ID
        nodeId:
          type: string
          description: Node ID
        nodeType:
          type: string
          description: Node type
        nodeData:
          type: string
          description: Node data
        entityId:
          type: string
          description: Node entity ID
        newEntityId:
          type: string
          description: New node entity ID
        title:
          type: string
          description: Node title
        status:
          description: Node status
          $ref: '#/components/schemas/ActionStatus'
        progress:
          type: number
          description: Node progress
        createdAt:
          type: string
          format: date-time
          description: Node creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Node update timestamp
    WorkflowExecutionStatus:
      type: string
      enum:
        - init
        - executing
        - finish
        - failed
    WorkflowExecution:
      type: object
      required:
        - executionId
      properties:
        executionId:
          type: string
          description: Workflow execution ID
        canvasId:
          type: string
          description: Canvas ID
        title:
          type: string
          description: Workflow title
        status:
          $ref: '#/components/schemas/WorkflowExecutionStatus'
          description: Workflow status
        nodeExecutions:
          type: array
          description: Node executions
          items:
            $ref: '#/components/schemas/WorkflowNodeExecution'
        createdAt:
          type: string
          format: date-time
          description: Workflow creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Workflow update timestamp
    GetWorkflowDetailResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              $ref: '#/components/schemas/WorkflowExecution'
    CreateWorkflowAppRequest:
      type: object
      required:
        - canvasId
        - title
        - description
        - query
        - variables
        - coverStorageKey
      properties:
        canvasId:
          type: string
          description: Canvas ID
        title:
          type: string
          description: Workflow app title
        description:
          type: string
          description: Workflow app description
        query:
          type: string
          description: Workflow app query
        variables:
          type: array
          description: Workflow app variables
          items:
            $ref: '#/components/schemas/WorkflowVariable'
        coverStorageKey:
          type: string
          description: Cover image storage key
    DeleteWorkflowAppRequest:
      type: object
      required:
        - appId
      properties:
        appId:
          type: string
          description: Workflow app ID
    WorkflowApp:
      type: object
      required:
        - appId
        - canvasId
        - variables
      properties:
        appId:
          type: string
          description: Workflow app ID
        shareId:
          type: string
          description: Share ID for public access and URL generation
        title:
          type: string
          description: Workflow app title
        description:
          type: string
          description: Workflow app description
        owner:
          description: Workflow app owner
          $ref: '#/components/schemas/ShareUser'
        canvasId:
          type: string
          description: Canvas ID
        query:
          type: string
          description: Workflow app query
        variables:
          type: array
          description: Workflow app variables
          items:
            $ref: '#/components/schemas/WorkflowVariable'
        coverUrl:
          type: string
          description: Cover image URL
        createdAt:
          type: string
          format: date-time
          description: Workflow app creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Workflow app update timestamp
    CreateWorkflowAppResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/WorkflowApp'
    GetWorkflowAppDetailResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/WorkflowApp'
    ListWorkflowAppsResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: List of workflow apps
              items:
                $ref: '#/components/schemas/WorkflowApp'
    ExecuteWorkflowAppRequest:
      type: object
      required:
        - shareId
        - variables
      properties:
        shareId:
          type: string
          description: Workflow app share ID for execution
        variables:
          type: array
          description: Workflow app variables
          items:
            $ref: '#/components/schemas/WorkflowVariable'
    ExecuteWorkflowAppResult:
      type: object
      required:
        - executionId
      properties:
        executionId:
          type: string
          description: Workflow execution ID
    ExecuteWorkflowAppResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/ExecuteWorkflowAppResult'
    ValueType:
      type: string
      enum:
        - text
        - resource
    ResourceValue:
      type: object
      required:
        - name
        - fileType
        - storageKey
      properties:
        name:
          type: string
          description: Resource name
        fileType:
          description: Resource file type
          $ref: '#/components/schemas/VariableResourceType'
        storageKey:
          type: string
          description: Resource storage key
        entityId:
          type: string
          description: Resource ID
    VariableValue:
      type: object
      required:
        - type
      properties:
        type:
          description: Variable type
          $ref: '#/components/schemas/ValueType'
        text:
          type: string
          description: Variable text value (for text type)
        resource:
          description: Variable resource value (for resource type)
          $ref: '#/components/schemas/ResourceValue'
    VariableResourceType:
      type: string
      enum:
        - document
        - image
        - video
        - audio
    WorkflowVariable:
      type: object
      description: Workflow variable definition
      required:
        - name
        - value
        - variableId
      properties:
        variableId:
          type: string
          description: Variable ID, unique and readonly
        name:
          type: string
          description: Variable name
          example: "userName"
        value:
          type: array
          items:
            $ref: '#/components/schemas/VariableValue'
          description: Variable values
        description:
          type: string
          description: Variable description
          example: "用户姓名"
        createdAt:
          type: string
          description: Variable created at
          example: "2021-01-01T00:00:00.000Z"
        updatedAt:
          type: string
          description: Variable updated at
          example: "2021-01-01T00:00:00.000Z"
        variableType:
          type: string
          description: Variable type
          enum:
            - string
            - option
            - resource
        required:
          type: boolean
          description: Whether the variable is required
          example: true
        isSingle:
          type: boolean
          description: Whether the variable value is single (not multiple)
          example: true
        options:
          type: array
          items:
            type: string
          description: Variable options (only valid when variable type is option)
          example: ["张三", "李四"]
        resourceTypes:
          type: array
          items:
            $ref: '#/components/schemas/VariableResourceType'
          description: Supported resource types (only valid when variable type is resource)
    GetWorkflowVariablesResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: List of workflow variables
              items:
                $ref: '#/components/schemas/WorkflowVariable'
    UpdateWorkflowVariablesRequest:
      type: object
      required:
        - canvasId
        - variables
      properties:
        canvasId:
          type: string
          description: Canvas ID
        variables:
          type: array
          description: List of workflow variables
          items:
            $ref: '#/components/schemas/WorkflowVariable'
    UpdateWorkflowVariablesResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              description: Updated list of workflow variables
              items:
                $ref: '#/components/schemas/WorkflowVariable'
    SendEmailRequest:
      type: object
      required:
        - subject
        - html
      properties:
        subject:
          type: string
          description: Email subject
        html:
          type: string
          description: Email HTML content
        to:
          type: string
          description: Email recipient. If not specified, the email will be sent to current user.
        from:
          type: string
          description: Email sender. If not specified, server will use the default sender.
        attachments:
          type: array
          description: Email attachments, should be array of URLs.
          items:
            type: string
    GenerateAppTemplateRequest:
      type: object
      required:
        - canvasId
      properties:
        canvasId:
          type: string
          description: Canvas ID to generate template for
          pattern: '^[a-zA-Z0-9_-]+$'
          example: "canvas-123"

    AppTemplateResult:
      type: object
      required:
        - templateContent
        - variables
        - metadata
      properties:
        templateContent:
          type: string
          description: |
            Template with placeholders for user interaction.
            Variables are represented using handlebars syntax (e.g., {{variableName}}).
          example: "Create a {{workflowType}} workflow with {{variableCount}} variables including {{primarySkill}} functionality"
        variables:
          type: array
          description: List of related workflow variables used in the template
          items:
            $ref: '#/components/schemas/WorkflowVariable'
        metadata:
          type: object
          required:
            - extractedAt
            - variableCount
          properties:
            extractedAt:
              type: number
              description: Template generation timestamp (for version control)
              example: 1703123456789
            variableCount:
              type: number
              description: Total variable count (for frontend statistics display)
              example: 5
            promptCount:
              type: number
              description: Original prompt count (for quality assessment)
              example: 3
            canvasComplexity:
              type: string
              description: Canvas complexity level
              enum: [simple, medium, complex]
              example: "medium"
            workflowType:
              type: string
              description: Workflow type (for template classification and display)
              example: "data-processing"
            templateVersion:
              type: number
              description: Template version number (supports template iteration)
              example: 1
            workflowTitle:
              type: string
              description: Workflow title for display
              example: "Data Processing Pipeline"
            workflowDescription:
              type: string
              description: Workflow description
              example: "Automated data processing workflow"
            estimatedExecutionTime:
              type: string
              description: Estimated execution time
              example: "5-10 minutes"
            skillTags:
              type: array
              description: Skill tags for categorization
              items:
                type: string
              example: ["data-processing", "automation"]
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header
