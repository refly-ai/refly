// This file is auto-generated by @hey-api/openapi-ts

export const $User = {
  type: 'object',
  description: 'Refly user',
  required: ['uid'],
  properties: {
    uid: {
      type: 'string',
      description: 'UID',
    },
    uiLocale: {
      type: 'string',
      description: 'UI locale',
    },
    outputLocale: {
      type: 'string',
      description: 'Output locale',
    },
  },
} as const;

export const $ResourceMeta = {
  type: 'object',
  description: 'Resource metadata',
  properties: {
    url: {
      type: 'string',
      description: 'Weblink URL',
      example: 'https://www.google.com',
    },
    title: {
      type: 'string',
      description: 'Weblink title',
      example: 'Google',
    },
    storageKey: {
      type: 'string',
      description: 'Storage key for the weblink',
      deprecated: true,
    },
  },
} as const;

export const $ResourceType = {
  type: 'string',
  description: 'Resource type',
  enum: ['weblink', 'text', 'note'],
} as const;

export const $Resource = {
  type: 'object',
  required: ['resourceId', 'resourceType', 'title', 'createdAt', 'updatedAt'],
  properties: {
    resourceId: {
      type: 'string',
      description: "Resource ID (empty if it's external)",
      example: 'r-g30e1b80b5g1itbemc0g5jj3',
    },
    resourceType: {
      description: 'Resource type',
      $ref: '#/components/schemas/ResourceType',
    },
    title: {
      type: 'string',
      description: 'Resource title',
    },
    data: {
      type: 'object',
      description: 'Resource metadata',
      $ref: '#/components/schemas/ResourceMeta',
    },
    indexStatus: {
      description: 'Resource index status',
      $ref: '#/components/schemas/IndexStatus',
    },
    isPublic: {
      type: 'boolean',
      description: 'Whether this resource is public',
      default: false,
    },
    createdAt: {
      type: 'string',
      format: 'date-time',
      description: 'Collection creation time',
    },
    updatedAt: {
      type: 'string',
      format: 'date-time',
      description: 'Collection update time',
    },
    contentPreview: {
      type: 'string',
      description: 'Preview content for this resource',
    },
    content: {
      type: 'string',
      description: 'Document content for this resource (only returned in getNoteDetail API)',
    },
    collections: {
      type: 'array',
      description: 'Collections this resource belongs to (only returned in getResourceDetail API)',
      items: {
        $ref: '#/components/schemas/Collection',
      },
    },
  },
} as const;

export const $Note = {
  type: 'object',
  required: ['noteId', 'title', 'readOnly', 'isPublic', 'createdAt', 'updatedAt'],
  properties: {
    noteId: {
      type: 'string',
      description: 'Note ID',
      example: 'n-g30e1b80b5g1itbemc0g5jj3',
    },
    title: {
      type: 'string',
      description: 'Note title',
      example: 'My note',
    },
    contentPreview: {
      type: 'string',
      description: 'Note content preview',
    },
    content: {
      type: 'string',
      description: 'Full note content (only returned in detail api)',
    },
    readOnly: {
      type: 'boolean',
      description: 'Whether this note is read-only',
    },
    isPublic: {
      type: 'boolean',
      description: 'Whether this note is public',
    },
    createdAt: {
      type: 'string',
      format: 'date-time',
      description: 'Note creation time',
    },
    updatedAt: {
      type: 'string',
      format: 'date-time',
      description: 'Note update time',
    },
  },
} as const;

export const $Collection = {
  type: 'object',
  required: ['collectionId', 'title', 'createdAt', 'updatedAt'],
  properties: {
    collectionId: {
      type: 'string',
      description: 'Collection ID',
      example: 'cl-g30e1b80b5g1itbemc0g5jj3',
    },
    title: {
      type: 'string',
      description: 'Collection title',
      example: 'Default Collection',
    },
    description: {
      type: 'string',
      description: 'Collection description',
      example: 'Collection description',
    },
    isPublic: {
      type: 'boolean',
      description: 'Whether this collection is public',
      default: false,
    },
    createdAt: {
      type: 'string',
      format: 'date-time',
      description: 'Collection creation time',
    },
    updatedAt: {
      type: 'string',
      format: 'date-time',
      description: 'Collection update time',
    },
    resources: {
      type: 'array',
      description: 'Collection resources (only returned in detail API)',
      items: {
        $ref: '#/components/schemas/Resource',
      },
    },
  },
} as const;

export const $EntityType = {
  type: 'string',
  description: 'Entity type',
  enum: ['resource', 'collection', 'note'],
} as const;

export const $LabelClass = {
  type: 'object',
  description: 'Label class',
  required: ['labelClassId', 'name', 'displayName', 'createdAt', 'updatedAt'],
  properties: {
    labelClassId: {
      type: 'string',
      description: 'Label class ID',
      example: 'lc-g30e1b80b5g1itbemc0g5jj3',
    },
    name: {
      type: 'string',
      description: 'Label class name',
      example: 'Related Dataset',
    },
    displayName: {
      type: 'string',
      description: 'Label class display name',
      example: 'Label display name',
    },
    icon: {
      type: 'string',
      description: 'Label icon',
      example: 'IconBulb',
    },
    prompt: {
      type: 'string',
      description: 'Label creation instruction prompt',
      example: 'Extract labels for the tech-related keywords',
    },
    createdAt: {
      type: 'string',
      format: 'date-time',
      description: 'Label class creation time',
    },
    updatedAt: {
      type: 'string',
      format: 'date-time',
      description: 'Label class update time',
    },
  },
} as const;

export const $LabelInstance = {
  type: 'object',
  description: 'Label instances related to resources, collections, etc.',
  required: ['labelId', 'labelClassId', 'value'],
  properties: {
    labelId: {
      type: 'string',
      description: 'Label instance ID',
      example: 'lb-g30e1b80b5g1itbemc0g5jj3',
    },
    labelClassId: {
      type: 'string',
      description: 'Label class ID',
      example: 'lc-g30e1b80b5g1itbemc0g5jj3',
    },
    labelClass: {
      description: 'Label class',
      $ref: '#/components/schemas/LabelClass',
    },
    value: {
      type: 'string',
      description: 'Label value',
      example: 'HotPotQA',
    },
  },
} as const;

export const $InputMode = {
  type: 'string',
  description: 'Data input mode',
  enum: ['input', 'inputNumber', 'select', 'multiSelect'],
} as const;

export const $SelectOption = {
  type: 'object',
  description: 'Select option',
  required: ['value'],
  properties: {
    value: {
      type: 'string',
      description: 'Option value',
    },
    label: {
      type: 'string',
      description: 'Option label, with auto-selected locale',
    },
    labelDict: {
      type: 'object',
      description: 'Option label (key is locale, value is label)',
      additionalProperties: {
        type: 'string',
      },
    },
    disabled: {
      type: 'boolean',
      description: 'Whether this option is disabled',
      default: false,
    },
  },
} as const;

export const $DynamicConfigItem = {
  type: 'object',
  description: 'Dynamic config item',
  required: ['key', 'inputMode'],
  properties: {
    key: {
      type: 'string',
      description: 'Config key',
    },
    inputMode: {
      description: 'Config input mode',
      $ref: '#/components/schemas/InputMode',
    },
    required: {
      type: 'boolean',
      description: 'Whether this config is required',
      default: false,
    },
    label: {
      type: 'string',
      description: 'Config label, with auto-selected locale',
    },
    labelDict: {
      type: 'object',
      description: 'Config label (key is locale, value is label)',
      additionalProperties: {
        type: 'string',
      },
    },
    description: {
      type: 'string',
      description: 'Config description, with auto-selected locale',
    },
    descriptionDict: {
      type: 'object',
      description: 'Config description (key is locale, value is description)',
      additionalProperties: {
        type: 'string',
      },
    },
    options: {
      type: 'array',
      description: 'Config options',
      items: {
        $ref: '#/components/schemas/SelectOption',
      },
    },
  },
} as const;

export const $DynamicConfigValue = {
  type: 'object',
  description: 'Dynamic config value',
  required: ['value', 'label'],
  properties: {
    value: {
      oneOf: [
        {
          type: 'string',
        },
        {
          type: 'number',
        },
        {
          type: 'array',
          items: {
            type: 'string',
          },
        },
      ],
    },
    label: {
      type: 'string',
      description: 'Config label',
    },
  },
} as const;

export const $SkillTemplateConfigSchema = {
  type: 'object',
  description: 'Skill template config schema',
  required: ['items'],
  properties: {
    items: {
      type: 'array',
      description: 'Config items',
      items: {
        $ref: '#/components/schemas/DynamicConfigItem',
      },
    },
  },
} as const;

export const $SkillTemplate = {
  type: 'object',
  description: 'Skill template',
  required: ['name', 'displayName'],
  properties: {
    name: {
      type: 'string',
      description: 'Skill template name',
    },
    displayName: {
      type: 'string',
      description: 'Skill template display name',
    },
    description: {
      type: 'string',
      description: 'Skill template description',
    },
    configSchema: {
      description: 'Skill template config schema',
      $ref: '#/components/schemas/SkillTemplateConfigSchema',
    },
  },
} as const;

export const $SkillTriggerType = {
  type: 'string',
  description: 'Skill trigger type',
  enum: ['timer', 'simpleEvent'],
} as const;

export const $SimpleEventName = {
  type: 'string',
  description: 'Simple event name',
  enum: ['onResourceReady'],
} as const;

export const $SimpleEvent = {
  type: 'object',
  required: ['name', 'displayName', 'provideContextKeys'],
  properties: {
    name: {
      description: 'Simple event name',
      $ref: '#/components/schemas/SimpleEventName',
    },
    displayName: {
      type: 'object',
      description: 'Simple event display name (key is locale, value is display name)',
    },
    provideContextKeys: {
      type: 'array',
      description: 'Context keys to provide',
      items: {
        $ref: '#/components/schemas/SkillContextKey',
      },
    },
  },
} as const;

export const $TimerInterval = {
  type: 'string',
  description: 'Timer interval',
  enum: ['hour', 'day', 'week', 'month', 'year'],
} as const;

export const $TimerTriggerConfig = {
  type: 'object',
  required: ['datetime'],
  properties: {
    datetime: {
      type: 'string',
      format: 'date-time',
      description: 'Time to run',
    },
    repeatInterval: {
      type: 'string',
      description: 'Repeat interval',
      $ref: '#/components/schemas/TimerInterval',
    },
  },
} as const;

export const $SkillTrigger = {
  type: 'object',
  description: 'Skill triggers',
  required: ['skillId', 'displayName', 'triggerId', 'triggerType', 'enabled', 'createdAt', 'updatedAt'],
  properties: {
    skillId: {
      type: 'string',
      description: 'Skill ID',
      example: 'sk-g30e1b80b5g1itbemc0g5jj3',
    },
    displayName: {
      type: 'string',
      description: 'Trigger display name',
      example: 'My trigger',
    },
    triggerId: {
      type: 'string',
      description: 'Trigger ID',
      example: 'tr-g30e1b80b5g1itbemc0g5jj3',
    },
    triggerType: {
      description: 'Trigger type',
      $ref: '#/components/schemas/SkillTriggerType',
    },
    simpleEventName: {
      description: 'Simple event name (only required when trigger type is `simpleEvent`)',
      $ref: '#/components/schemas/SimpleEventName',
    },
    timerConfig: {
      description: 'Timer config (only required when trigger type is `timer`)',
      $ref: '#/components/schemas/TimerTriggerConfig',
    },
    input: {
      description: 'Skill input',
      $ref: '#/components/schemas/SkillInput',
    },
    context: {
      description: 'Skill context',
      $ref: '#/components/schemas/SkillContext',
    },
    enabled: {
      type: 'boolean',
      description: 'Trigger enabled',
    },
    createdAt: {
      type: 'string',
      format: 'date-time',
      description: 'Trigger creation time',
    },
    updatedAt: {
      type: 'string',
      format: 'date-time',
      description: 'Trigger update time',
    },
  },
} as const;

export const $SkillMeta = {
  type: 'object',
  description: 'Skill metadata',
  required: ['displayName'],
  properties: {
    displayName: {
      type: 'string',
      description: 'Skill display name',
    },
    tplName: {
      type: 'string',
      description: 'Skill template name',
    },
    skillId: {
      type: 'string',
      description: 'Skill ID',
      example: 'sk-g30e1b80b5g1itbemc0g5jj3',
    },
  },
} as const;

export const $SkillTemplateConfig = {
  type: 'object',
  description: 'Skill template config (key is config item key, value is config value)',
  additionalProperties: {
    description: 'Skill template config value',
    $ref: '#/components/schemas/DynamicConfigValue',
  },
} as const;

export const $SkillInstance = {
  type: 'object',
  description: 'Skill',
  allOf: [
    {
      $ref: '#/components/schemas/SkillMeta',
    },
    {
      type: 'object',
      required: ['createdAt', 'updatedAt', 'invocationConfig'],
      properties: {
        description: {
          type: 'string',
          description: 'Skill instance description',
        },
        tplConfig: {
          description: 'Skill template config',
          $ref: '#/components/schemas/SkillTemplateConfig',
        },
        tplConfigSchema: {
          description: 'Skill template config schema',
          $ref: '#/components/schemas/SkillTemplateConfigSchema',
        },
        invocationConfig: {
          description: 'Skill invocation config',
          $ref: '#/components/schemas/SkillInvocationConfig',
        },
        createdAt: {
          type: 'string',
          format: 'date-time',
          description: 'Skill creation time',
        },
        updatedAt: {
          type: 'string',
          format: 'date-time',
          description: 'Skill update time',
        },
      },
    },
  ],
} as const;

export const $SkillJob = {
  type: 'object',
  description: 'Skill job record',
  required: ['jobId', 'skillId', 'skillDisplayName', 'jobStatus', 'input', 'context', 'createdAt', 'updatedAt'],
  properties: {
    jobId: {
      type: 'string',
      description: 'Job ID',
      example: 'sj-g30e1b80b5g1itbemc0g5jj3',
    },
    skillId: {
      type: 'string',
      description: 'Skill ID',
    },
    skillDisplayName: {
      type: 'string',
      description: 'Skill display name',
    },
    jobStatus: {
      description: 'Skill job status',
      $ref: '#/components/schemas/SkillJobStatus',
    },
    conversation: {
      description: 'Related conversation',
      $ref: '#/components/schemas/Conversation',
    },
    trigger: {
      description: 'Skill trigger',
      $ref: '#/components/schemas/SkillTrigger',
    },
    input: {
      description: 'Skill input',
      $ref: '#/components/schemas/SkillInput',
    },
    context: {
      description: 'Skill context',
      $ref: '#/components/schemas/PopulatedSkillContext',
    },
    tplConfig: {
      description: 'Skill template config',
      $ref: '#/components/schemas/SkillTemplateConfig',
    },
    createdAt: {
      type: 'string',
      format: 'date-time',
      description: 'Job creation time',
    },
    updatedAt: {
      type: 'string',
      format: 'date-time',
      description: 'Job update time',
    },
    messages: {
      type: 'array',
      description: 'Job messages (only returned in detail API)',
      items: {
        $ref: '#/components/schemas/ChatMessage',
      },
    },
  },
} as const;

export const $SourceMeta = {
  type: 'object',
  description: 'Source metadata',
  properties: {
    source: {
      type: 'string',
      description: 'Source URL',
      deprecated: true,
    },
    title: {
      type: 'string',
      description: 'Source title',
      deprecated: true,
    },
    publishedTime: {
      type: 'string',
      format: 'date-time',
      description: 'Source publish time',
    },
    collectionId: {
      type: 'string',
      description: 'Related collection ID',
    },
    collectionName: {
      type: 'string',
      description: 'Related collection name',
    },
    resourceId: {
      type: 'string',
      description: 'Related resource ID',
    },
    resourceName: {
      type: 'string',
      description: 'Related resource name',
    },
  },
} as const;

export const $SourceSelection = {
  type: 'object',
  description: 'Source selection',
  required: ['content', 'type'],
  properties: {
    xPath: {
      type: 'string',
      description: 'Selected xPath',
      deprecated: true,
    },
    content: {
      type: 'string',
      description: 'Selected content',
    },
    type: {
      type: 'string',
      description: 'Selection type',
      enum: ['text', 'table', 'link', 'image', 'video', 'audio'],
    },
  },
} as const;

export const $Source = {
  type: 'object',
  description: 'Source of the message',
  required: ['pageContent'],
  properties: {
    url: {
      type: 'string',
      description: 'Source URL',
    },
    title: {
      type: 'string',
      description: 'Source title',
    },
    pageContent: {
      type: 'string',
      description: 'Source content',
    },
    score: {
      type: 'number',
      description: 'Relativity score',
    },
    metadata: {
      type: 'object',
      description: 'Source metadata',
      $ref: '#/components/schemas/SourceMeta',
    },
    selections: {
      type: 'array',
      description: 'Source selections',
      items: {
        $ref: '#/components/schemas/SourceSelection',
      },
    },
  },
} as const;

export const $MessageType = {
  type: 'string',
  description: 'Chat message type',
  enum: ['ai', 'human', 'system'],
} as const;

export const $ChatMessage = {
  type: 'object',
  description: 'Chat message',
  required: ['msgId', 'type', 'content'],
  properties: {
    msgId: {
      type: 'string',
      readOnly: true,
      description: 'Message ID',
      example: 'm-g30e1b80b5g1itbemc0g5jj3',
    },
    jobId: {
      type: 'string',
      description: 'Skill job ID',
      example: 'sj-g30e1b80b5g1itbemc0g5jj3',
    },
    type: {
      description: 'Message type',
      $ref: '#/components/schemas/MessageType',
    },
    content: {
      type: 'string',
      description: 'Message content',
      example: 'Hello',
    },
    skillMeta: {
      type: 'object',
      description: 'Skill metadata',
      $ref: '#/components/schemas/SkillMeta',
    },
    logs: {
      type: 'array',
      description: 'Message logs',
      items: {
        type: 'string',
      },
    },
    structuredData: {
      type: 'object',
      description: 'Structured data output',
      example: {
        sources: ['Source'],
        relatedQuestions: ['string'],
      },
    },
    errors: {
      type: 'array',
      description: 'Errors',
      items: {
        type: 'string',
      },
    },
    relatedQuestions: {
      type: 'array',
      description: 'Related questions',
      items: {
        type: 'string',
      },
      deprecated: true,
    },
    sources: {
      type: 'array',
      description: 'Related sources',
      items: {
        $ref: '#/components/schemas/Source',
      },
      deprecated: true,
    },
    selectedWeblinkConfig: {
      type: 'string',
      description: 'Selected weblink config (JSON)',
    },
    createdAt: {
      type: 'string',
      format: 'date-time',
      description: 'Message creation time',
    },
    updatedAt: {
      type: 'string',
      format: 'date-time',
      description: 'Message update time',
    },
  },
} as const;

export const $Conversation = {
  type: 'object',
  description: 'Conversation list item',
  properties: {
    convId: {
      type: 'string',
      description: 'Conversation ID',
      example: 'cv-g30e1b80b5g1itbemc0g5jj3',
    },
    title: {
      type: 'string',
      description: 'Conversation title',
      example: 'Default Conversation',
    },
    lastMessage: {
      type: 'string',
      description: 'Last message content',
      example: 'Hello',
    },
    messageCount: {
      type: 'number',
      description: 'Number of chat messages in this conversation',
      example: 42,
    },
    locale: {
      description: 'Conversation locale',
      type: 'string',
      example: 'en',
    },
    origin: {
      type: 'string',
      description: 'Origin page host',
      example: 'https://refly.ai',
    },
    originPageTitle: {
      type: 'string',
      description: 'Origin page title',
      example: 'Refly | Where knowledge thrives',
    },
    originPageUrl: {
      type: 'string',
      description: 'Origin page url',
      example: 'https://refly.ai/knowledge-base',
    },
    createdAt: {
      type: 'string',
      format: 'date-time',
      description: 'Conversation creation time',
    },
    updatedAt: {
      type: 'string',
      format: 'date-time',
      description: 'Conversation creation time',
    },
    messages: {
      type: 'array',
      description: 'Conversation messages (only returned for getConversationDetail api)',
      items: {
        $ref: '#/components/schemas/ChatMessage',
      },
    },
  },
} as const;

export const $ChatTaskType = {
  type: 'string',
  description: 'Chat task type',
  enum: ['chat', 'genTitle', 'quickAction', 'searchEnhanceKeyword', 'searchEnhanceSummarize', 'searchEnhanceAsk'],
} as const;

export const $RetrieveFilter = {
  type: 'object',
  description: 'Content retrieval filter',
  properties: {
    weblinkList: {
      type: 'array',
      description: 'List of web links',
      items: {
        $ref: '#/components/schemas/Source',
      },
      deprecated: true,
    },
    urls: {
      type: 'array',
      description: 'List of URLs to retrieve',
      items: {
        type: 'string',
        example: 'https://refly.ai',
      },
    },
    resourceIds: {
      type: 'array',
      description: 'List of resource IDs to retrieve',
      items: {
        type: 'string',
        example: 'r-g30e1b80b5g1itbemc0g5jj3',
      },
    },
    collectionIds: {
      type: 'array',
      description: 'List of collection IDs to retrieve',
      items: {
        type: 'string',
        example: 'cl-g30e1b80b5g1itbemc0g5jj3',
      },
    },
  },
} as const;

export const $ChatPayload = {
  type: 'object',
  description: 'Chat payload',
  required: ['question'],
  properties: {
    question: {
      type: 'string',
      description: 'Question',
    },
    filter: {
      type: 'object',
      description: 'Content retrieval filter',
      $ref: '#/components/schemas/RetrieveFilter',
    },
  },
} as const;

export const $QuickActionType = {
  type: 'string',
  description: 'Quick action type',
  enum: ['selection', 'summary'],
} as const;

export const $QuickActionTaskPayload = {
  type: 'object',
  description: 'Quick action task payload',
  properties: {
    question: {
      type: 'string',
      description: 'Question',
    },
    actionType: {
      description: 'Quick action type',
      $ref: '#/components/schemas/QuickActionType',
    },
    actionPrompt: {
      type: 'string',
      description: 'Prompt for this action',
    },
    reference: {
      type: 'string',
      description: 'Reference for this action',
    },
    filter: {
      description: 'Content retrieval filter',
      $ref: '#/components/schemas/RetrieveFilter',
    },
  },
} as const;

export const $ChatTask = {
  type: 'object',
  description: 'Chat task',
  required: ['taskType'],
  properties: {
    taskType: {
      description: 'Task type',
      $ref: '#/components/schemas/ChatTaskType',
    },
    dryRun: {
      description: 'Whether to dry run the task',
      type: 'boolean',
      default: false,
    },
    convId: {
      description: 'Conversation ID, a new conversation will be created if empty or non-existent',
      type: 'string',
      example: 'cv-g30e1b80b5g1itbemc0g5jj3',
    },
    createConvParam: {
      description: 'Create conversation parameters',
      $ref: '#/components/schemas/CreateConversationRequest',
    },
    locale: {
      description: 'Chat locale',
      type: 'string',
      example: 'en',
    },
    data: {
      description: 'Chat data',
      oneOf: [
        {
          $ref: '#/components/schemas/ChatPayload',
        },
        {
          $ref: '#/components/schemas/QuickActionTaskPayload',
        },
      ],
    },
  },
} as const;

export const $ChatTaskResponse = {
  type: 'object',
  description: 'Chat task response',
  required: ['sources', 'answer'],
  properties: {
    sources: {
      type: 'array',
      description: 'List of web links',
      items: {
        $ref: '#/components/schemas/Source',
      },
    },
    answer: {
      type: 'string',
      description: 'Chat Answer',
    },
    relatedQuestions: {
      type: 'array',
      description: 'Related questions',
      items: {
        type: 'string',
      },
    },
  },
} as const;

export const $IndexStatus = {
  type: 'string',
  description: 'Resource index status',
  enum: ['init', 'processing', 'finish', 'failed', 'unavailable'],
} as const;

export const $UserSettings = {
  type: 'object',
  required: ['uid', 'avatar', 'name', 'email'],
  properties: {
    uid: {
      type: 'string',
      description: 'User ID',
      example: 'u-g30e1b80b5g1itbemc0g5jj3',
    },
    avatar: {
      type: 'string',
      description: 'User avatar',
      example: 'https://www.gstatic.com/webp/gallery/1.jpg',
    },
    name: {
      type: 'string',
      description: 'User name',
      example: 'John Doe',
    },
    email: {
      type: 'string',
      description: 'User email',
      example: '6XJpZ@example.com',
    },
    emailVerified: {
      type: 'boolean',
      description: 'Whether email is verified',
      default: false,
    },
    uiLocale: {
      type: 'string',
      description: 'User UI locale',
      example: 'en',
    },
    outputLocale: {
      type: 'string',
      description: 'User output locale',
      example: 'en',
    },
  },
} as const;

export const $BaseResponse = {
  type: 'object',
  required: ['success'],
  properties: {
    success: {
      type: 'boolean',
      description: 'Whether the operation was successful',
      example: true,
    },
    errMsg: {
      type: 'string',
      description: 'Error message',
      example: 'Operation failed',
    },
  },
} as const;

export const $UpsertResourceRequest = {
  type: 'object',
  required: ['title', 'resourceType'],
  properties: {
    title: {
      type: 'string',
      description: 'Resource title',
      example: 'My Resource',
    },
    resourceType: {
      description: 'Resource type',
      $ref: '#/components/schemas/ResourceType',
    },
    resourceId: {
      type: 'string',
      description: 'Resource ID (only used for update)',
      example: 'r-g30e1b80b5g1itbemc0g5jj3',
    },
    collectionId: {
      type: 'string',
      description: 'Collection ID (will add to the collection if given)',
      example: 'cl-g30e1b80b5g1itbemc0g5jj3',
    },
    data: {
      description: 'Resource metadata',
      $ref: '#/components/schemas/ResourceMeta',
    },
    storageKey: {
      type: 'string',
      description: 'Storage key for the resource',
    },
    content: {
      type: 'string',
      description: 'Resource content (this will be ignored if storageKey was set)',
    },
    isPublic: {
      type: 'boolean',
      description: 'Whether this resource is public',
      default: false,
    },
    readOnly: {
      type: 'boolean',
      description: 'Whether this resource is read-only',
      default: false,
    },
  },
} as const;

export const $UpsertResourceResponse = {
  allOf: [
    {
      $ref: '#/components/schemas/BaseResponse',
    },
    {
      type: 'object',
      properties: {
        data: {
          $ref: '#/components/schemas/Resource',
        },
      },
    },
  ],
} as const;

export const $BatchCreateResourceResponse = {
  allOf: [
    {
      $ref: '#/components/schemas/BaseResponse',
    },
    {
      type: 'object',
      properties: {
        data: {
          type: 'array',
          description: 'Resource list',
          items: {
            $ref: '#/components/schemas/Resource',
          },
        },
      },
    },
  ],
} as const;

export const $DeleteResourceRequest = {
  type: 'object',
  required: ['resourceId'],
  properties: {
    resourceId: {
      type: 'string',
      description: 'Resource ID to delete',
      example: 'r-g30e1b80b5g1itbemc0g5jj3',
    },
  },
} as const;

export const $ListResourceResponse = {
  allOf: [
    {
      $ref: '#/components/schemas/BaseResponse',
    },
    {
      type: 'object',
      properties: {
        data: {
          type: 'array',
          description: 'Resource list',
          items: {
            $ref: '#/components/schemas/Resource',
          },
        },
      },
    },
  ],
} as const;

export const $GetResourceDetailResponse = {
  allOf: [
    {
      $ref: '#/components/schemas/BaseResponse',
    },
    {
      type: 'object',
      properties: {
        data: {
          type: 'object',
          description: 'Resource data',
          $ref: '#/components/schemas/Resource',
        },
      },
    },
  ],
} as const;

export const $ListNoteResponse = {
  allOf: [
    {
      $ref: '#/components/schemas/BaseResponse',
    },
    {
      type: 'object',
      properties: {
        data: {
          type: 'array',
          description: 'Note list',
          items: {
            $ref: '#/components/schemas/Note',
          },
        },
      },
    },
  ],
} as const;

export const $GetNoteDetailResponse = {
  allOf: [
    {
      $ref: '#/components/schemas/BaseResponse',
    },
    {
      type: 'object',
      properties: {
        data: {
          type: 'object',
          description: 'Note data',
          $ref: '#/components/schemas/Note',
        },
      },
    },
  ],
} as const;

export const $UpsertNoteRequest = {
  type: 'object',
  properties: {
    title: {
      type: 'string',
      description: 'Note title',
      example: 'My Note',
    },
    noteId: {
      type: 'string',
      description: 'Note ID (only used for update)',
      example: 'n-g30e1b80b5g1itbemc0g5jj3',
    },
    readOnly: {
      type: 'boolean',
      description: 'Whether this note is read-only',
      default: false,
    },
    isPublic: {
      type: 'boolean',
      description: 'Whether this note is public',
      default: false,
    },
  },
} as const;

export const $UpsertNoteResponse = {
  allOf: [
    {
      $ref: '#/components/schemas/BaseResponse',
    },
    {
      type: 'object',
      properties: {
        data: {
          $ref: '#/components/schemas/Note',
        },
      },
    },
  ],
} as const;

export const $DeleteNoteRequest = {
  type: 'object',
  required: ['noteId'],
  properties: {
    noteId: {
      type: 'string',
      description: 'Note ID to delete',
      example: 'n-g30e1b80b5g1itbemc0g5jj3',
    },
  },
} as const;

export const $UpsertCollectionRequest = {
  type: 'object',
  properties: {
    collectionId: {
      type: 'string',
      description: 'Collection ID (only used for update)',
      example: 'cl-g30e1b80b5g1itbemc0g5jj3',
    },
    title: {
      type: 'string',
      description: 'Collection title',
      example: 'My Collection',
    },
    description: {
      type: 'string',
      description: 'Collection description',
      example: 'Collection description',
    },
    isPublic: {
      type: 'boolean',
      description: 'Whether this collection is public',
      default: false,
    },
  },
} as const;

export const $UpsertCollectionResponse = {
  allOf: [
    {
      $ref: '#/components/schemas/BaseResponse',
    },
    {
      type: 'object',
      properties: {
        data: {
          $ref: '#/components/schemas/Collection',
        },
      },
    },
  ],
} as const;

export const $AddResourceToCollectionRequest = {
  type: 'object',
  required: ['collectionId', 'resourceIds'],
  properties: {
    collectionId: {
      type: 'string',
      description: 'Collection ID',
    },
    resourceIds: {
      type: 'array',
      description: 'Resource ID list',
      items: {
        type: 'string',
      },
    },
  },
} as const;

export const $RemoveResourceFromCollectionRequest = {
  type: 'object',
  required: ['collectionId', 'resourceIds'],
  properties: {
    collectionId: {
      type: 'string',
      description: 'Collection ID',
    },
    resourceIds: {
      type: 'array',
      description: 'Resource ID list',
      items: {
        type: 'string',
      },
    },
  },
} as const;

export const $DeleteCollectionRequest = {
  type: 'object',
  required: ['collectionId'],
  properties: {
    collectionId: {
      type: 'string',
      description: 'Collection ID to delete',
      example: 'cl-g30e1b80b5g1itbemc0g5jj3',
    },
  },
} as const;

export const $ListCollectionResponse = {
  allOf: [
    {
      $ref: '#/components/schemas/BaseResponse',
    },
    {
      type: 'object',
      properties: {
        data: {
          type: 'array',
          description: 'Collection list',
          items: {
            $ref: '#/components/schemas/Collection',
          },
        },
      },
    },
  ],
} as const;

export const $GetCollectionDetailResponse = {
  allOf: [
    {
      $ref: '#/components/schemas/BaseResponse',
    },
    {
      type: 'object',
      properties: {
        data: {
          type: 'object',
          description: 'Collection data',
          $ref: '#/components/schemas/Collection',
        },
      },
    },
  ],
} as const;

export const $ListLabelClassesResponse = {
  allOf: [
    {
      $ref: '#/components/schemas/BaseResponse',
    },
    {
      type: 'object',
      properties: {
        data: {
          type: 'array',
          description: 'Label class list',
          items: {
            $ref: '#/components/schemas/LabelClass',
          },
        },
      },
    },
  ],
} as const;

export const $CreateLabelClassRequest = {
  type: 'object',
  required: ['name', 'displayName', 'prompt'],
  properties: {
    name: {
      type: 'string',
      description: 'Label class name',
      example: 'my_class',
    },
    displayName: {
      type: 'string',
      description: 'Label display name',
      example: 'My Class',
    },
    icon: {
      type: 'string',
      description: 'Label icon',
      example: 'IconBulb',
    },
    prompt: {
      type: 'string',
      description: 'Label creation instruction prompt',
      example: 'Extract labels for the tech-related keywords',
    },
  },
} as const;

export const $UpdateLabelClassRequest = {
  type: 'object',
  required: ['labelClassId'],
  properties: {
    labelClassId: {
      type: 'string',
      description: 'Label class ID',
    },
    name: {
      type: 'string',
      description: 'Label class name',
      example: 'My Class',
    },
    displayName: {
      type: 'string',
      description: 'Label display name',
      example: 'My Class',
    },
    icon: {
      type: 'string',
      description: 'Label icon',
      example: 'IconBulb',
    },
    prompt: {
      type: 'string',
      description: 'Label creation instruction prompt',
      example: 'Extract labels for the tech-related keywords',
    },
  },
} as const;

export const $UpsertLabelClassResponse = {
  allOf: [
    {
      $ref: '#/components/schemas/BaseResponse',
    },
    {
      type: 'object',
      properties: {
        data: {
          description: 'Label class upserted',
          $ref: '#/components/schemas/LabelClass',
        },
      },
    },
  ],
} as const;

export const $DeleteLabelClassRequest = {
  type: 'object',
  required: ['labelClassId'],
  properties: {
    labelClassId: {
      type: 'string',
      description: 'Label class ID to delete',
      example: 'lc-g30e1b80b5g1itbemc0g5jj3',
    },
  },
} as const;

export const $ListLabelInstancesResponse = {
  allOf: [
    {
      $ref: '#/components/schemas/BaseResponse',
    },
    {
      type: 'object',
      properties: {
        data: {
          type: 'array',
          description: 'Label list',
          items: {
            $ref: '#/components/schemas/LabelInstance',
          },
        },
      },
    },
  ],
} as const;

export const $CreateLabelInstanceRequest = {
  type: 'object',
  required: ['labelClassId', 'valueList', 'entityType', 'entityId'],
  properties: {
    labelClassId: {
      type: 'string',
      description: 'Label class ID',
      example: 'lc-g30e1b80b5g1itbemc0g5jj3',
    },
    valueList: {
      type: 'array',
      description: 'Label value list',
      items: {
        type: 'string',
        example: 'label-1',
      },
    },
    entityType: {
      description: 'Label entity type',
      $ref: '#/components/schemas/EntityType',
    },
    entityId: {
      description: 'Label entity ID',
      type: 'string',
    },
  },
} as const;

export const $UpdateLabelInstanceRequest = {
  type: 'object',
  properties: {
    labelId: {
      type: 'string',
      description: 'Label ID to update',
    },
    value: {
      type: 'string',
      description: 'Updated label value',
    },
  },
} as const;

export const $UpsertLabelInstanceResponse = {
  allOf: [
    {
      $ref: '#/components/schemas/BaseResponse',
    },
    {
      type: 'object',
      properties: {
        data: {
          type: 'array',
          description: 'Label instance upserted',
          items: {
            $ref: '#/components/schemas/LabelInstance',
          },
        },
      },
    },
  ],
} as const;

export const $DeleteLabelInstanceRequest = {
  type: 'object',
  required: ['labelId'],
  properties: {
    labelId: {
      type: 'string',
      description: 'Label ID to delete',
      example: 'lb-g30e1b80b5g1itbemc0g5jj3',
    },
  },
} as const;

export const $ListSkillTemplateResponse = {
  allOf: [
    {
      $ref: '#/components/schemas/BaseResponse',
    },
    {
      type: 'object',
      properties: {
        data: {
          type: 'array',
          description: 'Skill template list',
          items: {
            $ref: '#/components/schemas/SkillTemplate',
          },
        },
      },
    },
  ],
} as const;

export const $ListSkillInstanceResponse = {
  allOf: [
    {
      $ref: '#/components/schemas/BaseResponse',
    },
    {
      type: 'object',
      properties: {
        data: {
          type: 'array',
          description: 'Skill list',
          items: {
            $ref: '#/components/schemas/SkillInstance',
          },
        },
      },
    },
  ],
} as const;

export const $SkillInstanceCreateParam = {
  type: 'object',
  required: ['displayName'],
  properties: {
    tplName: {
      type: 'string',
      description: 'Skill template name',
      example: 'online-search',
    },
    displayName: {
      type: 'string',
      description: 'Skill display name',
      example: 'My Custom Skill',
    },
    description: {
      type: 'string',
      description: 'Skill description',
    },
    tplConfig: {
      description: 'Skill template config',
      $ref: '#/components/schemas/SkillTemplateConfig',
    },
  },
} as const;

export const $CreateSkillInstanceRequest = {
  type: 'object',
  required: ['instanceList'],
  properties: {
    instanceList: {
      type: 'array',
      description: 'Skill instances to upsert',
      items: {
        $ref: '#/components/schemas/SkillInstanceCreateParam',
      },
    },
  },
} as const;

export const $CreateSkillInstanceResponse = {
  allOf: [
    {
      $ref: '#/components/schemas/BaseResponse',
    },
    {
      type: 'object',
      properties: {
        data: {
          type: 'array',
          description: 'Skill instance list',
          items: {
            $ref: '#/components/schemas/SkillInstance',
          },
        },
      },
    },
  ],
} as const;

export const $UpdateSkillInstanceRequest = {
  type: 'object',
  required: ['skillId'],
  properties: {
    skillId: {
      type: 'string',
      description: 'Skill ID',
      example: 's-g30e1b80b5g1itbemc0g5jj3',
    },
    displayName: {
      type: 'string',
      description: 'Skill display name',
      example: 'My Custom Skill',
    },
    description: {
      type: 'string',
      description: 'Skill description',
    },
  },
} as const;

export const $UpdateSkillInstanceResponse = {
  allOf: [
    {
      $ref: '#/components/schemas/BaseResponse',
    },
    {
      type: 'object',
      properties: {
        data: {
          description: 'Skill instance list',
          $ref: '#/components/schemas/SkillInstance',
        },
      },
    },
  ],
} as const;

export const $DeleteSkillInstanceRequest = {
  type: 'object',
  required: ['skillId'],
  properties: {
    skillId: {
      type: 'string',
      description: 'Skill ID to delete',
    },
  },
} as const;

export const $SkillInput = {
  type: 'object',
  description: 'Skill input',
  properties: {
    query: {
      type: 'string',
      description: 'User query',
    },
  },
} as const;

export const $SkillContext = {
  type: 'object',
  description: 'Skill invocation context',
  properties: {
    resourceIds: {
      type: 'array',
      description: 'List of resource IDs',
      items: {
        type: 'string',
      },
    },
    externalResources: {
      type: 'array',
      description: 'List of external resources',
      items: {
        $ref: '#/components/schemas/Resource',
      },
    },
    collectionIds: {
      type: 'array',
      description: 'List of collection IDs',
      items: {
        type: 'string',
      },
    },
    noteIds: {
      type: 'array',
      description: 'List of note IDs',
      items: {
        type: 'string',
      },
    },
    contentList: {
      type: 'array',
      description: 'List of content',
      items: {
        type: 'string',
      },
    },
    urls: {
      type: 'array',
      description: 'List of URLs',
      items: {
        type: 'string',
      },
    },
    locale: {
      type: 'string',
      description: 'user selected output locale',
      items: {
        type: 'string',
      },
    },
  },
} as const;

export const $PopulatedSkillContext = {
  allOf: [
    {
      $ref: '#/components/schemas/SkillContext',
    },
    {
      type: 'object',
      properties: {
        resources: {
          type: 'array',
          description: 'List of resources (both internal and external)',
          items: {
            $ref: '#/components/schemas/Resource',
          },
        },
        collections: {
          type: 'array',
          description: 'List of collections',
          items: {
            $ref: '#/components/schemas/Collection',
          },
        },
        notes: {
          type: 'array',
          description: 'List of notes',
          items: {
            $ref: '#/components/schemas/Note',
          },
        },
      },
    },
  ],
} as const;

export const $SkillInputKey = {
  type: 'string',
  enum: ['query'],
} as const;

export const $SkillContextKey = {
  type: 'string',
  enum: ['resourceIds', 'externalResources', 'collectionIds', 'noteIds', 'contentList', 'urls'],
} as const;

export const $SkillInvocationRule = {
  type: 'object',
  required: ['key'],
  properties: {
    key: {
      type: 'string',
      description: 'Field key',
      oneOf: [
        {
          $ref: '#/components/schemas/SkillInputKey',
        },
        {
          $ref: '#/components/schemas/SkillContextKey',
        },
      ],
    },
    limit: {
      type: 'number',
      description: 'Maximum number of items',
      default: 10,
    },
    required: {
      type: 'boolean',
      description: 'Whether this key is required (default is false)',
    },
  },
} as const;

export const $InvocationRuleGroupRelation = {
  type: 'string',
  enum: ['regular', 'mutuallyExclusive'],
} as const;

export const $SkillInvocationRuleGroup = {
  type: 'object',
  required: ['rules'],
  properties: {
    rules: {
      type: 'array',
      description: 'Skill invocation rules',
      items: {
        $ref: '#/components/schemas/SkillInvocationRule',
      },
    },
    relation: {
      type: 'string',
      description: 'Group relation',
      default: 'regular',
      $ref: '#/components/schemas/InvocationRuleGroupRelation',
    },
  },
} as const;

export const $SkillInvocationConfig = {
  type: 'object',
  properties: {
    input: {
      description: 'Skill input rule group',
      $ref: '#/components/schemas/SkillInvocationRuleGroup',
    },
    context: {
      description: 'Skill context rule group',
      $ref: '#/components/schemas/SkillInvocationRuleGroup',
    },
  },
} as const;

export const $SkillJobStatus = {
  type: 'string',
  description: 'Skill job status',
  enum: ['scheduling', 'running', 'finish', 'failed'],
} as const;

export const $InvokeSkillRequest = {
  type: 'object',
  properties: {
    input: {
      description: 'Skill input',
      $ref: '#/components/schemas/SkillInput',
    },
    context: {
      description: 'Skill invocation context',
      $ref: '#/components/schemas/SkillContext',
    },
    tplConfig: {
      description: 'Skill template config',
      $ref: '#/components/schemas/SkillTemplateConfig',
    },
    skillId: {
      type: 'string',
      description: 'Skill instance ID to invoke (if not provided, skill scheduler will be used)',
    },
    convId: {
      description: 'Conversation ID (will add messages to this conversation if provided)',
      type: 'string',
      example: 'cv-g30e1b80b5g1itbemc0g5jj3',
    },
    createConvParam: {
      description: 'Create conversation parameters',
      $ref: '#/components/schemas/CreateConversationRequest',
    },
    triggerId: {
      description: "Trigger ID (typically you don't need to provide this)",
      type: 'string',
    },
  },
} as const;

export const $InvokeSkillResponse = {
  allOf: [
    {
      $ref: '#/components/schemas/BaseResponse',
    },
    {
      type: 'object',
      properties: {
        jobId: {
          type: 'string',
          description: 'Skill job ID',
        },
      },
    },
  ],
} as const;

export const $ListSkillTriggerResponse = {
  allOf: [
    {
      $ref: '#/components/schemas/BaseResponse',
    },
    {
      type: 'object',
      properties: {
        data: {
          type: 'array',
          description: 'Skill trigger list',
          items: {
            $ref: '#/components/schemas/SkillTrigger',
          },
        },
      },
    },
  ],
} as const;

export const $SkillTriggerCreateParam = {
  type: 'object',
  required: ['skillId', 'displayName', 'triggerType'],
  properties: {
    skillId: {
      type: 'string',
      description: 'Skill ID',
      example: 'sk-g30e1b80b5g1itbemc0g5jj3',
    },
    displayName: {
      type: 'string',
      description: 'Trigger display name',
      example: 'My trigger',
    },
    triggerType: {
      description: 'Trigger type',
      $ref: '#/components/schemas/SkillTriggerType',
    },
    simpleEventName: {
      description: 'Simple event name (only required when trigger type is `simpleEvent`)',
      $ref: '#/components/schemas/SimpleEventName',
    },
    timerConfig: {
      description: 'Timer config (only required when trigger type is `timer`)',
      $ref: '#/components/schemas/TimerTriggerConfig',
    },
    input: {
      description: 'Skill input',
      $ref: '#/components/schemas/SkillInput',
    },
    context: {
      description: 'Skill invocation context',
      $ref: '#/components/schemas/SkillContext',
    },
    enabled: {
      type: 'boolean',
      description: 'Whether this trigger is enabled',
    },
  },
} as const;

export const $CreateSkillTriggerRequest = {
  type: 'object',
  required: ['triggerList'],
  properties: {
    triggerList: {
      type: 'array',
      description: 'Skill triggers to upsert',
      items: {
        $ref: '#/components/schemas/SkillTriggerCreateParam',
      },
    },
  },
} as const;

export const $CreateSkillTriggerResponse = {
  allOf: [
    {
      $ref: '#/components/schemas/BaseResponse',
    },
    {
      type: 'object',
      properties: {
        data: {
          type: 'array',
          description: 'Skill trigger list',
          items: {
            $ref: '#/components/schemas/SkillTrigger',
          },
        },
      },
    },
  ],
} as const;

export const $UpdateSkillTriggerRequest = {
  allOf: [
    {
      $ref: '#/components/schemas/SkillTriggerCreateParam',
    },
    {
      type: 'object',
      required: ['triggerId'],
      properties: {
        triggerId: {
          type: 'string',
          description: 'Trigger ID',
          example: 'tr-g30e1b80b5g1itbemc0g5jj3',
        },
      },
    },
  ],
} as const;

export const $UpdateSkillTriggerResponse = {
  allOf: [
    {
      $ref: '#/components/schemas/BaseResponse',
    },
    {
      type: 'object',
      properties: {
        data: {
          description: 'Updated skill trigger',
          $ref: '#/components/schemas/SkillTrigger',
        },
      },
    },
  ],
} as const;

export const $DeleteSkillTriggerRequest = {
  type: 'object',
  required: ['triggerId'],
  properties: {
    triggerId: {
      type: 'string',
      description: 'Trigger ID to delete',
    },
  },
} as const;

export const $ListSkillJobsResponse = {
  allOf: [
    {
      $ref: '#/components/schemas/BaseResponse',
    },
    {
      type: 'object',
      properties: {
        data: {
          type: 'array',
          description: 'Skill job list',
          items: {
            $ref: '#/components/schemas/SkillJob',
          },
        },
      },
    },
  ],
} as const;

export const $GetSkillJobDetailResponse = {
  allOf: [
    {
      $ref: '#/components/schemas/BaseResponse',
    },
    {
      type: 'object',
      properties: {
        data: {
          description: 'Skill job',
          $ref: '#/components/schemas/SkillJob',
        },
      },
    },
  ],
} as const;

export const $CreateConversationRequest = {
  type: 'object',
  properties: {
    title: {
      type: 'string',
      description: 'Conversation title',
      example: 'My Conversation',
    },
    locale: {
      type: 'string',
      description: 'Conversation locale',
      example: 'en',
    },
    origin: {
      type: 'string',
      description: 'Origin page host',
      example: 'https://refly.ai',
    },
    originPageTitle: {
      type: 'string',
      description: 'Origin page title',
      example: 'Refly | Where knowledge thrives',
    },
    originPageUrl: {
      type: 'string',
      description: 'Origin page url',
      example: 'https://refly.ai/knowledge-base',
    },
  },
} as const;

export const $CreateConversationResponse = {
  allOf: [
    {
      $ref: '#/components/schemas/BaseResponse',
    },
    {
      type: 'object',
      properties: {
        data: {
          type: 'object',
          description: 'Created conversation',
          $ref: '#/components/schemas/Conversation',
        },
      },
    },
  ],
} as const;

export const $ListConversationResponse = {
  allOf: [
    {
      $ref: '#/components/schemas/BaseResponse',
    },
    {
      type: 'object',
      properties: {
        data: {
          type: 'array',
          description: 'Conversation list',
          items: {
            $ref: '#/components/schemas/Conversation',
          },
        },
      },
    },
  ],
} as const;

export const $ChatRequest = {
  type: 'object',
  properties: {
    task: {
      description: 'chat task config',
      $ref: '#/components/schemas/ChatTask',
    },
  },
} as const;

export const $GetConversationDetailResponse = {
  allOf: [
    {
      $ref: '#/components/schemas/BaseResponse',
    },
    {
      type: 'object',
      properties: {
        data: {
          type: 'object',
          description: 'Conversation data',
          $ref: '#/components/schemas/Conversation',
        },
      },
    },
  ],
} as const;

export const $UpdateUserSettingsRequest = {
  type: 'object',
  properties: {
    uiLocale: {
      type: 'string',
      description: 'UI locale',
      example: 'en',
    },
    outputLocale: {
      type: 'string',
      description: 'Output locale',
      example: 'en',
    },
  },
} as const;

export const $SearchDomain = {
  type: 'string',
  enum: ['resource', 'note', 'collection', 'conversation', 'skill'],
} as const;

export const $SearchMode = {
  type: 'string',
  enum: ['keyword', 'vector', 'hybrid'],
} as const;

export const $SearchRequest = {
  type: 'object',
  required: ['query'],
  properties: {
    query: {
      type: 'string',
      description: 'Search query (if empty, return last updated data)',
    },
    scope: {
      type: 'string',
      description: 'Search scope',
      enum: ['user', 'public'],
      default: 'user',
    },
    domains: {
      type: 'array',
      description: 'Search domains (if not specified, return all domains)',
      items: {
        $ref: '#/components/schemas/SearchDomain',
      },
    },
    mode: {
      type: 'string',
      description: 'Search mode',
      $ref: '#/components/schemas/SearchMode',
      default: 'keyword',
    },
    limit: {
      type: 'number',
      description: 'Search result limit for each domain',
      default: 5,
    },
  },
} as const;

export const $SearchResultMeta = {
  type: 'object',
  properties: {
    resourceType: {
      type: 'string',
      description: 'Resource type',
      $ref: '#/components/schemas/ResourceType',
    },
    resourceMeta: {
      type: 'object',
      description: 'Resource metadata',
      $ref: '#/components/schemas/ResourceMeta',
    },
    collectionId: {
      type: 'string',
      description: 'Collection ID',
    },
  },
} as const;

export const $SearchResult = {
  type: 'object',
  required: ['id', 'domain', 'title'],
  properties: {
    id: {
      type: 'string',
      description: 'Search result ID to navigate to',
    },
    domain: {
      description: 'Search result domain',
      $ref: '#/components/schemas/SearchDomain',
    },
    title: {
      type: 'string',
      description: 'Search result title',
    },
    content: {
      type: 'array',
      description: 'Search result content list with highlight marks',
      items: {
        type: 'string',
      },
    },
    metadata: {
      description: 'Search result metadata',
      $ref: '#/components/schemas/SearchResultMeta',
    },
    createdAt: {
      type: 'string',
      format: 'date-time',
      description: 'Data creation time',
    },
    updatedAt: {
      type: 'string',
      format: 'date-time',
      description: 'Collection creation time',
    },
  },
} as const;

export const $SearchResponse = {
  allOf: [
    {
      $ref: '#/components/schemas/BaseResponse',
    },
    {
      type: 'object',
      properties: {
        data: {
          type: 'array',
          description: 'Search result',
          items: {
            $ref: '#/components/schemas/SearchResult',
          },
        },
      },
    },
  ],
} as const;

export const $ScrapeWeblinkRequest = {
  type: 'object',
  required: ['url'],
  properties: {
    url: {
      type: 'string',
      description: 'Weblink URL',
    },
  },
} as const;

export const $ScrapeWeblinkResult = {
  type: 'object',
  properties: {
    title: {
      type: 'string',
      description: 'Weblink title',
    },
    description: {
      type: 'string',
      description: 'Weblink description',
    },
    image: {
      type: 'string',
      description: 'Weblink image',
    },
  },
} as const;

export const $ScrapeWeblinkResponse = {
  allOf: [
    {
      $ref: '#/components/schemas/BaseResponse',
    },
    {
      type: 'object',
      properties: {
        data: {
          description: 'Weblink scrape result',
          $ref: '#/components/schemas/ScrapeWeblinkResult',
        },
      },
    },
  ],
} as const;

export const $UploadRequest = {
  type: 'object',
  required: ['file'],
  properties: {
    file: {
      type: 'string',
      format: 'binary',
      description: 'File to upload',
    },
  },
} as const;

export const $UploadResponse = {
  allOf: [
    {
      $ref: '#/components/schemas/BaseResponse',
    },
    {
      type: 'object',
      properties: {
        data: {
          type: 'object',
          description: 'File upload result',
          properties: {
            url: {
              type: 'string',
              description: 'File URL',
            },
          },
        },
      },
    },
  ],
} as const;
