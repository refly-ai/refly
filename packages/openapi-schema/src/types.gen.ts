// This file is auto-generated by @hey-api/openapi-ts

/**
 * Refly user
 */
export type User = {
  /**
   * UID
   */
  uid: string;
  /**
   * UI locale
   */
  uiLocale?: string;
  /**
   * Output locale
   */
  outputLocale?: string;
  /**
   * Subscription plan ID
   */
  planId?: string;
};

/**
 * Resource metadata
 */
export type ResourceMeta = {
  /**
   * Weblink URL
   */
  url?: string;
  /**
   * Weblink title
   */
  title?: string;
};

/**
 * Resource type
 */
export type ResourceType = 'weblink' | 'text' | 'note';

export type Resource = {
  /**
   * Resource ID (empty if it's external)
   */
  resourceId: string;
  /**
   * Resource type
   */
  resourceType: ResourceType;
  /**
   * Resource title
   */
  title: string;
  /**
   * Resource metadata
   */
  data?: ResourceMeta;
  /**
   * Resource index status
   */
  indexStatus?: IndexStatus;
  /**
   * Whether this resource is public
   */
  isPublic?: boolean;
  /**
   * Collection creation time
   */
  createdAt: string;
  /**
   * Collection update time
   */
  updatedAt: string;
  /**
   * Preview content for this resource
   */
  contentPreview?: string;
  /**
   * Document content for this resource (only returned in getNoteDetail API)
   */
  content?: string;
  /**
   * Collections this resource belongs to (only returned in getResourceDetail API)
   */
  collections?: Array<Collection>;
};

export type Note = {
  /**
   * Note ID
   */
  noteId: string;
  /**
   * Note title
   */
  title: string;
  /**
   * Note content preview
   */
  contentPreview?: string;
  /**
   * Full note content (only returned in detail api)
   */
  content?: string;
  /**
   * Whether this note is read-only
   */
  readOnly: boolean;
  /**
   * Whether this note is public
   */
  isPublic: boolean;
  /**
   * Note creation time
   */
  createdAt: string;
  /**
   * Note update time
   */
  updatedAt: string;
};

export type Collection = {
  /**
   * Collection ID
   */
  collectionId: string;
  /**
   * Collection title
   */
  title: string;
  /**
   * Collection description
   */
  description?: string;
  /**
   * Whether this collection is public
   */
  isPublic?: boolean;
  /**
   * Collection creation time
   */
  createdAt: string;
  /**
   * Collection update time
   */
  updatedAt: string;
  /**
   * Collection resources (only returned in detail API)
   */
  resources?: Array<Resource>;
};

/**
 * Entity type
 */
export type EntityType = 'resource' | 'collection' | 'note';

/**
 * Entity
 */
export type Entity = {
  /**
   * Entity ID
   */
  entityId?: string;
  /**
   * Entity type
   */
  entityType?: EntityType;
};

/**
 * Label class
 */
export type LabelClass = {
  /**
   * Label class ID
   */
  labelClassId: string;
  /**
   * Label class name
   */
  name: string;
  /**
   * Label class display name
   */
  displayName: string;
  /**
   * Label icon
   */
  icon?: Icon;
  /**
   * Label creation instruction prompt
   */
  prompt?: string;
  /**
   * Label class creation time
   */
  createdAt: string;
  /**
   * Label class update time
   */
  updatedAt: string;
};

/**
 * Label instances related to resources, collections, etc.
 */
export type LabelInstance = {
  /**
   * Label instance ID
   */
  labelId: string;
  /**
   * Label class ID
   */
  labelClassId: string;
  /**
   * Label class
   */
  labelClass?: LabelClass;
  /**
   * Label value
   */
  value: string;
};

/**
 * Data input mode
 */
export type InputMode = 'input' | 'inputNumber' | 'inputTextArea' | 'select' | 'multiSelect' | 'radio';

/**
 * Config scope
 */
export type ConfigScope = Array<'runtime' | 'template'>;

/**
 * Select option
 */
export type SelectOption = {
  /**
   * Option value
   */
  value: string;
  /**
   * Option label (key is locale, value is label)
   */
  labelDict?: {
    [key: string]: string;
  };
  /**
   * Whether this option is disabled
   */
  disabled?: boolean;
};

/**
 * Dynamic config item
 */
export type DynamicConfigItem = {
  /**
   * Config key
   */
  key: string;
  /**
   * Config input mode
   */
  inputMode: InputMode;
  /**
   * Specifies whether this config is required and in which contexts
   */
  required?: {
    /**
     * Whether this config is required
     */
    value?: boolean;
    /**
     * The contexts in which the requirement applies
     */
    configScope?: ConfigScope;
  };
  /**
   * Config label (key is locale, value is label)
   */
  labelDict: {
    [key: string]: string;
  };
  /**
   * Config description (key is locale, value is description)
   */
  descriptionDict: {
    [key: string]: string;
  };
  /**
   * Default value
   */
  defaultValue?: number | string | boolean | Array<string>;
  /**
   * Config options
   */
  options?: Array<SelectOption>;
};

/**
 * Dynamic config value
 */
export type DynamicConfigValue = {
  /**
   * Config key label
   */
  label: string;
  /**
   * Config value
   */
  value: string | number | boolean | Array<string>;
  /**
   * Config display value
   */
  displayValue: string;
};

/**
 * Skill template config schema
 */
export type SkillTemplateConfigSchema = {
  /**
   * Config items
   */
  items: Array<DynamicConfigItem>;
};

/**
 * Icon type
 */
export type IconType = 'emoji' | 'image';

/**
 * Icon
 */
export type Icon = {
  /**
   * Icon type
   */
  type: IconType;
  /**
   * Icon value
   */
  value: string;
};

/**
 * Skill template
 */
export type SkillTemplate = {
  /**
   * Skill template name
   */
  name: string;
  /**
   * Skill template display name
   */
  displayName: string;
  /**
   * Skill template description
   */
  description?: string;
  /**
   * Skill template icon
   */
  icon?: Icon;
  /**
   * Skill template config schema
   */
  configSchema?: SkillTemplateConfigSchema;
};

/**
 * Skill trigger type
 */
export type SkillTriggerType = 'timer' | 'simpleEvent';

/**
 * Simple event name
 */
export type SimpleEventName = 'onResourceReady';

export type SimpleEvent = {
  /**
   * Simple event name
   */
  name: SimpleEventName;
  /**
   * Simple event display name (key is locale, value is display name)
   */
  displayName: {
    [key: string]: unknown;
  };
  /**
   * Context keys to provide
   */
  provideContextKeys: Array<SkillContextKey>;
};

/**
 * Timer interval
 */
export type TimerInterval = 'hour' | 'day' | 'week' | 'month' | 'year';

export type TimerTriggerConfig = {
  /**
   * Time to run
   */
  datetime: string;
  /**
   * Repeat interval
   */
  repeatInterval?: TimerInterval;
};

/**
 * Skill triggers
 */
export type SkillTrigger = {
  /**
   * Skill ID
   */
  skillId: string;
  /**
   * Trigger display name
   */
  displayName: string;
  /**
   * Trigger ID
   */
  triggerId: string;
  /**
   * Trigger type
   */
  triggerType: SkillTriggerType;
  /**
   * Simple event name (only required when trigger type is `simpleEvent`)
   */
  simpleEventName?: SimpleEventName;
  /**
   * Timer config (only required when trigger type is `timer`)
   */
  timerConfig?: TimerTriggerConfig;
  /**
   * Skill input
   */
  input?: SkillInput;
  /**
   * Skill context
   */
  context?: SkillContext;
  /**
   * Skill template config
   */
  tplConfig?: SkillTemplateConfig;
  /**
   * Trigger enabled
   */
  enabled: boolean;
  /**
   * Trigger creation time
   */
  createdAt: string;
  /**
   * Trigger update time
   */
  updatedAt: string;
};

/**
 * Skill metadata
 */
export type SkillMeta = {
  /**
   * Skill display name
   */
  displayName: string;
  /**
   * Skill template name
   */
  tplName?: string;
  /**
   * Skill ID
   */
  skillId?: string;
  /**
   * Skill icon
   */
  icon?: Icon;
};

/**
 * Skill template config (key is config item key, value is config value)
 */
export type SkillTemplateConfig = {
  [key: string]: DynamicConfigValue;
};

/**
 * Skill
 */
export type SkillInstance = SkillMeta & {
  /**
   * Skill instance description
   */
  description?: string;
  /**
   * Skill instance prompt hint
   */
  promptHint?: string;
  /**
   * Skill template config
   */
  tplConfig?: SkillTemplateConfig;
  /**
   * Skill template config schema
   */
  tplConfigSchema?: SkillTemplateConfigSchema;
  /**
   * Skill invocation config
   */
  invocationConfig: SkillInvocationConfig;
  /**
   * Skill pinned time
   */
  pinnedAt?: string;
  /**
   * Skill creation time
   */
  createdAt: string;
  /**
   * Skill update time
   */
  updatedAt: string;
};

/**
 * Skill job record
 */
export type SkillJob = {
  /**
   * Job ID
   */
  jobId: string;
  /**
   * Skill ID
   */
  skillId: string;
  /**
   * Skill display name
   */
  skillDisplayName: string;
  /**
   * Skill job status
   */
  jobStatus: SkillJobStatus;
  /**
   * Related conversation
   */
  conversation?: Conversation;
  /**
   * Skill trigger
   */
  trigger?: SkillTrigger;
  /**
   * Skill input
   */
  input: SkillInput;
  /**
   * Skill context
   */
  context: SkillContext;
  /**
   * Skill template config
   */
  tplConfig?: SkillTemplateConfig;
  /**
   * Job creation time
   */
  createdAt: string;
  /**
   * Job update time
   */
  updatedAt: string;
  /**
   * Job messages (only returned in detail API)
   */
  messages?: Array<ChatMessage>;
};

/**
 * Source metadata
 */
export type SourceMeta = {
  /**
   * Source URL
   * @deprecated
   */
  source?: string;
  /**
   * Source title
   * @deprecated
   */
  title?: string;
  /**
   * Source publish time
   */
  publishedTime?: string;
  /**
   * Related entity ID
   */
  entityId?: string;
  /**
   * Related entity type
   */
  entityType?: string;
};

/**
 * Source selection
 */
export type SourceSelection = {
  /**
   * Selected xPath
   * @deprecated
   */
  xPath?: string;
  /**
   * Selected content
   */
  content: string;
  /**
   * Selection type
   */
  type: 'text' | 'table' | 'link' | 'image' | 'video' | 'audio';
};

/**
 * Selection type
 */
export type type = 'text' | 'table' | 'link' | 'image' | 'video' | 'audio';

/**
 * Source of the message
 */
export type Source = {
  /**
   * Source URL
   */
  url?: string;
  /**
   * Source title
   */
  title?: string;
  /**
   * Source content
   */
  pageContent: string;
  /**
   * Relativity score
   */
  score?: number;
  /**
   * Source metadata
   */
  metadata?: SourceMeta;
  /**
   * Source selections
   */
  selections?: Array<SourceSelection>;
};

/**
 * Chat message type
 */
export type MessageType = 'ai' | 'human' | 'system';

/**
 * Model tier
 */
export type ModelTier = 't1' | 't2';

/**
 * Token usage item
 */
export type TokenUsageItem = {
  /**
   * Model tier
   */
  tier: string;
  /**
   * Model name
   */
  modelName: string;
  /**
   * Model provider
   */
  modelProvider: string;
  /**
   * Input tokens
   */
  inputTokens: number;
  /**
   * Output tokens
   */
  outputTokens: number;
};

/**
 * Chat message
 */
export type ChatMessage = {
  /**
   * Message ID
   */
  readonly msgId: string;
  /**
   * Skill job ID
   */
  jobId?: string;
  /**
   * Message type
   */
  type: MessageType;
  /**
   * Message content
   */
  content: string;
  /**
   * Skill metadata
   */
  skillMeta?: SkillMeta;
  /**
   * Message logs
   */
  logs?: Array<string>;
  /**
   * Structured data output
   */
  structuredData?: {
    [key: string]: unknown;
  };
  /**
   * Errors
   */
  errors?: Array<string>;
  /**
   * Related questions
   * @deprecated
   */
  relatedQuestions?: Array<string>;
  /**
   * Related sources
   * @deprecated
   */
  sources?: Array<Source>;
  /**
   * Token usage
   */
  tokenUsage?: Array<TokenUsageItem>;
  /**
   * Selected weblink config (JSON)
   */
  selectedWeblinkConfig?: string;
  /**
   * Message creation time
   */
  createdAt?: string;
  /**
   * Message update time
   */
  updatedAt?: string;
};

/**
 * Conversation list item
 */
export type Conversation = {
  /**
   * Conversation ID
   */
  convId?: string;
  /**
   * Conversation title
   */
  title?: string;
  /**
   * Last message content
   */
  lastMessage?: string;
  /**
   * Number of chat messages in this conversation
   */
  messageCount?: number;
  /**
   * Conversation locale
   */
  locale?: string;
  /**
   * Origin page host
   */
  origin?: string;
  /**
   * Origin page title
   */
  originPageTitle?: string;
  /**
   * Origin page url
   */
  originPageUrl?: string;
  /**
   * Conversation creation time
   */
  createdAt?: string;
  /**
   * Conversation creation time
   */
  updatedAt?: string;
  /**
   * Conversation messages (only returned for getConversationDetail api)
   */
  messages?: Array<ChatMessage>;
};

/**
 * Chat task type
 */
export type ChatTaskType =
  | 'chat'
  | 'genTitle'
  | 'quickAction'
  | 'searchEnhanceKeyword'
  | 'searchEnhanceSummarize'
  | 'searchEnhanceAsk';

/**
 * Content retrieval filter
 */
export type RetrieveFilter = {
  /**
   * List of web links
   * @deprecated
   */
  weblinkList?: Array<Source>;
  /**
   * List of URLs to retrieve
   */
  urls?: Array<string>;
  /**
   * List of resource IDs to retrieve
   */
  resourceIds?: Array<string>;
  /**
   * List of collection IDs to retrieve
   */
  collectionIds?: Array<string>;
};

/**
 * Chat payload
 */
export type ChatPayload = {
  /**
   * Question
   */
  question: string;
  /**
   * Content retrieval filter
   */
  filter?: RetrieveFilter;
};

/**
 * Quick action type
 */
export type QuickActionType = 'selection' | 'summary';

/**
 * Quick action task payload
 */
export type QuickActionTaskPayload = {
  /**
   * Question
   */
  question?: string;
  /**
   * Quick action type
   */
  actionType?: QuickActionType;
  /**
   * Prompt for this action
   */
  actionPrompt?: string;
  /**
   * Reference for this action
   */
  reference?: string;
  /**
   * Content retrieval filter
   */
  filter?: RetrieveFilter;
};

/**
 * Chat task
 */
export type ChatTask = {
  /**
   * Task type
   */
  taskType: ChatTaskType;
  /**
   * Whether to dry run the task
   */
  dryRun?: boolean;
  /**
   * Conversation ID, a new conversation will be created if empty or non-existent
   */
  convId?: string;
  /**
   * Create conversation parameters
   */
  createConvParam?: CreateConversationRequest;
  /**
   * Chat locale
   */
  locale?: string;
  /**
   * Chat data
   */
  data?: ChatPayload | QuickActionTaskPayload;
};

/**
 * Chat task response
 */
export type ChatTaskResponse = {
  /**
   * List of web links
   */
  sources: Array<Source>;
  /**
   * Chat Answer
   */
  answer: string;
  /**
   * Related questions
   */
  relatedQuestions?: Array<string>;
};

/**
 * Resource index status
 */
export type IndexStatus = 'init' | 'wait_parse' | 'wait_index' | 'finish' | 'parse_failed' | 'index_failed';

/**
 * Payment recurring interval
 */
export type SubscriptionInterval = 'monthly' | 'yearly';

/**
 * Subscription plan type
 */
export type SubscriptionPlanType = 'free' | 'pro';

/**
 * Price lookup key
 */
export type PriceLookupKey = 'refly_pro_monthly' | 'refly_pro_yearly';

/**
 * Subscription status
 */
export type SubscriptionStatus =
  | 'active'
  | 'canceled'
  | 'incomplete'
  | 'incomplete_expired'
  | 'past_due'
  | 'paused'
  | 'trialing'
  | 'unpaid';

export type Subscription = {
  /**
   * Subscription ID
   */
  subscriptionId: string;
  /**
   * Lookup key
   */
  lookupKey?: string;
  /**
   * Subscription plan type
   */
  planType: SubscriptionPlanType;
  /**
   * Payment recurring interval
   */
  interval?: SubscriptionInterval;
  /**
   * Subscription status
   */
  status: SubscriptionStatus;
  /**
   * Subscription cancel time
   */
  cancelAt?: string;
};

export type TokenUsageMeter = {
  /**
   * Token usage meter ID
   */
  meterId: string;
  /**
   * User ID
   */
  uid: string;
  /**
   * Subscription ID
   */
  subscriptionId?: string;
  /**
   * Token usage meter start time
   */
  startAt: string;
  /**
   * Token usage meter end time
   */
  endAt?: string;
  /**
   * Token quota (T1)
   */
  t1TokenQuota: number;
  /**
   * Token used (T1)
   */
  t1TokenUsed: number;
  /**
   * Token quota (T2)
   */
  t2TokenQuota: number;
  /**
   * Token used (T2)
   */
  t2TokenUsed: number;
};

export type StorageUsageMeter = {
  /**
   * Storage usage meter ID
   */
  meterId: string;
  /**
   * User ID
   */
  uid: string;
  /**
   * Subscription ID
   */
  subscriptionId?: string;
  /**
   * Object storage quota (in bytes), including resource, note and static files
   */
  objectStorageQuota: string;
  /**
   * Resource storage size in use (in bytes)
   */
  resourceSize: string;
  /**
   * Note storage size in use (in bytes)
   */
  noteSize: string;
  /**
   * Static file storage size in use (in bytes)
   */
  fileSize: string;
  /**
   * Vector storage quota (in bytes)
   */
  vectorStorageQuota: string;
  /**
   * Vector storage size used (in bytes)
   */
  vectorStorageUsed: string;
};

export type UserSettings = {
  /**
   * User ID
   */
  uid: string;
  /**
   * User avatar
   */
  avatar: string;
  /**
   * Username (can only contains letters, numbers, and underscores)
   */
  name: string;
  /**
   * User nickname
   */
  nickname?: string;
  /**
   * User email
   */
  email: string;
  /**
   * Whether email is verified
   */
  emailVerified?: boolean;
  /**
   * User UI locale
   */
  uiLocale?: string;
  /**
   * User output locale
   */
  outputLocale?: string;
  /**
   * Stripe customer ID
   */
  customerId?: string;
  /**
   * User subscription
   */
  subscription?: Subscription;
};

export type GetUserSettingsResponse = BaseResponse & {
  data?: UserSettings;
};

export type BaseResponse = {
  /**
   * Whether the operation was successful
   */
  success: boolean;
  /**
   * Error message
   */
  errMsg?: string;
};

export type UpsertResourceRequest = {
  /**
   * Resource title
   */
  title: string;
  /**
   * Resource type
   */
  resourceType: ResourceType;
  /**
   * Resource ID (only used for update)
   */
  resourceId?: string;
  /**
   * Collection ID (will add to the collection if given)
   */
  collectionId?: string;
  /**
   * Resource metadata
   */
  data?: ResourceMeta;
  /**
   * Resource content (this will be ignored if storageKey was set)
   */
  content?: string;
  /**
   * Whether this resource is public
   */
  isPublic?: boolean;
  /**
   * Whether this resource is read-only
   */
  readOnly?: boolean;
};

export type UpsertResourceResponse = BaseResponse & {
  data?: Resource;
};

export type BatchCreateResourceResponse = BaseResponse & {
  /**
   * Resource list
   */
  data?: Array<Resource>;
};

export type ReindexResourceRequest = {
  /**
   * Resource ID list
   */
  resourceIds: Array<string>;
};

export type ReindexResourceResponse = BaseResponse & {
  /**
   * Resource list
   */
  data?: Array<Resource>;
};

export type DeleteResourceRequest = {
  /**
   * Resource ID to delete
   */
  resourceId: string;
};

export type ListResourceResponse = BaseResponse & {
  /**
   * Resource list
   */
  data?: Array<Resource>;
};

export type GetResourceDetailResponse = BaseResponse & {
  /**
   * Resource data
   */
  data?: Resource;
};

export type ListNoteResponse = BaseResponse & {
  /**
   * Note list
   */
  data?: Array<Note>;
};

export type GetNoteDetailResponse = BaseResponse & {
  /**
   * Note data
   */
  data?: Note;
};

export type UpsertNoteRequest = {
  /**
   * Note title
   */
  title?: string;
  /**
   * Note ID (only used for update)
   */
  noteId?: string;
  /**
   * Whether this note is read-only
   */
  readOnly?: boolean;
  /**
   * Whether this note is public
   */
  isPublic?: boolean;
  /**
   * Note initial content
   */
  initialContent?: string;
};

export type UpsertNoteResponse = BaseResponse & {
  data?: Note;
};

export type DeleteNoteRequest = {
  /**
   * Note ID to delete
   */
  noteId: string;
};

export type UpsertCollectionRequest = {
  /**
   * Collection ID (only used for update)
   */
  collectionId?: string;
  /**
   * Collection title
   */
  title?: string;
  /**
   * Collection description
   */
  description?: string;
  /**
   * Whether this collection is public
   */
  isPublic?: boolean;
};

export type UpsertCollectionResponse = BaseResponse & {
  data?: Collection;
};

export type AddResourceToCollectionRequest = {
  /**
   * Collection ID
   */
  collectionId: string;
  /**
   * Resource ID list
   */
  resourceIds: Array<string>;
};

export type RemoveResourceFromCollectionRequest = {
  /**
   * Collection ID
   */
  collectionId: string;
  /**
   * Resource ID list
   */
  resourceIds: Array<string>;
};

export type DeleteCollectionRequest = {
  /**
   * Collection ID to delete
   */
  collectionId: string;
};

export type ListCollectionResponse = BaseResponse & {
  /**
   * Collection list
   */
  data?: Array<Collection>;
};

export type GetCollectionDetailResponse = BaseResponse & {
  /**
   * Collection data
   */
  data?: Collection;
};

export type ListLabelClassesResponse = BaseResponse & {
  /**
   * Label class list
   */
  data?: Array<LabelClass>;
};

export type CreateLabelClassRequest = {
  /**
   * Label class name
   */
  name: string;
  /**
   * Label display name
   */
  displayName: string;
  /**
   * Label icon
   */
  icon?: Icon;
  /**
   * Label creation instruction prompt
   */
  prompt: string;
};

export type UpdateLabelClassRequest = {
  /**
   * Label class ID
   */
  labelClassId: string;
  /**
   * Label class name
   */
  name?: string;
  /**
   * Label display name
   */
  displayName?: string;
  /**
   * Label icon
   */
  icon?: Icon;
  /**
   * Label creation instruction prompt
   */
  prompt?: string;
};

export type UpsertLabelClassResponse = BaseResponse & {
  /**
   * Label class upserted
   */
  data?: LabelClass;
};

export type DeleteLabelClassRequest = {
  /**
   * Label class ID to delete
   */
  labelClassId: string;
};

export type ListLabelInstancesResponse = BaseResponse & {
  /**
   * Label list
   */
  data?: Array<LabelInstance>;
};

export type CreateLabelInstanceRequest = {
  /**
   * Label class ID
   */
  labelClassId: string;
  /**
   * Label value list
   */
  valueList: Array<string>;
  /**
   * Label entity type
   */
  entityType: EntityType;
  /**
   * Label entity ID
   */
  entityId: string;
};

export type UpdateLabelInstanceRequest = {
  /**
   * Label ID to update
   */
  labelId?: string;
  /**
   * Updated label value
   */
  value?: string;
};

export type UpsertLabelInstanceResponse = BaseResponse & {
  /**
   * Label instance upserted
   */
  data?: Array<LabelInstance>;
};

export type DeleteLabelInstanceRequest = {
  /**
   * Label ID to delete
   */
  labelId: string;
};

export type ListSkillTemplateResponse = BaseResponse & {
  /**
   * Skill template list
   */
  data?: Array<SkillTemplate>;
};

export type ListSkillInstanceResponse = BaseResponse & {
  /**
   * Skill list
   */
  data?: Array<SkillInstance>;
};

export type SkillInstanceCreateParam = {
  /**
   * Skill template name
   */
  tplName?: string;
  /**
   * Skill display name
   */
  displayName: string;
  /**
   * Skill description
   */
  description?: string;
  /**
   * Skill instance icon
   */
  icon?: Icon;
  /**
   * Skill template config
   */
  tplConfig?: SkillTemplateConfig;
};

export type CreateSkillInstanceRequest = {
  /**
   * Skill instances to upsert
   */
  instanceList: Array<SkillInstanceCreateParam>;
};

export type CreateSkillInstanceResponse = BaseResponse & {
  /**
   * Skill instance list
   */
  data?: Array<SkillInstance>;
};

export type UpdateSkillInstanceRequest = {
  /**
   * Skill ID
   */
  skillId: string;
  /**
   * Skill display name
   */
  displayName?: string;
  /**
   * Skill description
   */
  description?: string;
  /**
   * Skill instance icon
   */
  icon?: Icon;
  /**
   * Skill template config
   */
  tplConfig?: SkillTemplateConfig;
};

export type UpdateSkillInstanceResponse = BaseResponse & {
  /**
   * Skill instance list
   */
  data?: SkillInstance;
};

export type PinSkillInstanceRequest = {
  /**
   * Skill ID to pin
   */
  skillId: string;
};

export type UnpinSkillInstanceRequest = {
  /**
   * Skill ID to unpin
   */
  skillId: string;
};

export type DeleteSkillInstanceRequest = {
  /**
   * Skill ID to delete
   */
  skillId: string;
};

/**
 * Skill input
 */
export type SkillInput = {
  /**
   * User query
   */
  query?: string;
};

/**
 * Skill context resource item
 */
export type SkillContextResourceItem = {
  /**
   * Resource ID (if empty, this will be considered as external resource)
   */
  resourceId?: string;
  /**
   * Resource
   */
  resource?: Resource;
  /**
   * Resource context metadata
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * Skill context collection item
 */
export type SkillContextCollectionItem = {
  /**
   * Collection ID
   */
  collectionId?: string;
  /**
   * Collection
   */
  collection?: Collection;
  /**
   * Collection context metadata
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * Skill context note item
 */
export type SkillContextNoteItem = {
  /**
   * Note ID
   */
  noteId?: string;
  /**
   * Note
   */
  note?: Note;
  /**
   * Note context metadata
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * Skill context content item
 */
export type SkillContextContentItem = {
  /**
   * Content
   */
  content: string;
  /**
   * Content context metadata
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * Skill context url item
 */
export type SkillContextUrlItem = {
  /**
   * URL
   */
  url: string;
  /**
   * URL context metadata
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * Skill invocation context
 */
export type SkillContext = {
  /**
   * Context resources
   */
  resources?: Array<SkillContextResourceItem>;
  /**
   * Context collections
   */
  collections?: Array<SkillContextCollectionItem>;
  /**
   * Context notes
   */
  notes?: Array<SkillContextNoteItem>;
  /**
   * Context content list
   */
  contentList?: Array<SkillContextContentItem>;
  /**
   * List of URLs
   */
  urls?: Array<SkillContextUrlItem>;
};

export type SkillContextKey = 'resources' | 'collections' | 'notes' | 'contentList' | 'urls';

export type SelectionKey =
  | 'noteSelection'
  | 'resourceSelection'
  | 'extensionWeblinkSelection'
  | 'noteCursorSelection'
  | 'noteBeforeCursorSelection'
  | 'noteAfterCursorSelection';

export type SkillContextRule = {
  /**
   * Context key
   */
  key: SkillContextKey;
  /**
   * Maximum number of items
   */
  limit?: number;
  /**
   * Whether this context is required
   */
  required?: boolean;
  /**
   * Preferred selection keys (only applicable when key is `contentList`)
   */
  preferredSelectionKeys?: Array<SelectionKey>;
};

export type ContextRuleGroupRelation = 'regular' | 'mutuallyExclusive';

export type SkillContextRuleGroup = {
  /**
   * Skill context rules
   */
  rules: Array<SkillContextRule>;
  /**
   * Rule group relation
   */
  relation?: ContextRuleGroupRelation;
  /**
   * Preferred context keys
   */
  preferredContextKeys?: Array<SkillContextKey>;
};

export type SkillInvocationConfig = {
  /**
   * Skill context rule group
   */
  context?: SkillContextRuleGroup;
};

/**
 * Skill job status
 */
export type SkillJobStatus = 'scheduling' | 'running' | 'finish' | 'failed';

export type InvokeSkillRequest = {
  /**
   * Skill input
   */
  input?: SkillInput;
  /**
   * Skill invocation context
   */
  context?: SkillContext;
  /**
   * Skill template config
   */
  tplConfig?: SkillTemplateConfig;
  /**
   * Skill instance ID to invoke (if not provided, skill scheduler will be used)
   */
  skillId?: string;
  /**
   * Conversation ID (will add messages to this conversation if provided)
   */
  convId?: string;
  /**
   * Selected output locale
   */
  locale?: string;
  /**
   * Selected model
   */
  modelName?: string;
  /**
   * Whether to enable in-place editing
   */
  enableEdit?: boolean;
  /**
   * Create conversation parameters
   */
  createConvParam?: CreateConversationRequest;
  /**
   * Skill job ID (if not provided, a new job will be created)
   */
  jobId?: string;
  /**
   * Trigger ID (typically you don't need to provide this)
   */
  triggerId?: string;
};

export type InvokeSkillResponse = BaseResponse & {
  /**
   * Skill job ID
   */
  jobId?: string;
};

export type ListSkillTriggerResponse = BaseResponse & {
  /**
   * Skill trigger list
   */
  data?: Array<SkillTrigger>;
};

export type SkillTriggerCreateParam = {
  /**
   * Skill ID
   */
  skillId: string;
  /**
   * Trigger display name
   */
  displayName: string;
  /**
   * Trigger type
   */
  triggerType: SkillTriggerType;
  /**
   * Simple event name (only required when trigger type is `simpleEvent`)
   */
  simpleEventName?: SimpleEventName;
  /**
   * Timer config (only required when trigger type is `timer`)
   */
  timerConfig?: TimerTriggerConfig;
  /**
   * Skill input
   */
  input?: SkillInput;
  /**
   * Skill invocation context
   */
  context?: SkillContext;
  /**
   * Skill template config
   */
  tplConfig?: SkillTemplateConfig;
  /**
   * Whether this trigger is enabled
   */
  enabled?: boolean;
};

export type CreateSkillTriggerRequest = {
  /**
   * Skill triggers to upsert
   */
  triggerList: Array<SkillTriggerCreateParam>;
};

export type CreateSkillTriggerResponse = BaseResponse & {
  /**
   * Skill trigger list
   */
  data?: Array<SkillTrigger>;
};

export type UpdateSkillTriggerRequest = SkillTriggerCreateParam & {
  /**
   * Trigger ID
   */
  triggerId: string;
};

export type UpdateSkillTriggerResponse = BaseResponse & {
  /**
   * Updated skill trigger
   */
  data?: SkillTrigger;
};

export type DeleteSkillTriggerRequest = {
  /**
   * Trigger ID to delete
   */
  triggerId: string;
};

export type ListSkillJobsResponse = BaseResponse & {
  /**
   * Skill job list
   */
  data?: Array<SkillJob>;
};

export type GetSkillJobDetailResponse = BaseResponse & {
  /**
   * Skill job
   */
  data?: SkillJob;
};

export type CreateConversationRequest = {
  /**
   * Conversation title
   */
  title?: string;
  /**
   * Conversation locale
   */
  locale?: string;
  /**
   * Origin page host
   */
  origin?: string;
  /**
   * Origin page title
   */
  originPageTitle?: string;
  /**
   * Origin page url
   */
  originPageUrl?: string;
};

export type CreateConversationResponse = BaseResponse & {
  /**
   * Created conversation
   */
  data?: Conversation;
};

export type ListConversationResponse = BaseResponse & {
  /**
   * Conversation list
   */
  data?: Array<Conversation>;
};

export type ChatRequest = {
  /**
   * chat task config
   */
  task?: ChatTask;
};

export type GetConversationDetailResponse = BaseResponse & {
  /**
   * Conversation data
   */
  data?: Conversation;
};

export type UpdateUserSettingsRequest = {
  /**
   * User name
   */
  name?: string;
  /**
   * User nickname
   */
  nickname?: string;
  /**
   * UI locale
   */
  uiLocale?: string;
  /**
   * Output locale
   */
  outputLocale?: string;
};

export type CheckSettingsFieldResult = {
  /**
   * Settings field
   */
  field: string;
  /**
   * Settings field value
   */
  value: string;
  /**
   * Whether the field value is available
   */
  available: boolean;
};

export type CheckSettingsFieldResponse = BaseResponse & {
  /**
   * Settings field check result
   */
  data?: CheckSettingsFieldResult;
};

export type CreateCheckoutSessionRequest = {
  /**
   * Price lookup key
   */
  lookupKey: PriceLookupKey;
};

export type CreateCheckoutSessionResponse = BaseResponse & {
  /**
   * Checkout session
   */
  data?: {
    /**
     * Checkout session URL
     */
    url?: string;
  };
};

export type CreatePortalSessionResponse = BaseResponse & {
  /**
   * Portal session
   */
  data?: {
    /**
     * Portal session URL
     */
    url?: string;
  };
};

export type SubscriptionUsageData = {
  /**
   * Token usage meter
   */
  token?: TokenUsageMeter;
  /**
   * Storage usage meter
   */
  storage?: StorageUsageMeter;
};

export type GetSubscriptionUsageResponse = BaseResponse & {
  /**
   * Subscription usage
   */
  data?: SubscriptionUsageData;
};

export type WebSearchRequest = {
  /**
   * Web search query
   */
  query?: string;
  /**
   * Web search locale
   */
  locale?: string;
  /**
   * Web search result limit
   */
  limit?: number;
};

export type WebSearchResult = {
  /**
   * Web search result name
   */
  name?: string;
  /**
   * Web search result url
   */
  url?: string;
  /**
   * Web search result snippet
   */
  snippet?: string;
};

export type WebSearchResponse = BaseResponse & {
  /**
   * Web search results
   */
  data?: Array<WebSearchResult>;
};

/**
 * Search options for internal use
 */
export type SearchOptions = {
  /**
   * Whether to enable reranker
   */
  enableReranker?: boolean;
};

export type SearchDomain = 'resource' | 'note' | 'collection' | 'conversation' | 'skill';

export type SearchMode = 'keyword' | 'vector' | 'hybrid';

export type SearchRequest = {
  /**
   * Search query (if empty, return last updated data)
   */
  query: string;
  /**
   * Search domains (if not specified, return all domains)
   */
  domains?: Array<SearchDomain>;
  /**
   * Search entities
   */
  entities?: Array<Entity>;
  /**
   * Search mode
   */
  mode?: SearchMode;
  /**
   * Search result limit for each domain
   */
  limit?: number;
};

export type SearchResultMeta = {
  /**
   * Resource type
   */
  resourceType?: ResourceType;
  /**
   * Resource metadata
   */
  resourceMeta?: ResourceMeta;
  /**
   * Collection ID
   */
  collectionId?: string;
};

export type SearchResult = {
  /**
   * Search result ID to navigate to
   */
  id: string;
  /**
   * Search result domain
   */
  domain: SearchDomain;
  /**
   * Search result title
   */
  title: string;
  /**
   * Search result content list with highlight marks
   */
  content?: Array<string>;
  /**
   * Search result metadata
   */
  metadata?: SearchResultMeta;
  /**
   * Data creation time
   */
  createdAt?: string;
  /**
   * Collection creation time
   */
  updatedAt?: string;
};

export type SearchResponse = BaseResponse & {
  /**
   * Search result
   */
  data?: Array<SearchResult>;
};

export type ScrapeWeblinkRequest = {
  /**
   * Weblink URL
   */
  url: string;
};

export type ScrapeWeblinkResult = {
  /**
   * Weblink title
   */
  title?: string;
  /**
   * Weblink description
   */
  description?: string;
  /**
   * Weblink image
   */
  image?: string;
};

export type ScrapeWeblinkResponse = BaseResponse & {
  /**
   * Weblink scrape result
   */
  data?: ScrapeWeblinkResult;
};

export type UploadRequest = {
  /**
   * File to upload
   */
  file: Blob | File;
  /**
   * Entity ID
   */
  entityId: string;
  /**
   * Entity type
   */
  entityType: EntityType;
};

export type UploadResponse = BaseResponse & {
  /**
   * File upload result
   */
  data?: {
    /**
     * File URL
     */
    url?: string;
  };
};

export type ModelInfo = {
  /**
   * Model name
   */
  name: string;
  /**
   * Model label
   */
  label: string;
  /**
   * Model provider
   */
  provider: string;
  /**
   * Model tier
   */
  tier: string;
  /**
   * Model context limit
   */
  contextLimit?: number;
};

export type ListModelsResponse = BaseResponse & {
  /**
   * Model list
   */
  data?: Array<ModelInfo>;
};

export type DocumentInterface = {
  /**
   * An optional identifier for the document. Ideally this should be unique across the document collection and formatted as a UUID.
   */
  id?: string;
  /**
   * The main content of the document.
   */
  pageContent?: string;
  /**
   * Metadata associated with the document.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

export type InMemoryIndexContentResponse = BaseResponse & {
  data?: {
    [key: string]: unknown;
  } | null;
};

export type InMemorySearchResponse = BaseResponse & {
  data?: Array<DocumentInterface>;
};

export type ListResourcesData = {
  query?: {
    /**
     * Page number
     */
    page?: number;
    /**
     * Page size
     */
    pageSize?: number;
    /**
     * Resource ID
     */
    resourceId?: string;
    /**
     * Resource type
     */
    resourceType?: ResourceType;
  };
};

export type ListResourcesResponse = ListResourceResponse;

export type ListResourcesError = unknown;

export type GetResourceDetailData = {
  query: {
    /**
     * Resource ID to retrieve
     */
    resourceId: string;
  };
};

export type GetResourceDetailResponse2 = GetResourceDetailResponse;

export type GetResourceDetailError = unknown;

export type UpdateResourceData = {
  /**
   * Resource update request
   */
  body: UpsertResourceRequest;
};

export type UpdateResourceResponse = UpsertResourceResponse;

export type UpdateResourceError = unknown;

export type CreateResourceData = {
  /**
   * Resource creation request
   */
  body: UpsertResourceRequest;
};

export type CreateResourceResponse = UpsertResourceResponse;

export type CreateResourceError = unknown;

export type BatchCreateResourceData = {
  /**
   * Resource creation request
   */
  body: Array<UpsertResourceRequest>;
};

export type BatchCreateResourceResponse2 = UpsertResourceResponse;

export type BatchCreateResourceError = unknown;

export type ReindexResourceData = {
  body: ReindexResourceRequest;
};

export type ReindexResourceResponse2 = ReindexResourceResponse;

export type ReindexResourceError = unknown;

export type DeleteResourceData = {
  body: DeleteResourceRequest;
};

export type DeleteResourceResponse = BaseResponse;

export type DeleteResourceError = unknown;

export type ListNotesData = {
  query?: {
    /**
     * Page number
     */
    page?: number;
    /**
     * Page size
     */
    pageSize?: number;
  };
};

export type ListNotesResponse = ListNoteResponse;

export type ListNotesError = unknown;

export type GetNoteDetailData = {
  query: {
    /**
     * Note ID to retrieve
     */
    noteId: string;
  };
};

export type GetNoteDetailResponse2 = GetNoteDetailResponse;

export type GetNoteDetailError = unknown;

export type UpdateNoteData = {
  /**
   * Note update request
   */
  body: UpsertNoteRequest;
};

export type UpdateNoteResponse = UpsertNoteResponse;

export type UpdateNoteError = unknown;

export type CreateNoteData = {
  /**
   * Note creation request
   */
  body: UpsertNoteRequest;
};

export type CreateNoteResponse = UpsertNoteResponse;

export type CreateNoteError = unknown;

export type DeleteNoteData = {
  body: DeleteNoteRequest;
};

export type DeleteNoteResponse = BaseResponse;

export type DeleteNoteError = unknown;

export type ListCollectionsData = {
  query?: {
    /**
     * Page number
     */
    page?: number;
    /**
     * Page size
     */
    pageSize?: number;
  };
};

export type ListCollectionsResponse = ListCollectionResponse;

export type ListCollectionsError = unknown;

export type GetCollectionDetailData = {
  query: {
    /**
     * Collection ID to retrieve
     */
    collectionId: string;
  };
};

export type GetCollectionDetailResponse2 = GetCollectionDetailResponse;

export type GetCollectionDetailError = unknown;

export type UpdateCollectionData = {
  /**
   * Collection update request
   */
  body: UpsertCollectionRequest;
};

export type UpdateCollectionResponse = UpsertCollectionResponse;

export type UpdateCollectionError = unknown;

export type CreateCollectionData = {
  /**
   * Collection creation request
   */
  body: UpsertCollectionRequest;
};

export type CreateCollectionResponse = UpsertCollectionResponse;

export type CreateCollectionError = unknown;

export type AddResourceToCollectionData = {
  body: AddResourceToCollectionRequest;
};

export type AddResourceToCollectionResponse = BaseResponse;

export type AddResourceToCollectionError = unknown;

export type RemoveResourceFromCollectionData = {
  body: RemoveResourceFromCollectionRequest;
};

export type RemoveResourceFromCollectionResponse = BaseResponse;

export type RemoveResourceFromCollectionError = unknown;

export type DeleteCollectionData = {
  body: DeleteCollectionRequest;
};

export type DeleteCollectionResponse = BaseResponse;

export type DeleteCollectionError = unknown;

export type ListLabelClassesData = {
  query?: {
    /**
     * Page number
     */
    page?: number;
    /**
     * Page size
     */
    pageSize?: number;
  };
};

export type ListLabelClassesResponse2 = ListLabelClassesResponse;

export type ListLabelClassesError = unknown;

export type CreateLabelClassData = {
  /**
   * Label class creation request
   */
  body: CreateLabelClassRequest;
};

export type CreateLabelClassResponse = UpsertLabelClassResponse;

export type CreateLabelClassError = unknown;

export type UpdateLabelClassData = {
  /**
   * Label class update request
   */
  body: UpdateLabelClassRequest;
};

export type UpdateLabelClassResponse = UpsertLabelClassResponse;

export type UpdateLabelClassError = unknown;

export type DeleteLabelClassData = {
  body: DeleteLabelClassRequest;
};

export type DeleteLabelClassResponse = BaseResponse;

export type DeleteLabelClassError = unknown;

export type ListLabelInstancesData = {
  query?: {
    /**
     * Label class ID
     */
    classId?: string;
    /**
     * Entity type to retrieve
     */
    entityId?: string;
    /**
     * Entity type to retrieve
     */
    entityType?: EntityType;
    /**
     * Page number
     */
    page?: number;
    /**
     * Page size
     */
    pageSize?: number;
    /**
     * Label value
     */
    value?: string;
  };
};

export type ListLabelInstancesResponse2 = ListLabelInstancesResponse;

export type ListLabelInstancesError = unknown;

export type CreateLabelInstanceData = {
  /**
   * Label instance creation request
   */
  body: CreateLabelInstanceRequest;
};

export type CreateLabelInstanceResponse = UpsertLabelInstanceResponse;

export type CreateLabelInstanceError = unknown;

export type UpdateLabelInstanceData = {
  /**
   * Label update request
   */
  body: UpdateLabelInstanceRequest;
};

export type UpdateLabelInstanceResponse = UpsertLabelInstanceResponse;

export type UpdateLabelInstanceError = unknown;

export type DeleteLabelInstanceData = {
  body: DeleteLabelInstanceRequest;
};

export type DeleteLabelInstanceResponse = BaseResponse;

export type DeleteLabelInstanceError = unknown;

export type ListSkillTemplatesData = {
  query?: {
    /**
     * Page number
     */
    page?: number;
    /**
     * Page size
     */
    pageSize?: number;
  };
};

export type ListSkillTemplatesResponse = ListSkillTemplateResponse;

export type ListSkillTemplatesError = unknown;

export type ListSkillInstancesData = {
  query?: {
    /**
     * Page number
     */
    page?: number;
    /**
     * Page size
     */
    pageSize?: number;
    /**
     * Skill ID
     */
    skillId?: string;
    /**
     * Whether to sort by pinned skill instances
     */
    sortByPin?: boolean;
  };
};

export type ListSkillInstancesResponse = ListSkillInstanceResponse;

export type ListSkillInstancesError = unknown;

export type CreateSkillInstanceData = {
  /**
   * Skill creation request
   */
  body: CreateSkillInstanceRequest;
};

export type CreateSkillInstanceResponse2 = CreateSkillInstanceResponse;

export type CreateSkillInstanceError = unknown;

export type UpdateSkillInstanceData = {
  /**
   * Skill update request
   */
  body: UpdateSkillInstanceRequest;
};

export type UpdateSkillInstanceResponse2 = UpdateSkillInstanceResponse;

export type UpdateSkillInstanceError = unknown;

export type PinSkillInstanceData = {
  body: PinSkillInstanceRequest;
};

export type PinSkillInstanceResponse = BaseResponse;

export type PinSkillInstanceError = unknown;

export type UnpinSkillInstanceData = {
  body: UnpinSkillInstanceRequest;
};

export type UnpinSkillInstanceResponse = BaseResponse;

export type UnpinSkillInstanceError = unknown;

export type DeleteSkillInstanceData = {
  body: DeleteSkillInstanceRequest;
};

export type DeleteSkillInstanceResponse = BaseResponse;

export type DeleteSkillInstanceError = unknown;

export type InvokeSkillData = {
  /**
   * Skill invocation request
   */
  body: InvokeSkillRequest;
};

export type InvokeSkillResponse2 = InvokeSkillResponse;

export type InvokeSkillError = unknown;

export type StreamInvokeSkillData = {
  /**
   * Skill invocation request
   */
  body: InvokeSkillRequest;
};

export type StreamInvokeSkillResponse = string;

export type StreamInvokeSkillError = unknown;

export type ListSkillTriggersData = {
  query?: {
    /**
     * Page number
     */
    page?: number;
    /**
     * Page size
     */
    pageSize?: number;
    /**
     * Skill ID
     */
    skillId?: string;
  };
};

export type ListSkillTriggersResponse = ListSkillTriggerResponse;

export type ListSkillTriggersError = unknown;

export type CreateSkillTriggerData = {
  /**
   * Skill trigger creation request
   */
  body: CreateSkillTriggerRequest;
};

export type CreateSkillTriggerResponse2 = CreateSkillTriggerResponse;

export type CreateSkillTriggerError = unknown;

export type UpdateSkillTriggerData = {
  /**
   * Skill trigger update request
   */
  body: UpdateSkillTriggerRequest;
};

export type UpdateSkillTriggerResponse2 = UpdateSkillTriggerResponse;

export type UpdateSkillTriggerError = unknown;

export type DeleteSkillTriggerData = {
  body: DeleteSkillTriggerRequest;
};

export type DeleteSkillTriggerResponse = BaseResponse;

export type DeleteSkillTriggerError = unknown;

export type ListSkillJobsData = {
  query?: {
    /**
     * Job status
     */
    jobStatus?: SkillJobStatus;
    /**
     * Page number
     */
    page?: number;
    /**
     * Page size
     */
    pageSize?: number;
    /**
     * Skill ID
     */
    skillId?: string;
  };
};

export type ListSkillJobsResponse2 = ListSkillJobsResponse;

export type ListSkillJobsError = unknown;

export type GetSkillJobDetailData = {
  query?: {
    /**
     * Job ID
     */
    jobId?: string;
  };
};

export type GetSkillJobDetailResponse2 = GetSkillJobDetailResponse;

export type GetSkillJobDetailError = unknown;

export type ListConversationsResponse = ListConversationResponse;

export type ListConversationsError = unknown;

export type GetConversationDetailData = {
  path: {
    /**
     * Conversation ID
     */
    convId: string;
  };
};

export type GetConversationDetailResponse2 = GetConversationDetailResponse;

export type GetConversationDetailError = unknown;

export type GetSettingsResponse = GetUserSettingsResponse;

export type GetSettingsError = unknown;

export type UpdateSettingsData = {
  body: UpdateUserSettingsRequest;
};

export type UpdateSettingsResponse = BaseResponse;

export type UpdateSettingsError = unknown;

export type CheckSettingsFieldData = {
  query: {
    /**
     * Settings field
     */
    field: 'name' | 'email';
    /**
     * Field value
     */
    value: string;
  };
};

export type CheckSettingsFieldResponse2 = CheckSettingsFieldResponse;

export type CheckSettingsFieldError = unknown;

export type GetSubscriptionPlanResponse = unknown;

export type GetSubscriptionPlanError = unknown;

export type GetSubscriptionUsageResponse2 = GetSubscriptionUsageResponse;

export type GetSubscriptionUsageError = unknown;

export type ListModelsResponse2 = ListModelsResponse;

export type ListModelsError = unknown;

export type CreateCheckoutSessionData = {
  body: CreateCheckoutSessionRequest;
};

export type CreateCheckoutSessionResponse2 = CreateCheckoutSessionResponse;

export type CreateCheckoutSessionError = unknown;

export type CreatePortalSessionResponse2 = CreatePortalSessionResponse;

export type CreatePortalSessionError = unknown;

export type SearchData = {
  body: SearchRequest;
};

export type SearchResponse2 = SearchResponse;

export type SearchError = unknown;

export type ScrapeData = {
  body: ScrapeWeblinkRequest;
};

export type ScrapeResponse = ScrapeWeblinkResponse;

export type ScrapeError = unknown;

export type UploadData = unknown;

export type UploadResponse2 = UploadResponse;

export type UploadError = unknown;

export type ServeStaticResponse = unknown;

export type ServeStaticError = unknown;

export type $OpenApiTs = {
  '/knowledge/resource/list': {
    get: {
      req: ListResourcesData;
      res: {
        /**
         * Successful operation
         */
        '200': ListResourceResponse;
      };
    };
  };
  '/knowledge/resource/detail': {
    get: {
      req: GetResourceDetailData;
      res: {
        /**
         * successful operation
         */
        '200': GetResourceDetailResponse;
      };
    };
  };
  '/knowledge/resource/update': {
    post: {
      req: UpdateResourceData;
      res: {
        /**
         * successful operation
         */
        '200': UpsertResourceResponse;
      };
    };
  };
  '/knowledge/resource/new': {
    post: {
      req: CreateResourceData;
      res: {
        /**
         * successful operation
         */
        '200': UpsertResourceResponse;
      };
    };
  };
  '/knowledge/resource/batch': {
    post: {
      req: BatchCreateResourceData;
      res: {
        /**
         * successful operation
         */
        '200': UpsertResourceResponse;
      };
    };
  };
  '/knowledge/resource/reindex': {
    post: {
      req: ReindexResourceData;
      res: {
        /**
         * successful operation
         */
        '200': ReindexResourceResponse;
      };
    };
  };
  '/knowledge/resource/delete': {
    post: {
      req: DeleteResourceData;
      res: {
        /**
         * Successful operation
         */
        '200': BaseResponse;
      };
    };
  };
  '/knowledge/note/list': {
    get: {
      req: ListNotesData;
      res: {
        /**
         * Successful operation
         */
        '200': ListNoteResponse;
      };
    };
  };
  '/knowledge/note/detail': {
    get: {
      req: GetNoteDetailData;
      res: {
        /**
         * Successful operation
         */
        '200': GetNoteDetailResponse;
      };
    };
  };
  '/knowledge/note/update': {
    post: {
      req: UpdateNoteData;
      res: {
        /**
         * successful operation
         */
        '200': UpsertNoteResponse;
      };
    };
  };
  '/knowledge/note/new': {
    post: {
      req: CreateNoteData;
      res: {
        /**
         * successful operation
         */
        '200': UpsertNoteResponse;
      };
    };
  };
  '/knowledge/note/delete': {
    post: {
      req: DeleteNoteData;
      res: {
        /**
         * Successful operation
         */
        '200': BaseResponse;
      };
    };
  };
  '/knowledge/collection/list': {
    get: {
      req: ListCollectionsData;
      res: {
        /**
         * Successful operation
         */
        '200': ListCollectionResponse;
      };
    };
  };
  '/knowledge/collection/detail': {
    get: {
      req: GetCollectionDetailData;
      res: {
        /**
         * successful operation
         */
        '200': GetCollectionDetailResponse;
      };
    };
  };
  '/knowledge/collection/update': {
    post: {
      req: UpdateCollectionData;
      res: {
        /**
         * successful operation
         */
        '200': UpsertCollectionResponse;
      };
    };
  };
  '/knowledge/collection/new': {
    post: {
      req: CreateCollectionData;
      res: {
        /**
         * successful operation
         */
        '200': UpsertCollectionResponse;
      };
    };
  };
  '/knowledge/collection/addResource': {
    post: {
      req: AddResourceToCollectionData;
      res: {
        /**
         * successful operation
         */
        '200': BaseResponse;
      };
    };
  };
  '/knowledge/collection/removeResource': {
    post: {
      req: RemoveResourceFromCollectionData;
      res: {
        /**
         * successful operation
         */
        '200': BaseResponse;
      };
    };
  };
  '/knowledge/collection/delete': {
    post: {
      req: DeleteCollectionData;
      res: {
        /**
         * Successful operation
         */
        '200': BaseResponse;
      };
    };
  };
  '/label/class/list': {
    get: {
      req: ListLabelClassesData;
      res: {
        /**
         * successful operation
         */
        '200': ListLabelClassesResponse;
      };
    };
  };
  '/label/class/new': {
    post: {
      req: CreateLabelClassData;
      res: {
        /**
         * successful operation
         */
        '200': UpsertLabelClassResponse;
      };
    };
  };
  '/label/class/update': {
    post: {
      req: UpdateLabelClassData;
      res: {
        /**
         * successful operation
         */
        '200': UpsertLabelClassResponse;
      };
    };
  };
  '/label/class/delete': {
    post: {
      req: DeleteLabelClassData;
      res: {
        /**
         * Successful operation
         */
        '200': BaseResponse;
      };
    };
  };
  '/label/instance/list': {
    get: {
      req: ListLabelInstancesData;
      res: {
        /**
         * successful operation
         */
        '200': ListLabelInstancesResponse;
      };
    };
  };
  '/label/instance/new': {
    post: {
      req: CreateLabelInstanceData;
      res: {
        /**
         * successful operation
         */
        '200': UpsertLabelInstanceResponse;
      };
    };
  };
  '/label/instance/update': {
    post: {
      req: UpdateLabelInstanceData;
      res: {
        /**
         * successful operation
         */
        '200': UpsertLabelInstanceResponse;
      };
    };
  };
  '/label/instance/delete': {
    post: {
      req: DeleteLabelInstanceData;
      res: {
        /**
         * Successful operation
         */
        '200': BaseResponse;
      };
    };
  };
  '/skill/template/list': {
    get: {
      req: ListSkillTemplatesData;
      res: {
        /**
         * successful operation
         */
        '200': ListSkillTemplateResponse;
      };
    };
  };
  '/skill/instance/list': {
    get: {
      req: ListSkillInstancesData;
      res: {
        /**
         * successful operation
         */
        '200': ListSkillInstanceResponse;
      };
    };
  };
  '/skill/instance/new': {
    post: {
      req: CreateSkillInstanceData;
      res: {
        /**
         * successful operation
         */
        '200': CreateSkillInstanceResponse;
      };
    };
  };
  '/skill/instance/update': {
    post: {
      req: UpdateSkillInstanceData;
      res: {
        /**
         * successful operation
         */
        '200': UpdateSkillInstanceResponse;
      };
    };
  };
  '/skill/instance/pin': {
    post: {
      req: PinSkillInstanceData;
      res: {
        /**
         * successful operation
         */
        '200': BaseResponse;
      };
    };
  };
  '/skill/instance/unpin': {
    post: {
      req: UnpinSkillInstanceData;
      res: {
        /**
         * successful operation
         */
        '200': BaseResponse;
      };
    };
  };
  '/skill/instance/delete': {
    post: {
      req: DeleteSkillInstanceData;
      res: {
        /**
         * successful operation
         */
        '200': BaseResponse;
      };
    };
  };
  '/skill/invoke': {
    post: {
      req: InvokeSkillData;
      res: {
        /**
         * successful operation
         */
        '200': InvokeSkillResponse;
      };
    };
  };
  '/skill/streamInvoke': {
    post: {
      req: StreamInvokeSkillData;
      res: {
        /**
         * successful operation
         */
        '200': string;
      };
    };
  };
  '/skill/trigger/list': {
    get: {
      req: ListSkillTriggersData;
      res: {
        /**
         * successful operation
         */
        '200': ListSkillTriggerResponse;
      };
    };
  };
  '/skill/trigger/new': {
    post: {
      req: CreateSkillTriggerData;
      res: {
        /**
         * successful operation
         */
        '200': CreateSkillTriggerResponse;
      };
    };
  };
  '/skill/trigger/update': {
    post: {
      req: UpdateSkillTriggerData;
      res: {
        /**
         * successful operation
         */
        '200': UpdateSkillTriggerResponse;
      };
    };
  };
  '/skill/trigger/delete': {
    post: {
      req: DeleteSkillTriggerData;
      res: {
        /**
         * successful operation
         */
        '200': BaseResponse;
      };
    };
  };
  '/skill/job/list': {
    get: {
      req: ListSkillJobsData;
      res: {
        /**
         * successful operation
         */
        '200': ListSkillJobsResponse;
      };
    };
  };
  '/skill/job/detail': {
    get: {
      req: GetSkillJobDetailData;
      res: {
        /**
         * successful operation
         */
        '200': GetSkillJobDetailResponse;
      };
    };
  };
  '/conversation/list': {
    get: {
      res: {
        /**
         * successful operation
         */
        '200': ListConversationResponse;
      };
    };
  };
  '/conversation/{convId}': {
    get: {
      req: GetConversationDetailData;
      res: {
        /**
         * successful operation
         */
        '200': GetConversationDetailResponse;
      };
    };
  };
  '/user/settings': {
    get: {
      res: {
        /**
         * successful operation
         */
        '200': GetUserSettingsResponse;
      };
    };
    put: {
      req: UpdateSettingsData;
      res: {
        /**
         * successful operation
         */
        '200': BaseResponse;
      };
    };
  };
  '/user/checkSettingsField': {
    get: {
      req: CheckSettingsFieldData;
      res: {
        /**
         * successful operation
         */
        '200': CheckSettingsFieldResponse;
      };
    };
  };
  '/subscription/plan': {
    get: {
      res: {
        /**
         * successful operation
         */
        '200': unknown;
      };
    };
  };
  '/subscription/usage': {
    get: {
      res: {
        /**
         * successful operation
         */
        '200': GetSubscriptionUsageResponse;
      };
    };
  };
  '/subscription/modelList': {
    get: {
      res: {
        /**
         * successful operation
         */
        '200': ListModelsResponse;
      };
    };
  };
  '/subscription/createCheckoutSession': {
    post: {
      req: CreateCheckoutSessionData;
      res: {
        /**
         * successful operation
         */
        '200': CreateCheckoutSessionResponse;
      };
    };
  };
  '/subscription/createPortalSession': {
    post: {
      res: {
        /**
         * successful operation
         */
        '200': CreatePortalSessionResponse;
      };
    };
  };
  '/search': {
    post: {
      req: SearchData;
      res: {
        /**
         * successful operation
         */
        '200': SearchResponse;
      };
    };
  };
  '/misc/scrape': {
    post: {
      req: ScrapeData;
      res: {
        /**
         * successful operation
         */
        '200': ScrapeWeblinkResponse;
      };
    };
  };
  '/misc/upload': {
    post: {
      req: UploadData;
      res: {
        /**
         * successful operation
         */
        '200': UploadResponse;
      };
    };
  };
  '/misc/static/{fileName}': {
    get: {
      res: {
        /**
         * successful operation
         */
        '200': unknown;
      };
    };
  };
};
