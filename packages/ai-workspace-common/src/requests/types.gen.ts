// This file is auto-generated by @hey-api/openapi-ts

/**
 * Refly user
 */
export type User = {
    /**
     * UID
     */
    uid: string;
    /**
     * UI locale
     */
    uiLocale?: string;
    /**
     * Output locale
     */
    outputLocale?: string;
    /**
     * Subscription plan ID
     */
    planId?: string;
};

/**
 * List order
 */
export type ListOrder = 'creationAsc' | 'creationDesc';

/**
 * Reference metadata
 */
export type ReferenceMeta = {
    /**
     * Reference title
     */
    title?: string;
    /**
     * Reference project ID
     */
    projectId?: string;
    /**
     * Reference URL
     */
    url?: string;
};

/**
 * Basic reference info
 */
export type BaseReference = {
    /**
     * Source entity type
     */
    sourceType: ReferenceType;
    /**
     * Source entity ID
     */
    sourceId: string;
    /**
     * Target entity type
     */
    targetType: ReferenceType;
    /**
     * Target entity ID
     */
    targetId: string;
};

export type Canvas = {
    /**
     * Canvas ID
     */
    canvasId: string;
    /**
     * Canvas title
     */
    title: string;
    /**
     * Share code
     */
    shareCode?: string;
    /**
     * Whether this canvas is read-only
     */
    readOnly?: boolean;
    /**
     * Canvas creation time
     */
    createdAt: string;
    /**
     * Canvas update time
     */
    updatedAt: string;
};

export type Reference = BaseReference & {
    /**
     * Reference ID
     */
    referenceId: string;
    /**
     * Source entity metadata
     */
    sourceMeta?: ReferenceMeta;
    /**
     * Target entity metadata
     */
    targetMeta?: ReferenceMeta;
};

/**
 * Resource metadata
 */
export type ResourceMeta = {
    /**
     * Weblink URL
     */
    url?: string;
    /**
     * Weblink title
     */
    title?: string;
};

/**
 * Resource type
 */
export type ResourceType = 'weblink' | 'text';

export type Resource = {
    /**
     * Resource ID (empty if it's external)
     */
    resourceId: string;
    /**
     * Resource type
     */
    resourceType: ResourceType;
    /**
     * Resource order in project
     */
    order?: number;
    /**
     * Resource title
     */
    title: string;
    /**
     * Resource metadata
     */
    data?: ResourceMeta;
    /**
     * Project IDs related to this resource
     */
    projectIds?: Array<(string)>;
    /**
     * Resource index status
     */
    indexStatus?: IndexStatus;
    /**
     * Resource storage size (in bytes)
     */
    storageSize?: string;
    /**
     * Resource vector storage size (in bytes)
     */
    vectorSize?: string;
    /**
     * Resource creation time
     */
    createdAt: string;
    /**
     * Resource update time
     */
    updatedAt: string;
    /**
     * Preview content for this resource
     */
    contentPreview?: string;
    /**
     * Document content for this resource (only returned in getResourceDetail API)
     */
    content?: string;
};

/**
 * Reference type
 */
export type ReferenceType = 'document' | 'resource';

export type Document = {
    /**
     * Document ID
     */
    docId: string;
    /**
     * Document title
     */
    title: string;
    /**
     * Document content preview
     */
    contentPreview?: string;
    /**
     * Full document content (only returned in detail api)
     */
    content?: string;
    /**
     * Share code
     */
    shareCode?: string;
    /**
     * Whether this document is read-only
     */
    readOnly: boolean;
    /**
     * Document creation time
     */
    createdAt: string;
    /**
     * Document update time
     */
    updatedAt: string;
};

export type Project = {
    /**
     * Project ID
     */
    projectId: string;
    /**
     * Project title
     */
    title: string;
    /**
     * Project description
     */
    description?: string;
    /**
     * Share code
     */
    shareCode?: string;
    /**
     * Project creation time
     */
    createdAt: string;
    /**
     * Project update time
     */
    updatedAt: string;
};

/**
 * Entity type
 */
export type EntityType = 'document' | 'resource' | 'canvas';

/**
 * Entity
 */
export type Entity = {
    /**
     * Entity ID
     */
    entityId?: string;
    /**
     * Entity type
     */
    entityType?: EntityType;
};

/**
 * Label class
 */
export type LabelClass = {
    /**
     * Label class ID
     */
    labelClassId: string;
    /**
     * Label class name
     */
    name: string;
    /**
     * Label class display name
     */
    displayName: string;
    /**
     * Label icon
     */
    icon?: Icon;
    /**
     * Label creation instruction prompt
     */
    prompt?: string;
    /**
     * Label class creation time
     */
    createdAt: string;
    /**
     * Label class update time
     */
    updatedAt: string;
};

/**
 * Label instances related to resources, projects, etc.
 */
export type LabelInstance = {
    /**
     * Label instance ID
     */
    labelId: string;
    /**
     * Label class ID
     */
    labelClassId: string;
    /**
     * Label class
     */
    labelClass?: LabelClass;
    /**
     * Label value
     */
    value: string;
};

/**
 * Data input mode
 */
export type InputMode = 'input' | 'inputNumber' | 'inputTextArea' | 'select' | 'multiSelect' | 'radio' | 'switch';

/**
 * Config scope
 */
export type ConfigScope = Array<('runtime' | 'template')>;

/**
 * Select option
 */
export type SelectOption = {
    /**
     * Option value
     */
    value: string;
    /**
     * Option label (key is locale, value is label)
     */
    labelDict?: {
        [key: string]: (string);
    };
    /**
     * Whether this option is disabled
     */
    disabled?: boolean;
};

/**
 * Dynamic config item
 */
export type DynamicConfigItem = {
    /**
     * Config key
     */
    key: string;
    /**
     * Config input mode
     */
    inputMode: InputMode;
    /**
     * Specifies whether this config is required and in which contexts
     */
    required?: {
        /**
         * Whether this config is required
         */
        value?: boolean;
        /**
         * The contexts in which the requirement applies
         */
        configScope?: ConfigScope;
    };
    /**
     * Config label (key is locale, value is label)
     */
    labelDict: {
        [key: string]: (string);
    };
    /**
     * Config description (key is locale, value is description)
     */
    descriptionDict: {
        [key: string]: (string);
    };
    /**
     * Default value
     */
    defaultValue?: (number | string | boolean | Array<(string)>);
    /**
     * Config options
     */
    options?: Array<SelectOption>;
};

/**
 * Dynamic config value
 */
export type DynamicConfigValue = {
    /**
     * Config key label
     */
    label: string;
    /**
     * Config value
     */
    value: (string | number | boolean | Array<(string)> | {
    [key: string]: unknown;
});
    /**
     * Config display value
     */
    displayValue: string;
    /**
     * The contexts in which the requirement applies
     */
    configScope?: ConfigScope;
};

/**
 * Skill template config schema
 */
export type SkillTemplateConfigDefinition = {
    /**
     * Config items
     */
    items: Array<DynamicConfigItem>;
};

/**
 * Icon type
 */
export type IconType = 'emoji' | 'image';

/**
 * Icon
 */
export type Icon = {
    /**
     * Icon type
     */
    type: IconType;
    /**
     * Icon value
     */
    value: string;
};

/**
 * Skill
 */
export type Skill = {
    /**
     * Skill name
     */
    name: string;
    /**
     * Skill description
     */
    description?: string;
    /**
     * Skill icon
     */
    icon?: Icon;
    /**
     * Skill config schema
     */
    configSchema?: SkillTemplateConfigDefinition;
};

/**
 * Skill trigger type
 */
export type SkillTriggerType = 'timer' | 'simpleEvent';

/**
 * Simple event name
 */
export type SimpleEventName = 'onResourceReady';

export type SimpleEvent = {
    /**
     * Simple event name
     */
    name: SimpleEventName;
    /**
     * Simple event display name (key is locale, value is display name)
     */
    displayName: {
        [key: string]: unknown;
    };
    /**
     * Context keys to provide
     */
    provideContextKeys: Array<SkillContextKey>;
};

/**
 * Timer interval
 */
export type TimerInterval = 'hour' | 'day' | 'week' | 'month' | 'year';

export type TimerTriggerConfig = {
    /**
     * Time to run
     */
    datetime: string;
    /**
     * Repeat interval
     */
    repeatInterval?: TimerInterval;
};

/**
 * Skill triggers
 */
export type SkillTrigger = {
    /**
     * Skill ID
     */
    skillId: string;
    /**
     * Trigger display name
     */
    displayName: string;
    /**
     * Trigger ID
     */
    triggerId: string;
    /**
     * Trigger type
     */
    triggerType: SkillTriggerType;
    /**
     * Simple event name (only required when trigger type is `simpleEvent`)
     */
    simpleEventName?: SimpleEventName;
    /**
     * Timer config (only required when trigger type is `timer`)
     */
    timerConfig?: TimerTriggerConfig;
    /**
     * Skill input
     */
    input?: SkillInput;
    /**
     * Skill context
     */
    context?: SkillContext;
    /**
     * Skill template config
     */
    tplConfig?: SkillTemplateConfig;
    /**
     * Trigger enabled
     */
    enabled: boolean;
    /**
     * Trigger creation time
     */
    createdAt: string;
    /**
     * Trigger update time
     */
    updatedAt: string;
};

/**
 * Skill metadata
 */
export type SkillMeta = {
    /**
     * Skill name
     */
    name: string;
    /**
     * Skill icon
     */
    icon?: Icon;
};

/**
 * Action metadata
 */
export type ActionMeta = {
    /**
     * Action type
     */
    type?: ActionType;
    /**
     * Action name
     */
    name?: string;
    /**
     * Action icon
     */
    icon?: Icon;
};

/**
 * Skill template config (key is config item key, value is config value)
 */
export type SkillTemplateConfig = {
    [key: string]: DynamicConfigValue;
};

/**
 * Action config (key is config item key, value is config value)
 */
export type ActionConfig = {
    [key: string]: DynamicConfigValue;
};

/**
 * Skill
 */
export type SkillInstance = SkillMeta & {
    /**
     * Skill instance description
     */
    description?: string;
    /**
     * Skill instance prompt hint
     */
    promptHint?: string;
    /**
     * Skill template config
     */
    tplConfig?: SkillTemplateConfig;
    /**
     * Skill template config schema
     */
    tplConfigSchema?: SkillTemplateConfigDefinition;
    /**
     * Skill invocation config
     */
    invocationConfig: SkillInvocationConfig;
    /**
     * Skill pinned time
     */
    pinnedAt?: string;
    /**
     * Skill creation time
     */
    createdAt: string;
    /**
     * Skill update time
     */
    updatedAt: string;
};

/**
 * Skill job record
 */
export type SkillJob = {
    /**
     * Job ID
     */
    jobId: string;
    /**
     * Skill ID
     */
    skillId: string;
    /**
     * Skill display name
     */
    skillDisplayName: string;
    /**
     * Skill job status
     */
    jobStatus: SkillJobStatus;
    /**
     * Related conversation
     */
    conversation?: Conversation;
    /**
     * Skill trigger
     */
    trigger?: SkillTrigger;
    /**
     * Skill input
     */
    input: SkillInput;
    /**
     * Skill context
     */
    context: SkillContext;
    /**
     * Skill template config
     */
    tplConfig?: SkillTemplateConfig;
    /**
     * Job creation time
     */
    createdAt: string;
    /**
     * Job update time
     */
    updatedAt: string;
    /**
     * Job messages (only returned in detail API)
     */
    messages?: Array<ChatMessage>;
};

/**
 * Source metadata
 */
export type SourceMeta = {
    /**
     * Source URL
     * @deprecated
     */
    source?: string;
    /**
     * Source title
     * @deprecated
     */
    title?: string;
    /**
     * Source publish timesss
     */
    publishedTime?: string;
    /**
     * Related entity ID
     */
    entityId?: string;
    /**
     * Related entity type
     */
    entityType?: string;
    /**
     * Related project ID
     */
    projectId?: string;
    /**
     * Original locale
     */
    originalLocale?: string;
    /**
     * Translated display locale
     */
    translatedDisplayLocale?: string;
    /**
     * Whether the source is translated
     */
    isTranslated?: boolean;
    /**
     * Original query
     */
    originalQuery?: string;
    /**
     * Translated query
     */
    translatedQuery?: string;
    /**
     * Source type
     */
    sourceType?: 'webSearch' | 'library';
};

/**
 * Source type
 */
export type sourceType = 'webSearch' | 'library';

/**
 * Source selection
 */
export type SourceSelection = {
    /**
     * Selected xPath
     * @deprecated
     */
    xPath?: string;
    /**
     * Selected content
     */
    content: string;
    /**
     * Selection type
     */
    type: 'text' | 'table' | 'link' | 'image' | 'video' | 'audio';
};

/**
 * Selection type
 */
export type type = 'text' | 'table' | 'link' | 'image' | 'video' | 'audio';

/**
 * Source of the message
 */
export type Source = {
    /**
     * Source URL
     */
    url?: string;
    /**
     * Source title
     */
    title?: string;
    /**
     * Source content
     */
    pageContent: string;
    /**
     * Relativity score
     */
    score?: number;
    /**
     * Source metadata
     */
    metadata?: SourceMeta;
    /**
     * Source selections
     */
    selections?: Array<SourceSelection>;
};

/**
 * Search step
 */
export type SearchStep = {
    /**
     * Search step name
     */
    step?: string;
    /**
     * Step duration in milliseconds
     */
    duration?: number;
    /**
     * Step-specific result data
     */
    result?: {
        [key: string]: unknown;
    };
};

/**
 * Chat message type
 */
export type MessageType = 'ai' | 'human' | 'system';

/**
 * Model tier
 */
export type ModelTier = 't1' | 't2';

/**
 * Token usage item
 */
export type TokenUsageItem = {
    /**
     * Model tier
     */
    tier: string;
    /**
     * Model name
     */
    modelName: string;
    /**
     * Model provider
     */
    modelProvider: string;
    /**
     * Input tokens
     */
    inputTokens: number;
    /**
     * Output tokens
     */
    outputTokens: number;
};

/**
 * Action status
 */
export type ActionStatus = 'waiting' | 'executing' | 'finish' | 'failed';

/**
 * Artifact type
 */
export type ArtifactType = 'document';

/**
 * Artifact status
 */
export type ArtifactStatus = 'waiting' | 'generating' | 'finish' | 'failed';

/**
 * Artifact
 */
export type Artifact = {
    /**
     * Artifact type
     */
    type: ArtifactType;
    /**
     * Entity ID
     */
    entityId: string;
    /**
     * Artifact title
     */
    title: string;
    /**
     * Artifact status
     */
    status?: ArtifactStatus;
};

/**
 * Action step metadata
 */
export type ActionStepMeta = {
    /**
     * Step name
     */
    name: string;
};

/**
 * Action step
 */
export type ActionStep = {
    /**
     * Step name
     */
    name: string;
    /**
     * Step content
     */
    content?: string;
    /**
     * Step artifacts
     */
    artifacts?: Array<Artifact>;
    /**
     * Step structured data output
     */
    structuredData?: {
        [key: string]: unknown;
    };
    /**
     * Token usage
     */
    tokenUsage?: Array<TokenUsageItem>;
};

/**
 * Action result
 */
export type ActionResult = {
    /**
     * Action result ID
     */
    readonly resultId: string;
    /**
     * Action result title
     */
    title?: string;
    /**
     * Step status
     */
    status?: ActionStatus;
    /**
     * Action type
     */
    type?: ActionType;
    /**
     * Action target type
     */
    targetType?: EntityType;
    /**
     * Action target ID
     */
    targetId?: string;
    /**
     * Action metadata
     */
    actionMeta?: ActionMeta;
    /**
     * Action context
     */
    context?: SkillContext;
    /**
     * Action template config
     */
    tplConfig?: SkillTemplateConfig;
    /**
     * Action result history
     */
    history?: Array<ActionResult>;
    /**
     * Action steps
     */
    steps?: Array<ActionStep>;
    /**
     * Action step logs
     */
    logs?: Array<(string)>;
    /**
     * Errors
     */
    errors?: Array<(string)>;
    /**
     * Message creation time
     */
    createdAt?: string;
    /**
     * Message update time
     */
    updatedAt?: string;
};

/**
 * Chat message
 */
export type ChatMessage = {
    /**
     * Message ID
     */
    readonly msgId: string;
    /**
     * Skill job ID
     */
    jobId?: string;
    /**
     * Message type
     */
    type: MessageType;
    /**
     * Message content
     */
    content: string;
    /**
     * Skill metadata
     */
    skillMeta?: SkillMeta;
    /**
     * Message logs
     */
    logs?: Array<(string)>;
    /**
     * Structured data output
     */
    structuredData?: {
        [key: string]: unknown;
    };
    /**
     * Errors
     */
    errors?: Array<(string)>;
    /**
     * Token usage
     */
    tokenUsage?: Array<TokenUsageItem>;
    /**
     * Skill invocation parameters
     */
    invokeParam?: InvokeSkillRequest;
    /**
     * Message creation time
     */
    createdAt?: string;
    /**
     * Message update time
     */
    updatedAt?: string;
};

/**
 * Conversation list item
 */
export type Conversation = {
    /**
     * Conversation ID
     */
    convId?: string;
    /**
     * Project ID
     */
    projectId?: string;
    /**
     * Conversation title
     */
    title?: string;
    /**
     * Last message content
     */
    lastMessage?: string;
    /**
     * Number of chat messages in this conversation
     */
    messageCount?: number;
    /**
     * Conversation locale
     */
    locale?: string;
    /**
     * Origin page host
     */
    origin?: string;
    /**
     * Origin page title
     */
    originPageTitle?: string;
    /**
     * Origin page url
     */
    originPageUrl?: string;
    /**
     * Conversation creation time
     */
    createdAt?: string;
    /**
     * Conversation creation time
     */
    updatedAt?: string;
    /**
     * Conversation messages (only returned for getConversationDetail api)
     */
    messages?: Array<ChatMessage>;
};

/**
 * Resource index status
 */
export type IndexStatus = 'init' | 'wait_parse' | 'wait_index' | 'finish' | 'parse_failed' | 'index_failed';

/**
 * Payment recurring interval
 */
export type SubscriptionInterval = 'monthly' | 'yearly';

/**
 * Subscription plan type
 */
export type SubscriptionPlanType = 'free' | 'pro';

/**
 * Price lookup key
 */
export type PriceLookupKey = 'refly_pro_monthly' | 'refly_pro_yearly';

/**
 * Subscription status
 */
export type SubscriptionStatus = 'active' | 'canceled' | 'incomplete' | 'incomplete_expired' | 'past_due' | 'paused' | 'trialing' | 'unpaid';

export type Subscription = {
    /**
     * Subscription ID
     */
    subscriptionId: string;
    /**
     * Lookup key
     */
    lookupKey?: string;
    /**
     * Subscription plan type
     */
    planType: SubscriptionPlanType;
    /**
     * Payment recurring interval
     */
    interval?: SubscriptionInterval;
    /**
     * Subscription status
     */
    status: SubscriptionStatus;
    /**
     * Subscription cancel time
     */
    cancelAt?: string;
};

export type TokenUsageMeter = {
    /**
     * Token usage meter ID
     */
    meterId: string;
    /**
     * User ID
     */
    uid: string;
    /**
     * Subscription ID
     */
    subscriptionId?: string;
    /**
     * Token usage meter start time
     */
    startAt: string;
    /**
     * Token usage meter end time
     */
    endAt?: string;
    /**
     * Token quota (T1)
     */
    t1TokenQuota: number;
    /**
     * Token used (T1)
     */
    t1TokenUsed: number;
    /**
     * Token quota (T2)
     */
    t2TokenQuota: number;
    /**
     * Token used (T2)
     */
    t2TokenUsed: number;
};

export type StorageUsageMeter = {
    /**
     * Storage usage meter ID
     */
    meterId: string;
    /**
     * User ID
     */
    uid: string;
    /**
     * Subscription ID
     */
    subscriptionId?: string;
    /**
     * Object storage quota (in bytes), including resource, canvas and static files
     */
    objectStorageQuota: string;
    /**
     * Resource storage size in use (in bytes)
     */
    resourceSize: string;
    /**
     * Canvas storage size in use (in bytes)
     */
    canvasSize: string;
    /**
     * Static file storage size in use (in bytes)
     */
    fileSize: string;
    /**
     * Vector storage quota (in bytes)
     */
    vectorStorageQuota: string;
    /**
     * Vector storage size used (in bytes)
     */
    vectorStorageUsed: string;
};

export type UserSettings = {
    /**
     * User ID
     */
    uid: string;
    /**
     * User avatar
     */
    avatar: string;
    /**
     * Username (can only contains letters, numbers, and underscores)
     */
    name: string;
    /**
     * User nickname
     */
    nickname?: string;
    /**
     * User email
     */
    email: string;
    /**
     * Whether email is verified
     */
    emailVerified?: boolean;
    /**
     * User UI locale
     */
    uiLocale?: string;
    /**
     * User output locale
     */
    outputLocale?: string;
    /**
     * Stripe customer ID
     */
    customerId?: string;
    /**
     * User subscription
     */
    subscription?: Subscription;
    /**
     * Whether the user has beta access
     */
    hasBetaAccess?: boolean;
};

export type GetUserSettingsResponse = BaseResponse & {
    data?: UserSettings;
};

export type BaseResponse = {
    /**
     * Whether the operation was successful
     */
    success: boolean;
    /**
     * Error code
     */
    errCode?: string;
    /**
     * Error message
     */
    errMsg?: string;
    /**
     * Trace ID
     */
    traceId?: string;
    /**
     * Error stack (only returned in development environment)
     */
    stack?: string;
};

export type ListCanvasResponse = BaseResponse & {
    /**
     * Canvas list
     */
    data?: Array<Canvas>;
};

export type GetCanvasDetailResponse = BaseResponse & {
    /**
     * Canvas data
     */
    data?: Canvas;
};

export type UpsertCanvasRequest = {
    /**
     * Canvas title
     */
    title?: string;
    /**
     * Canvas ID (only used for update)
     */
    canvasId?: string;
};

export type UpsertCanvasResponse = BaseResponse & {
    data?: Canvas;
};

export type DeleteCanvasRequest = {
    /**
     * Canvas ID to delete
     */
    canvasId: string;
};

export type UpsertResourceRequest = {
    /**
     * Resource title
     */
    title: string;
    /**
     * Resource type
     */
    resourceType: ResourceType;
    /**
     * Resource ID (only used for update)
     */
    resourceId?: string;
    /**
     * Project ID (will add to the project when creating resource)
     */
    projectId?: string;
    /**
     * Resource metadata
     */
    data?: ResourceMeta;
    /**
     * Resource content (this will be ignored if storageKey was set)
     */
    content?: string;
};

export type UpsertResourceResponse = BaseResponse & {
    data?: Resource;
};

export type BatchCreateResourceResponse = BaseResponse & {
    /**
     * Resource list
     */
    data?: Array<Resource>;
};

export type ReindexResourceRequest = {
    /**
     * Resource ID list
     */
    resourceIds: Array<(string)>;
};

export type ReindexResourceResponse = BaseResponse & {
    /**
     * Resource list
     */
    data?: Array<Resource>;
};

export type DeleteResourceRequest = {
    /**
     * Resource ID to delete
     */
    resourceId: string;
};

export type ListResourceResponse = BaseResponse & {
    /**
     * Resource list
     */
    data?: Array<Resource>;
};

export type GetResourceDetailResponse = BaseResponse & {
    /**
     * Resource data
     */
    data?: Resource;
};

export type ListDocumentResponse = BaseResponse & {
    /**
     * Canvas list
     */
    data?: Array<Document>;
};

export type GetDocumentDetailResponse = BaseResponse & {
    /**
     * Document data
     */
    data?: Document;
};

export type UpsertDocumentRequest = {
    /**
     * Canvas title
     */
    title?: string;
    /**
     * Document ID (only used for update)
     */
    docId?: string;
    /**
     * Whether this document is read-only
     */
    readOnly?: boolean;
    /**
     * Document initial content
     */
    initialContent?: string;
};

export type UpsertDocumentResponse = BaseResponse & {
    data?: Document;
};

export type DeleteDocumentRequest = {
    /**
     * Document ID to delete
     */
    docId: string;
};

export type GetActionResultResponse = BaseResponse & {
    data?: ActionResult;
};

export type QueryReferencesRequest = {
    /**
     * Source entity type
     */
    sourceType?: EntityType;
    /**
     * Source entity ID
     */
    sourceId?: string;
    /**
     * Target entity type
     */
    targetType?: EntityType;
    /**
     * Target entity ID
     */
    targetId?: string;
};

export type QueryReferencesResponse = BaseResponse & {
    /**
     * Reference list
     */
    data?: Array<Reference>;
};

export type AddReferencesRequest = {
    /**
     * Reference operation list
     */
    references: Array<BaseReference>;
};

export type AddReferencesResponse = BaseResponse & {
    /**
     * Reference list
     */
    data?: Array<Reference>;
};

export type DeleteReferencesRequest = {
    /**
     * Reference ID list
     */
    referenceIds: Array<(string)>;
};

export type UpsertProjectRequest = {
    /**
     * Project ID (only used for update)
     */
    projectId?: string;
    /**
     * Project title
     */
    title?: string;
    /**
     * Project description
     */
    description?: string;
};

export type UpsertProjectResponse = BaseResponse & {
    data?: Project;
};

export type BindProjectResourceRequest = {
    /**
     * Project ID
     */
    projectId: string;
    /**
     * Resource ID
     */
    resourceId: string;
    /**
     * Resource order in project
     */
    order?: number;
    /**
     * Operation type
     */
    operation: 'bind' | 'unbind';
};

/**
 * Operation type
 */
export type operation = 'bind' | 'unbind';

export type DeleteProjectRequest = {
    /**
     * Project ID to delete
     */
    projectId: string;
};

export type ListProjectResponse = BaseResponse & {
    /**
     * Project list
     */
    data?: Array<Project>;
};

export type GetProjectDetailResponse = BaseResponse & {
    /**
     * Project data
     */
    data?: Project;
};

export type CreateShareRequest = {
    entityType: EntityType;
    /**
     * Entity ID
     */
    entityId: string;
};

export type CreateShareResult = {
    /**
     * Share code
     */
    shareCode: string;
};

export type CreateShareResponse = BaseResponse & {
    data?: CreateShareResult;
};

export type DeleteShareRequest = {
    /**
     * Share code
     */
    shareCode: string;
};

export type ShareUser = {
    /**
     * User name
     */
    username?: string;
    /**
     * User nickname
     */
    nickname?: string;
    /**
     * User avatar
     */
    avatar?: string;
};

export type SharedContent = {
    /**
     * Shared canvas data
     */
    canvas?: Canvas;
    /**
     * Selected document detail
     */
    document?: Document;
    /**
     * Share users
     */
    users?: Array<ShareUser>;
};

export type GetShareContentResponse = BaseResponse & {
    /**
     * Shared content data
     */
    data?: SharedContent;
};

export type ListLabelClassesResponse = BaseResponse & {
    /**
     * Label class list
     */
    data?: Array<LabelClass>;
};

export type CreateLabelClassRequest = {
    /**
     * Label class name
     */
    name: string;
    /**
     * Label display name
     */
    displayName: string;
    /**
     * Label icon
     */
    icon?: Icon;
    /**
     * Label creation instruction prompt
     */
    prompt: string;
};

export type UpdateLabelClassRequest = {
    /**
     * Label class ID
     */
    labelClassId: string;
    /**
     * Label class name
     */
    name?: string;
    /**
     * Label display name
     */
    displayName?: string;
    /**
     * Label icon
     */
    icon?: Icon;
    /**
     * Label creation instruction prompt
     */
    prompt?: string;
};

export type UpsertLabelClassResponse = BaseResponse & {
    /**
     * Label class upserted
     */
    data?: LabelClass;
};

export type DeleteLabelClassRequest = {
    /**
     * Label class ID to delete
     */
    labelClassId: string;
};

export type ListLabelInstancesResponse = BaseResponse & {
    /**
     * Label list
     */
    data?: Array<LabelInstance>;
};

export type CreateLabelInstanceRequest = {
    /**
     * Label class ID
     */
    labelClassId: string;
    /**
     * Label value list
     */
    valueList: Array<(string)>;
    /**
     * Label entity type
     */
    entityType: EntityType;
    /**
     * Label entity ID
     */
    entityId: string;
};

export type UpdateLabelInstanceRequest = {
    /**
     * Label ID to update
     */
    labelId?: string;
    /**
     * Updated label value
     */
    value?: string;
};

export type UpsertLabelInstanceResponse = BaseResponse & {
    /**
     * Label instance upserted
     */
    data?: Array<LabelInstance>;
};

export type DeleteLabelInstanceRequest = {
    /**
     * Label ID to delete
     */
    labelId: string;
};

export type Action = {
    /**
     * Action type
     */
    actionType: ActionType;
    /**
     * Action name
     */
    actionName: string;
    /**
     * Action icon
     */
    icon?: Icon;
};

export type ListActionResponse = BaseResponse & {
    /**
     * Action list
     */
    data?: Array<Action>;
};

export type ListSkillResponse = BaseResponse & {
    /**
     * Skill list
     */
    data?: Array<Skill>;
};

export type ListSkillInstanceResponse = BaseResponse & {
    /**
     * Skill list
     */
    data?: Array<SkillInstance>;
};

export type SkillInstanceCreateParam = {
    /**
     * Skill template name
     */
    tplName?: string;
    /**
     * Skill display name
     */
    displayName: string;
    /**
     * Skill description
     */
    description?: string;
    /**
     * Skill instance icon
     */
    icon?: Icon;
    /**
     * Skill template config
     */
    tplConfig?: SkillTemplateConfig;
};

export type CreateSkillInstanceRequest = {
    /**
     * Skill instances to upsert
     */
    instanceList: Array<SkillInstanceCreateParam>;
};

export type CreateSkillInstanceResponse = BaseResponse & {
    /**
     * Skill instance list
     */
    data?: Array<SkillInstance>;
};

export type UpdateSkillInstanceRequest = {
    /**
     * Skill ID
     */
    skillId: string;
    /**
     * Skill display name
     */
    displayName?: string;
    /**
     * Skill description
     */
    description?: string;
    /**
     * Skill instance icon
     */
    icon?: Icon;
    /**
     * Skill template config
     */
    tplConfig?: SkillTemplateConfig;
};

export type UpdateSkillInstanceResponse = BaseResponse & {
    /**
     * Skill instance list
     */
    data?: SkillInstance;
};

export type PinSkillInstanceRequest = {
    /**
     * Skill ID to pin
     */
    skillId: string;
};

export type UnpinSkillInstanceRequest = {
    /**
     * Skill ID to unpin
     */
    skillId: string;
};

export type DeleteSkillInstanceRequest = {
    /**
     * Skill ID to delete
     */
    skillId: string;
};

/**
 * Skill input
 */
export type SkillInput = {
    /**
     * User query
     */
    query?: string;
};

/**
 * Skill context resource item
 */
export type SkillContextResourceItem = {
    /**
     * Resource ID (if empty, this will be considered as external resource)
     */
    resourceId?: string;
    /**
     * Resource
     */
    resource?: Resource;
    /**
     * Whether this resource is current
     */
    isCurrent?: boolean;
    /**
     * Resource context metadata
     */
    metadata?: {
        [key: string]: unknown;
    };
};

/**
 * Skill context project item
 */
export type SkillContextProjectItem = {
    /**
     * Project ID
     */
    projectId?: string;
    /**
     * Project
     */
    project?: Project;
    /**
     * Whether this project is current
     */
    isCurrent?: boolean;
    /**
     * Project context metadata
     */
    metadata?: {
        [key: string]: unknown;
    };
};

/**
 * Skill context document item
 */
export type SkillContextDocumentItem = {
    /**
     * Document ID
     */
    docId?: string;
    /**
     * Document
     */
    document?: Document;
    /**
     * Whether this document is current
     */
    isCurrent?: boolean;
    /**
     * Canvas context metadata
     */
    metadata?: {
        [key: string]: unknown;
    };
};

/**
 * Skill context content item
 */
export type SkillContextContentItem = {
    /**
     * Content
     */
    content: string;
    /**
     * Content context metadata
     */
    metadata?: {
        [key: string]: unknown;
    };
};

/**
 * Skill context url item
 */
export type SkillContextUrlItem = {
    /**
     * URL
     */
    url: string;
    /**
     * URL context metadata
     */
    metadata?: {
        [key: string]: unknown;
    };
};

/**
 * Skill invocation context
 */
export type SkillContext = {
    /**
     * Context resources
     */
    resources?: Array<SkillContextResourceItem>;
    /**
     * Context projects
     */
    projects?: Array<SkillContextProjectItem>;
    /**
     * Context documents
     */
    documents?: Array<SkillContextDocumentItem>;
    /**
     * Context content list
     */
    contentList?: Array<SkillContextContentItem>;
    /**
     * List of URLs
     */
    urls?: Array<SkillContextUrlItem>;
};

export type SkillContextKey = 'resources' | 'projects' | 'documents' | 'contentList' | 'urls';

export type SelectionKey = 'documentSelection' | 'resourceSelection' | 'extensionWeblinkSelection' | 'documentCursorSelection' | 'documentBeforeCursorSelection' | 'documentAfterCursorSelection';

export type SkillContextRule = {
    /**
     * Context key
     */
    key: SkillContextKey;
    /**
     * Maximum number of items
     */
    limit?: number;
    /**
     * Whether this context is required
     */
    required?: boolean;
    /**
     * Preferred selection keys (only applicable when key is `contentList`)
     */
    preferredSelectionKeys?: Array<SelectionKey>;
};

export type ContextRuleGroupRelation = 'regular' | 'mutuallyExclusive';

export type SkillContextRuleGroup = {
    /**
     * Skill context rules
     */
    rules: Array<SkillContextRule>;
    /**
     * Rule group relation
     */
    relation?: ContextRuleGroupRelation;
    /**
     * Preferred context keys
     */
    preferredContextKeys?: Array<SkillContextKey>;
};

export type SkillInvocationConfig = {
    /**
     * Skill context rule group
     */
    context?: SkillContextRuleGroup;
};

/**
 * Skill job status
 */
export type SkillJobStatus = 'scheduling' | 'running' | 'finish' | 'failed';

export type ActionType = 'skill' | 'tool';

export type ActionContextType = 'resource' | 'document';

export type ActionContextEntity = {
    /**
     * Entity title
     */
    title?: string;
    /**
     * Entity content
     */
    content?: string;
};

export type ActionContextItem = {
    /**
     * Context item type
     */
    type?: ActionContextType;
    /**
     * Entity ID
     */
    entityId?: string;
    /**
     * Entity data (will be auto populated if not provided)
     */
    entityData?: ActionContextEntity;
    /**
     * Context metadata
     */
    metadata?: {
        [key: string]: unknown;
    };
};

export type InvokeActionRequest = {
    /**
     * Action type
     */
    actionType?: ActionType;
    /**
     * Action name
     */
    actionName?: string;
    /**
     * Action input
     */
    input?: SkillInput;
    /**
     * Action invocation context
     */
    context?: Array<ActionContextItem>;
    /**
     * Action config
     */
    config?: ActionConfig;
    /**
     * Canvas ID
     */
    canvasId?: string;
    /**
     * Selected output locale
     */
    locale?: string;
    /**
     * Selected model
     */
    modelName?: string;
    /**
     * Skill job ID (if not provided, a new job will be created)
     */
    jobId?: string;
    /**
     * Trigger ID (typically you don't need to provide this)
     */
    triggerId?: string;
};

export type InvokeActionResponse = BaseResponse & {
    /**
     * Skill job ID
     */
    jobId?: string;
};

export type InvokeSkillRequest = {
    /**
     * Skill input
     */
    input: SkillInput;
    /**
     * Skill invocation context
     */
    context?: SkillContext;
    /**
     * Skill result history
     */
    resultHistory?: Array<ActionResult>;
    /**
     * Skill template config
     */
    tplConfig?: SkillTemplateConfig;
    /**
     * Skill name (if not provided, commonQnA will be used)
     */
    skillName?: string;
    /**
     * Skill invocation target
     */
    target: Entity;
    /**
     * Result ID (will be generated if not provided)
     */
    resultId?: string;
    /**
     * Skill instance ID to invoke (if not provided, skill scheduler will be used)
     */
    skillId?: string;
    /**
     * Conversation ID (will add messages to this conversation if provided)
     */
    convId?: string;
    /**
     * Selected output locale
     */
    locale?: string;
    /**
     * Selected model
     */
    modelName?: string;
    /**
     * Skill job ID (if not provided, a new job will be created)
     */
    jobId?: string;
    /**
     * Trigger ID (typically you don't need to provide this)
     */
    triggerId?: string;
};

export type InvokeSkillResponse = BaseResponse & {
    /**
     * Skill result ID
     */
    resultId?: string;
};

export type ListSkillTriggerResponse = BaseResponse & {
    /**
     * Skill trigger list
     */
    data?: Array<SkillTrigger>;
};

export type SkillTriggerCreateParam = {
    /**
     * Skill ID
     */
    skillId: string;
    /**
     * Trigger display name
     */
    displayName: string;
    /**
     * Trigger type
     */
    triggerType: SkillTriggerType;
    /**
     * Simple event name (only required when trigger type is `simpleEvent`)
     */
    simpleEventName?: SimpleEventName;
    /**
     * Timer config (only required when trigger type is `timer`)
     */
    timerConfig?: TimerTriggerConfig;
    /**
     * Skill input
     */
    input?: SkillInput;
    /**
     * Skill invocation context
     */
    context?: SkillContext;
    /**
     * Skill template config
     */
    tplConfig?: SkillTemplateConfig;
    /**
     * Whether this trigger is enabled
     */
    enabled?: boolean;
};

export type CreateSkillTriggerRequest = {
    /**
     * Skill triggers to upsert
     */
    triggerList: Array<SkillTriggerCreateParam>;
};

export type CreateSkillTriggerResponse = BaseResponse & {
    /**
     * Skill trigger list
     */
    data?: Array<SkillTrigger>;
};

export type UpdateSkillTriggerRequest = SkillTriggerCreateParam & {
    /**
     * Trigger ID
     */
    triggerId: string;
};

export type UpdateSkillTriggerResponse = BaseResponse & {
    /**
     * Updated skill trigger
     */
    data?: SkillTrigger;
};

export type DeleteSkillTriggerRequest = {
    /**
     * Trigger ID to delete
     */
    triggerId: string;
};

export type ListSkillJobsResponse = BaseResponse & {
    /**
     * Skill job list
     */
    data?: Array<SkillJob>;
};

export type GetSkillJobDetailResponse = BaseResponse & {
    /**
     * Skill job
     */
    data?: SkillJob;
};

export type CreateConversationRequest = {
    /**
     * Conversation title
     */
    title?: string;
    /**
     * Project ID
     */
    projectId?: string;
    /**
     * Conversation locale
     */
    locale?: string;
    /**
     * Origin page host
     */
    origin?: string;
    /**
     * Origin page title
     */
    originPageTitle?: string;
    /**
     * Origin page url
     */
    originPageUrl?: string;
};

export type CreateConversationResponse = BaseResponse & {
    /**
     * Created conversation
     */
    data?: Conversation;
};

export type ListConversationResponse = BaseResponse & {
    /**
     * Conversation list
     */
    data?: Array<Conversation>;
};

export type GetConversationDetailResponse = BaseResponse & {
    /**
     * Conversation data
     */
    data?: Conversation;
};

export type UpdateUserSettingsRequest = {
    /**
     * User name
     */
    name?: string;
    /**
     * User nickname
     */
    nickname?: string;
    /**
     * UI locale
     */
    uiLocale?: string;
    /**
     * Output locale
     */
    outputLocale?: string;
};

export type CheckSettingsFieldResult = {
    /**
     * Settings field
     */
    field: string;
    /**
     * Settings field value
     */
    value: string;
    /**
     * Whether the field value is available
     */
    available: boolean;
};

export type CheckSettingsFieldResponse = BaseResponse & {
    /**
     * Settings field check result
     */
    data?: CheckSettingsFieldResult;
};

export type CreateCheckoutSessionRequest = {
    /**
     * Price lookup key
     */
    lookupKey: PriceLookupKey;
};

export type CreateCheckoutSessionResponse = BaseResponse & {
    /**
     * Checkout session
     */
    data?: {
        /**
         * Checkout session URL
         */
        url?: string;
    };
};

export type CreatePortalSessionResponse = BaseResponse & {
    /**
     * Portal session
     */
    data?: {
        /**
         * Portal session URL
         */
        url?: string;
    };
};

export type SubscriptionUsageData = {
    /**
     * Token usage meter
     */
    token?: TokenUsageMeter;
    /**
     * Storage usage meter
     */
    storage?: StorageUsageMeter;
};

export type GetSubscriptionUsageResponse = BaseResponse & {
    /**
     * Subscription usage
     */
    data?: SubscriptionUsageData;
};

export type WebSearchRequest = {
    /**
     * Search query
     */
    q?: string;
    /**
     * Language/locale code
     */
    hl?: string;
    /**
     * Web search result limit
     */
    limit?: number;
};

export type BatchWebSearchRequest = {
    /**
     * Web search result limit
     */
    limit?: number;
    /**
     * Web search queries
     */
    queries?: Array<WebSearchRequest>;
};

export type MultiLingualWebSearchRequest = {
    /**
     * Search query
     */
    query: string;
    /**
     * List of search locales
     */
    searchLocaleList: Array<(string)>;
    /**
     * Display locale
     */
    displayLocale?: string;
    /**
     * Web search result limit per locale
     */
    searchLimit?: number;
    /**
     * Whether to enable reranking of search results
     */
    enableRerank?: boolean;
    /**
     * Limit for reranked results
     */
    rerankLimit?: number;
    /**
     * Relevance threshold for reranking
     */
    rerankRelevanceThreshold?: number;
};

export type MultiLingualWebSearchResponse = BaseResponse & {
    /**
     * Multilingual web search results
     */
    data?: {
        /**
         * Search result sources
         */
        sources: Array<Source>;
        /**
         * Search steps
         */
        searchSteps: Array<SearchStep>;
    };
};

export type WebSearchResult = {
    /**
     * Web search result name
     */
    name?: string;
    /**
     * Web search result url
     */
    url?: string;
    /**
     * Web search result snippet
     */
    snippet?: string;
    /**
     * Web search result locale
     */
    locale?: string;
};

export type WebSearchResponse = BaseResponse & {
    /**
     * Web search results
     */
    data?: Array<WebSearchResult>;
};

export type RerankResponse = BaseResponse & {
    /**
     * Reranked results
     */
    data?: Array<SearchResult>;
};

/**
 * Search options for internal use
 */
export type SearchOptions = {
    /**
     * Whether to enable reranker
     */
    enableReranker?: boolean;
};

export type SearchDomain = 'resource' | 'document' | 'canvas' | 'skill' | 'tool';

export type SearchMode = 'keyword' | 'vector' | 'hybrid';

export type SearchRequest = {
    /**
     * Search query (if empty, return last updated data)
     */
    query: string;
    /**
     * Search domains (if not specified, return all domains)
     */
    domains?: Array<SearchDomain>;
    /**
     * Search entities
     */
    entities?: Array<Entity>;
    /**
     * Search mode
     */
    mode?: SearchMode;
    /**
     * Search result limit for each domain
     */
    limit?: number;
};

export type SearchResultSnippet = {
    /**
     * Search result content text
     */
    text?: string;
    /**
     * Search result highlighted content text with em html tags
     */
    highlightedText?: string;
};

export type SearchResult = {
    /**
     * Search result ID to navigate to
     */
    id: string;
    /**
     * Search result domain
     */
    domain: SearchDomain;
    /**
     * Search result title
     */
    title: string;
    /**
     * Search result highlighted title with em html tags
     */
    highlightedTitle?: string;
    /**
     * Search result content preview
     */
    contentPreview?: string;
    /**
     * Search result content list with highlight marks
     */
    snippets?: Array<SearchResultSnippet>;
    /**
     * Search result relevance score
     */
    relevanceScore?: number;
    /**
     * Search result metadata
     */
    metadata?: {
        [key: string]: unknown;
    };
    /**
     * Data creation time
     */
    createdAt?: string;
    /**
     * Data update time
     */
    updatedAt?: string;
};

export type SearchResponse = BaseResponse & {
    /**
     * Search result
     */
    data?: Array<SearchResult>;
};

export type ScrapeWeblinkRequest = {
    /**
     * Weblink URL
     */
    url: string;
};

export type ScrapeWeblinkResult = {
    /**
     * Weblink title
     */
    title?: string;
    /**
     * Weblink description
     */
    description?: string;
    /**
     * Weblink image
     */
    image?: string;
};

export type ScrapeWeblinkResponse = BaseResponse & {
    /**
     * Weblink scrape result
     */
    data?: ScrapeWeblinkResult;
};

export type UploadRequest = {
    /**
     * File to upload
     */
    file: (Blob | File);
    /**
     * Entity ID
     */
    entityId: string;
    /**
     * Entity type
     */
    entityType: EntityType;
};

export type UploadResponse = BaseResponse & {
    /**
     * File upload result
     */
    data?: {
        /**
         * File URL
         */
        url?: string;
    };
};

export type ModelInfo = {
    /**
     * Model name
     */
    name: string;
    /**
     * Model label
     */
    label: string;
    /**
     * Model provider
     */
    provider: string;
    /**
     * Model tier
     */
    tier: string;
    /**
     * Model context limit
     */
    contextLimit?: number;
};

export type ListModelsResponse = BaseResponse & {
    /**
     * Model list
     */
    data?: Array<ModelInfo>;
};

export type DocumentInterface = {
    /**
     * An optional identifier for the document. Ideally this should be unique across the document collection and formatted as a UUID.
     */
    id?: string;
    /**
     * The main content of the document.
     */
    pageContent?: string;
    /**
     * Metadata associated with the document.
     */
    metadata?: {
        [key: string]: unknown;
    };
};

export type InMemorySearchResponse = BaseResponse & {
    data?: Array<DocumentInterface>;
};

export type CanvasNodeType = 'document' | 'resource' | 'skill' | 'tool' | 'skillResponse' | 'toolResponse';

export type CanvasNodeData = {
    /**
     * Node title
     */
    title: string;
    /**
     * Node entity ID
     */
    entityId: string;
    /**
     * Node content preview
     */
    contentPreview?: string;
    /**
     * Node metadata
     */
    metadata?: {
        [key: string]: unknown;
    };
};

export type CanvasNode = {
    /**
     * Node type
     */
    type: CanvasNodeType;
    data: CanvasNodeData;
};

export type ListCanvasesData = {
    query?: {
        /**
         * Order
         */
        order?: ListOrder;
        /**
         * Page number
         */
        page?: number;
        /**
         * Page size
         */
        pageSize?: number;
    };
};

export type ListCanvasesResponse = (ListCanvasResponse);

export type ListCanvasesError = unknown;

export type CreateCanvasData = {
    body: UpsertCanvasRequest;
};

export type CreateCanvasResponse = (UpsertCanvasResponse);

export type CreateCanvasError = unknown;

export type UpdateCanvasData = {
    body: UpsertCanvasRequest;
};

export type UpdateCanvasResponse = (UpsertCanvasResponse);

export type UpdateCanvasError = unknown;

export type DeleteCanvasData = {
    body: DeleteCanvasRequest;
};

export type DeleteCanvasResponse = (BaseResponse);

export type DeleteCanvasError = unknown;

export type ListResourcesData = {
    query?: {
        /**
         * Order
         */
        order?: ListOrder;
        /**
         * Page number
         */
        page?: number;
        /**
         * Page size
         */
        pageSize?: number;
        /**
         * Project ID
         */
        projectId?: string;
        /**
         * Resource ID
         */
        resourceId?: string;
        /**
         * Resource type
         */
        resourceType?: ResourceType;
    };
};

export type ListResourcesResponse = (ListResourceResponse);

export type ListResourcesError = unknown;

export type GetResourceDetailData = {
    query: {
        /**
         * Resource ID to retrieve
         */
        resourceId: string;
    };
};

export type GetResourceDetailResponse2 = (GetResourceDetailResponse);

export type GetResourceDetailError = unknown;

export type UpdateResourceData = {
    /**
     * Resource update request
     */
    body: UpsertResourceRequest;
};

export type UpdateResourceResponse = (UpsertResourceResponse);

export type UpdateResourceError = unknown;

export type CreateResourceData = {
    /**
     * Resource creation request
     */
    body: UpsertResourceRequest;
};

export type CreateResourceResponse = (UpsertResourceResponse);

export type CreateResourceError = unknown;

export type BatchCreateResourceData = {
    /**
     * Resource creation request
     */
    body: Array<UpsertResourceRequest>;
};

export type BatchCreateResourceResponse2 = (UpsertResourceResponse);

export type BatchCreateResourceError = unknown;

export type ReindexResourceData = {
    body: ReindexResourceRequest;
};

export type ReindexResourceResponse2 = (ReindexResourceResponse);

export type ReindexResourceError = unknown;

export type DeleteResourceData = {
    body: DeleteResourceRequest;
};

export type DeleteResourceResponse = (BaseResponse);

export type DeleteResourceError = unknown;

export type ListDocumentsData = {
    query?: {
        /**
         * Order by
         */
        order?: ListOrder;
        /**
         * Page number
         */
        page?: number;
        /**
         * Page size
         */
        pageSize?: number;
    };
};

export type ListDocumentsResponse = (ListDocumentResponse);

export type ListDocumentsError = unknown;

export type GetDocumentDetailData = {
    query: {
        /**
         * Document ID to retrieve
         */
        docId: string;
    };
};

export type GetDocumentDetailResponse2 = (GetDocumentDetailResponse);

export type GetDocumentDetailError = unknown;

export type UpdateDocumentData = {
    /**
     * Document update request
     */
    body: UpsertDocumentRequest;
};

export type UpdateDocumentResponse = (UpsertDocumentResponse);

export type UpdateDocumentError = unknown;

export type CreateDocumentData = {
    /**
     * Document creation request
     */
    body: UpsertDocumentRequest;
};

export type CreateDocumentResponse = (UpsertDocumentResponse);

export type CreateDocumentError = unknown;

export type DeleteDocumentData = {
    body: DeleteDocumentRequest;
};

export type DeleteDocumentResponse = (BaseResponse);

export type DeleteDocumentError = unknown;

export type BatchUpdateDocumentData = {
    body: Array<UpsertDocumentRequest>;
};

export type BatchUpdateDocumentResponse = (BaseResponse);

export type BatchUpdateDocumentError = unknown;

export type QueryReferencesData = {
    body: QueryReferencesRequest;
};

export type QueryReferencesResponse2 = (unknown);

export type QueryReferencesError = unknown;

export type AddReferencesData = {
    body: AddReferencesRequest;
};

export type AddReferencesResponse2 = (BaseResponse);

export type AddReferencesError = unknown;

export type DeleteReferencesData = {
    body: DeleteReferencesRequest;
};

export type DeleteReferencesResponse = (unknown);

export type DeleteReferencesError = unknown;

export type ListProjectsData = {
    query?: {
        /**
         * Order
         */
        order?: ListOrder;
        /**
         * Page number
         */
        page?: number;
        /**
         * Page size
         */
        pageSize?: number;
        /**
         * Project ID
         */
        projectId?: string;
        /**
         * Resource ID
         */
        resourceId?: string;
    };
};

export type ListProjectsResponse = (ListProjectResponse);

export type ListProjectsError = unknown;

export type GetProjectDetailData = {
    query: {
        /**
         * Project ID to retrieve
         */
        projectId: string;
    };
};

export type GetProjectDetailResponse2 = (GetProjectDetailResponse);

export type GetProjectDetailError = unknown;

export type UpdateProjectData = {
    /**
     * Project update request
     */
    body: UpsertProjectRequest;
};

export type UpdateProjectResponse = (UpsertProjectResponse);

export type UpdateProjectError = unknown;

export type CreateProjectData = {
    /**
     * Project creation request
     */
    body: UpsertProjectRequest;
};

export type CreateProjectResponse = (UpsertProjectResponse);

export type CreateProjectError = unknown;

export type BindProjectResourcesData = {
    body: Array<BindProjectResourceRequest>;
};

export type BindProjectResourcesResponse = (BaseResponse);

export type BindProjectResourcesError = unknown;

export type DeleteProjectData = {
    body: DeleteProjectRequest;
};

export type DeleteProjectResponse = (BaseResponse);

export type DeleteProjectError = unknown;

export type CreateShareData = {
    body: CreateShareRequest;
};

export type CreateShareResponse2 = (CreateShareResponse);

export type CreateShareError = unknown;

export type DeleteShareData = {
    body: DeleteShareRequest;
};

export type DeleteShareResponse = (BaseResponse);

export type DeleteShareError = unknown;

export type GetShareContentData = {
    query: {
        /**
         * Share code
         */
        shareCode: string;
    };
};

export type GetShareContentResponse2 = (GetShareContentResponse);

export type GetShareContentError = unknown;

export type ListLabelClassesData = {
    query?: {
        /**
         * Page number
         */
        page?: number;
        /**
         * Page size
         */
        pageSize?: number;
    };
};

export type ListLabelClassesResponse2 = (ListLabelClassesResponse);

export type ListLabelClassesError = unknown;

export type CreateLabelClassData = {
    /**
     * Label class creation request
     */
    body: CreateLabelClassRequest;
};

export type CreateLabelClassResponse = (UpsertLabelClassResponse);

export type CreateLabelClassError = unknown;

export type UpdateLabelClassData = {
    /**
     * Label class update request
     */
    body: UpdateLabelClassRequest;
};

export type UpdateLabelClassResponse = (UpsertLabelClassResponse);

export type UpdateLabelClassError = unknown;

export type DeleteLabelClassData = {
    body: DeleteLabelClassRequest;
};

export type DeleteLabelClassResponse = (BaseResponse);

export type DeleteLabelClassError = unknown;

export type ListLabelInstancesData = {
    query?: {
        /**
         * Label class ID
         */
        classId?: string;
        /**
         * Entity type to retrieve
         */
        entityId?: string;
        /**
         * Entity type to retrieve
         */
        entityType?: EntityType;
        /**
         * Page number
         */
        page?: number;
        /**
         * Page size
         */
        pageSize?: number;
        /**
         * Label value
         */
        value?: string;
    };
};

export type ListLabelInstancesResponse2 = (ListLabelInstancesResponse);

export type ListLabelInstancesError = unknown;

export type CreateLabelInstanceData = {
    /**
     * Label instance creation request
     */
    body: CreateLabelInstanceRequest;
};

export type CreateLabelInstanceResponse = (UpsertLabelInstanceResponse);

export type CreateLabelInstanceError = unknown;

export type UpdateLabelInstanceData = {
    /**
     * Label update request
     */
    body: UpdateLabelInstanceRequest;
};

export type UpdateLabelInstanceResponse = (UpsertLabelInstanceResponse);

export type UpdateLabelInstanceError = unknown;

export type DeleteLabelInstanceData = {
    body: DeleteLabelInstanceRequest;
};

export type DeleteLabelInstanceResponse = (BaseResponse);

export type DeleteLabelInstanceError = unknown;

export type ListActionsResponse = (ListActionResponse);

export type ListActionsError = unknown;

export type InvokeActionData = {
    /**
     * Action invocation request
     */
    body: InvokeActionRequest;
};

export type InvokeActionResponse2 = (InvokeActionResponse);

export type InvokeActionError = unknown;

export type StreamInvokeActionData = {
    /**
     * Skill invocation request
     */
    body: InvokeActionRequest;
};

export type StreamInvokeActionResponse = (string);

export type StreamInvokeActionError = unknown;

export type GetActionResultData = {
    query: {
        /**
         * Action result ID
         */
        resultId: string;
    };
};

export type GetActionResultResponse2 = (GetActionResultResponse);

export type GetActionResultError = unknown;

export type ListSkillsResponse = (ListSkillResponse);

export type ListSkillsError = unknown;

export type InvokeSkillData = {
    /**
     * Skill invocation request
     */
    body: InvokeSkillRequest;
};

export type InvokeSkillResponse2 = (InvokeSkillResponse);

export type InvokeSkillError = unknown;

export type StreamInvokeSkillData = {
    /**
     * Skill invocation request
     */
    body: InvokeSkillRequest;
};

export type StreamInvokeSkillResponse = (string);

export type StreamInvokeSkillError = unknown;

export type ListSkillInstancesData = {
    query?: {
        /**
         * Page number
         */
        page?: number;
        /**
         * Page size
         */
        pageSize?: number;
        /**
         * Skill ID
         */
        skillId?: string;
        /**
         * Whether to sort by pinned skill instances
         */
        sortByPin?: boolean;
    };
};

export type ListSkillInstancesResponse = (ListSkillInstanceResponse);

export type ListSkillInstancesError = unknown;

export type CreateSkillInstanceData = {
    /**
     * Skill creation request
     */
    body: CreateSkillInstanceRequest;
};

export type CreateSkillInstanceResponse2 = (CreateSkillInstanceResponse);

export type CreateSkillInstanceError = unknown;

export type UpdateSkillInstanceData = {
    /**
     * Skill update request
     */
    body: UpdateSkillInstanceRequest;
};

export type UpdateSkillInstanceResponse2 = (UpdateSkillInstanceResponse);

export type UpdateSkillInstanceError = unknown;

export type PinSkillInstanceData = {
    body: PinSkillInstanceRequest;
};

export type PinSkillInstanceResponse = (BaseResponse);

export type PinSkillInstanceError = unknown;

export type UnpinSkillInstanceData = {
    body: UnpinSkillInstanceRequest;
};

export type UnpinSkillInstanceResponse = (BaseResponse);

export type UnpinSkillInstanceError = unknown;

export type DeleteSkillInstanceData = {
    body: DeleteSkillInstanceRequest;
};

export type DeleteSkillInstanceResponse = (BaseResponse);

export type DeleteSkillInstanceError = unknown;

export type ListSkillTriggersData = {
    query?: {
        /**
         * Page number
         */
        page?: number;
        /**
         * Page size
         */
        pageSize?: number;
        /**
         * Skill ID
         */
        skillId?: string;
    };
};

export type ListSkillTriggersResponse = (ListSkillTriggerResponse);

export type ListSkillTriggersError = unknown;

export type CreateSkillTriggerData = {
    /**
     * Skill trigger creation request
     */
    body: CreateSkillTriggerRequest;
};

export type CreateSkillTriggerResponse2 = (CreateSkillTriggerResponse);

export type CreateSkillTriggerError = unknown;

export type UpdateSkillTriggerData = {
    /**
     * Skill trigger update request
     */
    body: UpdateSkillTriggerRequest;
};

export type UpdateSkillTriggerResponse2 = (UpdateSkillTriggerResponse);

export type UpdateSkillTriggerError = unknown;

export type DeleteSkillTriggerData = {
    body: DeleteSkillTriggerRequest;
};

export type DeleteSkillTriggerResponse = (BaseResponse);

export type DeleteSkillTriggerError = unknown;

export type ListSkillJobsData = {
    query?: {
        /**
         * Job status
         */
        jobStatus?: SkillJobStatus;
        /**
         * Page number
         */
        page?: number;
        /**
         * Page size
         */
        pageSize?: number;
        /**
         * Skill ID
         */
        skillId?: string;
    };
};

export type ListSkillJobsResponse2 = (ListSkillJobsResponse);

export type ListSkillJobsError = unknown;

export type GetSkillJobDetailData = {
    query?: {
        /**
         * Job ID
         */
        jobId?: string;
    };
};

export type GetSkillJobDetailResponse2 = (GetSkillJobDetailResponse);

export type GetSkillJobDetailError = unknown;

export type ListConversationsData = {
    query?: {
        /**
         * Order
         */
        order?: ListOrder;
        /**
         * Page number
         */
        page?: number;
        /**
         * Page size
         */
        pageSize?: number;
        /**
         * Project ID
         */
        projectId?: string;
    };
};

export type ListConversationsResponse = (ListConversationResponse);

export type ListConversationsError = unknown;

export type GetConversationDetailData = {
    path: {
        /**
         * Conversation ID
         */
        convId: string;
    };
};

export type GetConversationDetailResponse2 = (GetConversationDetailResponse);

export type GetConversationDetailError = unknown;

export type GetSettingsResponse = (GetUserSettingsResponse);

export type GetSettingsError = unknown;

export type UpdateSettingsData = {
    body: UpdateUserSettingsRequest;
};

export type UpdateSettingsResponse = (BaseResponse);

export type UpdateSettingsError = unknown;

export type CheckSettingsFieldData = {
    query: {
        /**
         * Settings field
         */
        field: 'name' | 'email';
        /**
         * Field value
         */
        value: string;
    };
};

export type CheckSettingsFieldResponse2 = (CheckSettingsFieldResponse);

export type CheckSettingsFieldError = unknown;

export type GetSubscriptionPlanResponse = (unknown);

export type GetSubscriptionPlanError = unknown;

export type GetSubscriptionUsageResponse2 = (GetSubscriptionUsageResponse);

export type GetSubscriptionUsageError = unknown;

export type ListModelsResponse2 = (ListModelsResponse);

export type ListModelsError = unknown;

export type CreateCheckoutSessionData = {
    body: CreateCheckoutSessionRequest;
};

export type CreateCheckoutSessionResponse2 = (CreateCheckoutSessionResponse);

export type CreateCheckoutSessionError = unknown;

export type CreatePortalSessionResponse2 = (CreatePortalSessionResponse);

export type CreatePortalSessionError = unknown;

export type SearchData = {
    body: SearchRequest;
};

export type SearchResponse2 = (SearchResponse);

export type SearchError = unknown;

export type MultiLingualWebSearchData = {
    body: MultiLingualWebSearchRequest;
};

export type MultiLingualWebSearchResponse2 = (MultiLingualWebSearchResponse);

export type MultiLingualWebSearchError = unknown;

export type ScrapeData = {
    body: ScrapeWeblinkRequest;
};

export type ScrapeResponse = (ScrapeWeblinkResponse);

export type ScrapeError = unknown;

export type UploadData = {
    body: UploadRequest;
};

export type UploadResponse2 = (UploadResponse);

export type UploadError = unknown;

export type ServeStaticResponse = (unknown);

export type ServeStaticError = unknown;