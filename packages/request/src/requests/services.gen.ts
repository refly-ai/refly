// This file is auto-generated by @hey-api/openapi-ts

import {
  createClient,
  createConfig,
  type Options,
  formDataBodySerializer,
} from '@hey-api/client-fetch';
import type {
  ExtractVariablesData,
  ExtractVariablesError,
  ExtractVariablesResponse,
  GenerateAppTemplateData,
  GenerateAppTemplateError,
  GenerateAppTemplateResponse,
  ListMcpServersData,
  ListMcpServersError,
  ListMcpServersResponse2,
  CreateMcpServerData,
  CreateMcpServerError,
  CreateMcpServerResponse,
  UpdateMcpServerData,
  UpdateMcpServerError,
  UpdateMcpServerResponse,
  DeleteMcpServerData,
  DeleteMcpServerError,
  DeleteMcpServerResponse2,
  ValidateMcpServerData,
  ValidateMcpServerError,
  ValidateMcpServerResponse2,
  ListPagesData,
  ListPagesError,
  ListPagesResponse2,
  GetPageDetailData,
  GetPageDetailError,
  GetPageDetailResponse,
  UpdatePageData,
  UpdatePageError,
  UpdatePageResponse2,
  DeletePageData,
  DeletePageError,
  DeletePageResponse2,
  SharePageData,
  SharePageError,
  SharePageResponse2,
  DeletePageNodeData,
  DeletePageNodeError,
  DeletePageNodeResponse2,
  GetPageByCanvasIdData,
  GetPageByCanvasIdError,
  GetPageByCanvasIdResponse,
  AddNodesToCanvasPageData,
  AddNodesToCanvasPageError,
  AddNodesToCanvasPageResponse,
  GetAuthConfigError,
  GetAuthConfigResponse,
  RefreshTokenError,
  RefreshTokenResponse,
  EmailSignupData2,
  EmailSignupError,
  EmailSignupResponse2,
  EmailLoginData2,
  EmailLoginError,
  EmailLoginResponse2,
  CreateVerificationData2,
  CreateVerificationError,
  CreateVerificationResponse2,
  ResendVerificationData,
  ResendVerificationError,
  ResendVerificationResponse,
  CheckVerificationData,
  CheckVerificationError,
  CheckVerificationResponse,
  ListAccountsData,
  ListAccountsError,
  ListAccountsResponse2,
  LogoutError,
  LogoutResponse,
  CheckToolOauthStatusData,
  CheckToolOauthStatusError,
  CheckToolOauthStatusResponse,
  GetCollabTokenError,
  GetCollabTokenResponse2,
  ListCanvasesData,
  ListCanvasesError,
  ListCanvasesResponse,
  GetCanvasDetailData,
  GetCanvasDetailError,
  GetCanvasDetailResponse2,
  GetCanvasDataData,
  GetCanvasDataError,
  GetCanvasDataResponse2,
  ExportCanvasData,
  ExportCanvasError,
  ExportCanvasResponse2,
  ImportCanvasData,
  ImportCanvasError,
  ImportCanvasResponse,
  CreateCanvasData,
  CreateCanvasError,
  CreateCanvasResponse,
  DuplicateCanvasData,
  DuplicateCanvasError,
  DuplicateCanvasResponse,
  UpdateCanvasData,
  UpdateCanvasError,
  UpdateCanvasResponse,
  DeleteCanvasData,
  DeleteCanvasError,
  DeleteCanvasResponse,
  AutoNameCanvasData,
  AutoNameCanvasError,
  AutoNameCanvasResponse2,
  GetCanvasStateData,
  GetCanvasStateError,
  GetCanvasStateResponse2,
  SetCanvasStateData,
  SetCanvasStateError,
  SetCanvasStateResponse,
  GetCanvasTransactionsData,
  GetCanvasTransactionsError,
  GetCanvasTransactionsResponse2,
  SyncCanvasStateData,
  SyncCanvasStateError,
  SyncCanvasStateResponse2,
  CreateCanvasVersionData,
  CreateCanvasVersionError,
  CreateCanvasVersionResponse2,
  GetWorkflowVariablesData,
  GetWorkflowVariablesError,
  GetWorkflowVariablesResponse2,
  UpdateWorkflowVariablesData,
  UpdateWorkflowVariablesError,
  UpdateWorkflowVariablesResponse2,
  ListCanvasTemplatesData,
  ListCanvasTemplatesError,
  ListCanvasTemplatesResponse,
  CreateCanvasTemplateData,
  CreateCanvasTemplateError,
  CreateCanvasTemplateResponse,
  UpdateCanvasTemplateData,
  UpdateCanvasTemplateError,
  UpdateCanvasTemplateResponse,
  ListCanvasTemplateCategoriesError,
  ListCanvasTemplateCategoriesResponse,
  ListResourcesData,
  ListResourcesError,
  ListResourcesResponse,
  GetResourceDetailData,
  GetResourceDetailError,
  GetResourceDetailResponse2,
  UpdateResourceData,
  UpdateResourceError,
  UpdateResourceResponse,
  CreateResourceData,
  CreateResourceError,
  CreateResourceResponse,
  CreateResourceWithFileData,
  CreateResourceWithFileError,
  CreateResourceWithFileResponse,
  BatchCreateResourceData,
  BatchCreateResourceError,
  BatchCreateResourceResponse2,
  ReindexResourceData,
  ReindexResourceError,
  ReindexResourceResponse2,
  DeleteResourceData,
  DeleteResourceError,
  DeleteResourceResponse,
  ListDocumentsData,
  ListDocumentsError,
  ListDocumentsResponse,
  GetDocumentDetailData,
  GetDocumentDetailError,
  GetDocumentDetailResponse2,
  ExportDocumentData,
  ExportDocumentError,
  ExportDocumentResponse,
  UpdateDocumentData,
  UpdateDocumentError,
  UpdateDocumentResponse,
  CreateDocumentData,
  CreateDocumentError,
  CreateDocumentResponse,
  DeleteDocumentData,
  DeleteDocumentError,
  DeleteDocumentResponse,
  BatchUpdateDocumentData,
  BatchUpdateDocumentError,
  BatchUpdateDocumentResponse,
  ListProjectsData,
  ListProjectsError,
  ListProjectsResponse,
  GetProjectDetailData,
  GetProjectDetailError,
  GetProjectDetailResponse2,
  CreateProjectData,
  CreateProjectError,
  CreateProjectResponse,
  UpdateProjectData,
  UpdateProjectError,
  UpdateProjectResponse,
  UpdateProjectItemsData,
  UpdateProjectItemsError,
  UpdateProjectItemsResponse,
  DeleteProjectData,
  DeleteProjectError,
  DeleteProjectResponse,
  DeleteProjectItemsData,
  DeleteProjectItemsError,
  DeleteProjectItemsResponse,
  ListCodeArtifactsData,
  ListCodeArtifactsError,
  ListCodeArtifactsResponse,
  GetCodeArtifactDetailData,
  GetCodeArtifactDetailError,
  GetCodeArtifactDetailResponse2,
  CreateCodeArtifactData,
  CreateCodeArtifactError,
  CreateCodeArtifactResponse,
  UpdateCodeArtifactData,
  UpdateCodeArtifactError,
  UpdateCodeArtifactResponse,
  CreateShareData,
  CreateShareError,
  CreateShareResponse2,
  ListSharesData,
  ListSharesError,
  ListSharesResponse,
  DeleteShareData,
  DeleteShareError,
  DeleteShareResponse,
  DuplicateShareData,
  DuplicateShareError,
  DuplicateShareResponse2,
  ListLabelClassesData,
  ListLabelClassesError,
  ListLabelClassesResponse2,
  CreateLabelClassData,
  CreateLabelClassError,
  CreateLabelClassResponse,
  UpdateLabelClassData,
  UpdateLabelClassError,
  UpdateLabelClassResponse,
  DeleteLabelClassData,
  DeleteLabelClassError,
  DeleteLabelClassResponse,
  ListLabelInstancesData,
  ListLabelInstancesError,
  ListLabelInstancesResponse2,
  CreateLabelInstanceData,
  CreateLabelInstanceError,
  CreateLabelInstanceResponse,
  UpdateLabelInstanceData,
  UpdateLabelInstanceError,
  UpdateLabelInstanceResponse,
  DeleteLabelInstanceData,
  DeleteLabelInstanceError,
  DeleteLabelInstanceResponse,
  ListActionsError,
  ListActionsResponse,
  GetActionResultData,
  GetActionResultError,
  GetActionResultResponse2,
  AbortActionData,
  AbortActionError,
  AbortActionResponse,
  ListSkillsError,
  ListSkillsResponse,
  InvokeSkillData,
  InvokeSkillError,
  InvokeSkillResponse2,
  StreamInvokeSkillData,
  StreamInvokeSkillError,
  StreamInvokeSkillResponse,
  ListSkillInstancesData,
  ListSkillInstancesError,
  ListSkillInstancesResponse,
  CreateSkillInstanceData,
  CreateSkillInstanceError,
  CreateSkillInstanceResponse2,
  UpdateSkillInstanceData,
  UpdateSkillInstanceError,
  UpdateSkillInstanceResponse2,
  PinSkillInstanceData,
  PinSkillInstanceError,
  PinSkillInstanceResponse,
  UnpinSkillInstanceData,
  UnpinSkillInstanceError,
  UnpinSkillInstanceResponse,
  DeleteSkillInstanceData,
  DeleteSkillInstanceError,
  DeleteSkillInstanceResponse,
  ListSkillTriggersData,
  ListSkillTriggersError,
  ListSkillTriggersResponse,
  CreateSkillTriggerData,
  CreateSkillTriggerError,
  CreateSkillTriggerResponse2,
  UpdateSkillTriggerData,
  UpdateSkillTriggerError,
  UpdateSkillTriggerResponse2,
  DeleteSkillTriggerData,
  DeleteSkillTriggerError,
  DeleteSkillTriggerResponse,
  GenerateMediaData,
  GenerateMediaError,
  GenerateMediaResponse,
  CreatePilotSessionData,
  CreatePilotSessionError,
  CreatePilotSessionResponse,
  UpdatePilotSessionData,
  UpdatePilotSessionError,
  UpdatePilotSessionResponse,
  ListPilotSessionsData,
  ListPilotSessionsError,
  ListPilotSessionsResponse2,
  GetPilotSessionDetailData,
  GetPilotSessionDetailError,
  GetPilotSessionDetailResponse2,
  RecoverPilotSessionData,
  RecoverPilotSessionError,
  RecoverPilotSessionResponse,
  ListCopilotSessionsData,
  ListCopilotSessionsError,
  ListCopilotSessionsResponse2,
  GetCopilotSessionDetailData,
  GetCopilotSessionDetailError,
  GetCopilotSessionDetailResponse2,
  InitializeWorkflowData,
  InitializeWorkflowError,
  InitializeWorkflowResponse2,
  GetWorkflowDetailData,
  GetWorkflowDetailError,
  GetWorkflowDetailResponse2,
  CreateWorkflowAppData,
  CreateWorkflowAppError,
  CreateWorkflowAppResponse2,
  DeleteWorkflowAppData,
  DeleteWorkflowAppError,
  DeleteWorkflowAppResponse,
  GetWorkflowAppDetailData,
  GetWorkflowAppDetailError,
  GetWorkflowAppDetailResponse2,
  ExecuteWorkflowAppData,
  ExecuteWorkflowAppError,
  ExecuteWorkflowAppResponse2,
  ListWorkflowAppsData,
  ListWorkflowAppsError,
  ListWorkflowAppsResponse2,
  GetSettingsError,
  GetSettingsResponse,
  UpdateSettingsData,
  UpdateSettingsError,
  UpdateSettingsResponse,
  CheckSettingsFieldData,
  CheckSettingsFieldError,
  CheckSettingsFieldResponse2,
  GetCreditRechargeData,
  GetCreditRechargeError,
  GetCreditRechargeResponse2,
  GetCreditUsageData,
  GetCreditUsageError,
  GetCreditUsageResponse2,
  GetCreditBalanceError,
  GetCreditBalanceResponse,
  GetSubscriptionPlansError,
  GetSubscriptionPlansResponse2,
  GetSubscriptionUsageError,
  GetSubscriptionUsageResponse2,
  ListModelsError,
  ListModelsResponse2,
  CreateCheckoutSessionData,
  CreateCheckoutSessionError,
  CreateCheckoutSessionResponse2,
  CreatePortalSessionError,
  CreatePortalSessionResponse2,
  SearchData,
  SearchError,
  SearchResponse2,
  MultiLingualWebSearchData,
  MultiLingualWebSearchError,
  MultiLingualWebSearchResponse2,
  ListProvidersData,
  ListProvidersError,
  ListProvidersResponse2,
  CreateProviderData,
  CreateProviderError,
  CreateProviderResponse,
  UpdateProviderData,
  UpdateProviderError,
  UpdateProviderResponse,
  DeleteProviderData,
  DeleteProviderError,
  DeleteProviderResponse,
  TestProviderConnectionData,
  TestProviderConnectionError,
  TestProviderConnectionResponse2,
  ListProviderItemsData,
  ListProviderItemsError,
  ListProviderItemsResponse2,
  ListProviderItemOptionsData,
  ListProviderItemOptionsError,
  ListProviderItemOptionsResponse2,
  CreateProviderItemData,
  CreateProviderItemError,
  CreateProviderItemResponse,
  BatchCreateProviderItemsData,
  BatchCreateProviderItemsError,
  BatchCreateProviderItemsResponse,
  UpdateProviderItemData,
  UpdateProviderItemError,
  UpdateProviderItemResponse,
  BatchUpdateProviderItemsData,
  BatchUpdateProviderItemsError,
  BatchUpdateProviderItemsResponse,
  DeleteProviderItemData,
  DeleteProviderItemError,
  DeleteProviderItemResponse,
  ListToolsData,
  ListToolsError,
  ListToolsResponse2,
  ListToolsetInventoryError,
  ListToolsetInventoryResponse2,
  ListToolsetsData,
  ListToolsetsError,
  ListToolsetsResponse2,
  CreateToolsetData,
  CreateToolsetError,
  CreateToolsetResponse,
  UpdateToolsetData,
  UpdateToolsetError,
  UpdateToolsetResponse,
  DeleteToolsetData,
  DeleteToolsetError,
  DeleteToolsetResponse,
  ScrapeData,
  ScrapeError,
  ScrapeResponse,
  UploadData,
  UploadError,
  UploadResponse2,
  ServeStaticError,
  ServeStaticResponse,
  ConvertData,
  ConvertError,
  ConvertResponse2,
} from './types.gen';

export const client = createClient(createConfig());

/**
 * Extract variables from prompt
 * Unified variable extraction interface that supports two modes:
 * - 'direct': Directly update Canvas variables
 * - 'candidate': Return candidate solutions for user selection
 *
 * This endpoint analyzes natural language prompts and extracts workflow variables
 * based on the context of existing Canvas variables and content.
 *
 */
export const extractVariables = <ThrowOnError extends boolean = false>(
  options: Options<ExtractVariablesData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    ExtractVariablesResponse,
    ExtractVariablesError,
    ThrowOnError
  >({
    ...options,
    url: '/variable-extraction/extract',
  });
};

/**
 * Generate APP publish template
 * Generate a user intent template based on all original prompts and variables in a Canvas.
 * This endpoint analyzes the Canvas content and creates a template with placeholders
 * that can be used for APP publishing and user interaction.
 *
 */
export const generateAppTemplate = <ThrowOnError extends boolean = false>(
  options: Options<GenerateAppTemplateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    GenerateAppTemplateResponse,
    GenerateAppTemplateError,
    ThrowOnError
  >({
    ...options,
    url: '/variable-extraction/generate-template',
  });
};

/**
 * List MCP servers
 * List all MCP servers for a user
 */
export const listMcpServers = <ThrowOnError extends boolean = false>(
  options?: Options<ListMcpServersData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListMcpServersResponse2,
    ListMcpServersError,
    ThrowOnError
  >({
    ...options,
    url: '/mcp-server/list',
  });
};

/**
 * Create MCP server
 * Create a new MCP server
 */
export const createMcpServer = <ThrowOnError extends boolean = false>(
  options: Options<CreateMcpServerData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateMcpServerResponse,
    CreateMcpServerError,
    ThrowOnError
  >({
    ...options,
    url: '/mcp-server/create',
  });
};

/**
 * Update MCP server
 * Update an existing MCP server
 */
export const updateMcpServer = <ThrowOnError extends boolean = false>(
  options: Options<UpdateMcpServerData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    UpdateMcpServerResponse,
    UpdateMcpServerError,
    ThrowOnError
  >({
    ...options,
    url: '/mcp-server/update',
  });
};

/**
 * Delete MCP server
 * Delete an existing MCP server
 */
export const deleteMcpServer = <ThrowOnError extends boolean = false>(
  options: Options<DeleteMcpServerData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    DeleteMcpServerResponse2,
    DeleteMcpServerError,
    ThrowOnError
  >({
    ...options,
    url: '/mcp-server/delete',
  });
};

/**
 * Validate MCP server
 * Validate MCP server configuration
 */
export const validateMcpServer = <ThrowOnError extends boolean = false>(
  options: Options<ValidateMcpServerData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    ValidateMcpServerResponse2,
    ValidateMcpServerError,
    ThrowOnError
  >({
    ...options,
    url: '/mcp-server/validate',
  });
};

/**
 * List user pages
 * List all pages for a user
 */
export const listPages = <ThrowOnError extends boolean = false>(
  options?: Options<ListPagesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<ListPagesResponse2, ListPagesError, ThrowOnError>({
    ...options,
    url: '/pages',
  });
};

/**
 * Get page detail
 * Get detail of a specific page
 */
export const getPageDetail = <ThrowOnError extends boolean = false>(
  options: Options<GetPageDetailData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetPageDetailResponse, GetPageDetailError, ThrowOnError>({
    ...options,
    url: '/pages/{pageId}',
  });
};

/**
 * Update a page
 * Update a specific page
 */
export const updatePage = <ThrowOnError extends boolean = false>(
  options: Options<UpdatePageData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<UpdatePageResponse2, UpdatePageError, ThrowOnError>({
    ...options,
    url: '/pages/{pageId}',
  });
};

/**
 * Delete a page
 * Delete a specific page
 */
export const deletePage = <ThrowOnError extends boolean = false>(
  options: Options<DeletePageData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<DeletePageResponse2, DeletePageError, ThrowOnError>({
    ...options,
    url: '/pages/{pageId}',
  });
};

/**
 * Share a page
 * Create a share link for a specific page
 */
export const sharePage = <ThrowOnError extends boolean = false>(
  options: Options<SharePageData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<SharePageResponse2, SharePageError, ThrowOnError>({
    ...options,
    url: '/pages/{pageId}/share',
  });
};

/**
 * Delete a node from a page
 * Remove a specific node from a page
 */
export const deletePageNode = <ThrowOnError extends boolean = false>(
  options: Options<DeletePageNodeData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeletePageNodeResponse2,
    DeletePageNodeError,
    ThrowOnError
  >({
    ...options,
    url: '/pages/{pageId}/nodes/{nodeId}',
  });
};

/**
 * Get page by canvas ID
 * Retrieve the page associated with a specific canvas
 */
export const getPageByCanvasId = <ThrowOnError extends boolean = false>(
  options: Options<GetPageByCanvasIdData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetPageByCanvasIdResponse,
    GetPageByCanvasIdError,
    ThrowOnError
  >({
    ...options,
    url: '/pages/canvas/{canvasId}',
  });
};

/**
 * Add nodes to canvas page
 * Add nodes to a page associated with a specific canvas. If no page exists, a new one will be created.
 */
export const addNodesToCanvasPage = <ThrowOnError extends boolean = false>(
  options: Options<AddNodesToCanvasPageData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AddNodesToCanvasPageResponse,
    AddNodesToCanvasPageError,
    ThrowOnError
  >({
    ...options,
    url: '/pages/canvas/{canvasId}/nodes',
  });
};

/**
 * Get auth config
 * Get auth config
 */
export const getAuthConfig = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetAuthConfigResponse, GetAuthConfigError, ThrowOnError>({
    ...options,
    url: '/auth/config',
  });
};

/**
 * Refresh token
 * Refresh token
 */
export const refreshToken = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).post<RefreshTokenResponse, RefreshTokenError, ThrowOnError>({
    ...options,
    url: '/auth/refreshToken',
  });
};

/**
 * Sign up with email
 * Sign up with email
 */
export const emailSignup = <ThrowOnError extends boolean = false>(
  options: Options<EmailSignupData2, ThrowOnError>,
) => {
  return (options?.client ?? client).post<EmailSignupResponse2, EmailSignupError, ThrowOnError>({
    ...options,
    url: '/auth/email/signup',
  });
};

/**
 * Login with email
 * Login with email
 */
export const emailLogin = <ThrowOnError extends boolean = false>(
  options: Options<EmailLoginData2, ThrowOnError>,
) => {
  return (options?.client ?? client).post<EmailLoginResponse2, EmailLoginError, ThrowOnError>({
    ...options,
    url: '/auth/email/login',
  });
};

/**
 * Create verification session
 * Create a verification session
 */
export const createVerification = <ThrowOnError extends boolean = false>(
  options: Options<CreateVerificationData2, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateVerificationResponse2,
    CreateVerificationError,
    ThrowOnError
  >({
    ...options,
    url: '/auth/verification/create',
  });
};

/**
 * Resend verification
 * Resend verification
 */
export const resendVerification = <ThrowOnError extends boolean = false>(
  options: Options<ResendVerificationData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    ResendVerificationResponse,
    ResendVerificationError,
    ThrowOnError
  >({
    ...options,
    url: '/auth/verification/resend',
  });
};

/**
 * Verify authentication session
 * Verify account creation
 */
export const checkVerification = <ThrowOnError extends boolean = false>(
  options: Options<CheckVerificationData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CheckVerificationResponse,
    CheckVerificationError,
    ThrowOnError
  >({
    ...options,
    url: '/auth/verification/check',
  });
};

/**
 * List auth accounts
 * List auth accounts
 */
export const listAccounts = <ThrowOnError extends boolean = false>(
  options?: Options<ListAccountsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<ListAccountsResponse2, ListAccountsError, ThrowOnError>({
    ...options,
    url: '/auth/account/list',
  });
};

/**
 * Logout
 * Logout
 */
export const logout = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).post<LogoutResponse, LogoutError, ThrowOnError>({
    ...options,
    url: '/auth/logout',
  });
};

/**
 * Check tool OAuth status
 * Check if user has OAuth authorization for specific provider and scopes
 */
export const checkToolOauthStatus = <ThrowOnError extends boolean = false>(
  options: Options<CheckToolOauthStatusData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    CheckToolOauthStatusResponse,
    CheckToolOauthStatusError,
    ThrowOnError
  >({
    ...options,
    url: '/auth/tool-oauth/status',
  });
};

/**
 * Get collab token
 * Get collab token
 */
export const getCollabToken = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetCollabTokenResponse2,
    GetCollabTokenError,
    ThrowOnError
  >({
    ...options,
    url: '/collab/getToken',
  });
};

/**
 * List user canvases
 * List all canvases for a user
 */
export const listCanvases = <ThrowOnError extends boolean = false>(
  options?: Options<ListCanvasesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<ListCanvasesResponse, ListCanvasesError, ThrowOnError>({
    ...options,
    url: '/canvas/list',
  });
};

/**
 * Get canvas detail
 * Get canvas detail
 */
export const getCanvasDetail = <ThrowOnError extends boolean = false>(
  options: Options<GetCanvasDetailData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetCanvasDetailResponse2,
    GetCanvasDetailError,
    ThrowOnError
  >({
    ...options,
    url: '/canvas/detail',
  });
};

/**
 * Get canvas data
 * Get public canvas data without checking user identity
 */
export const getCanvasData = <ThrowOnError extends boolean = false>(
  options: Options<GetCanvasDataData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetCanvasDataResponse2, GetCanvasDataError, ThrowOnError>({
    ...options,
    url: '/canvas/data',
  });
};

/**
 * Export canvas
 * Export canvas
 */
export const exportCanvas = <ThrowOnError extends boolean = false>(
  options: Options<ExportCanvasData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<ExportCanvasResponse2, ExportCanvasError, ThrowOnError>({
    ...options,
    url: '/canvas/export',
  });
};

/**
 * Import canvas
 * Import canvas
 */
export const importCanvas = <ThrowOnError extends boolean = false>(
  options: Options<ImportCanvasData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<ImportCanvasResponse, ImportCanvasError, ThrowOnError>({
    ...options,
    ...formDataBodySerializer,
    headers: {
      'Content-Type': null,
      ...options?.headers,
    },
    url: '/canvas/import',
  });
};

/**
 * Create canvas
 * Create a new canvas
 */
export const createCanvas = <ThrowOnError extends boolean = false>(
  options: Options<CreateCanvasData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<CreateCanvasResponse, CreateCanvasError, ThrowOnError>({
    ...options,
    url: '/canvas/create',
  });
};

/**
 * Duplicate canvas
 * Duplicate an existing canvas
 */
export const duplicateCanvas = <ThrowOnError extends boolean = false>(
  options: Options<DuplicateCanvasData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    DuplicateCanvasResponse,
    DuplicateCanvasError,
    ThrowOnError
  >({
    ...options,
    url: '/canvas/duplicate',
  });
};

/**
 * Update canvas
 * Update an existing canvas
 */
export const updateCanvas = <ThrowOnError extends boolean = false>(
  options: Options<UpdateCanvasData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<UpdateCanvasResponse, UpdateCanvasError, ThrowOnError>({
    ...options,
    url: '/canvas/update',
  });
};

/**
 * Delete canvas
 * Delete an existing canvas
 */
export const deleteCanvas = <ThrowOnError extends boolean = false>(
  options: Options<DeleteCanvasData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<DeleteCanvasResponse, DeleteCanvasError, ThrowOnError>({
    ...options,
    url: '/canvas/delete',
  });
};

/**
 * Auto name canvas
 * Auto name a canvas
 */
export const autoNameCanvas = <ThrowOnError extends boolean = false>(
  options: Options<AutoNameCanvasData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AutoNameCanvasResponse2,
    AutoNameCanvasError,
    ThrowOnError
  >({
    ...options,
    url: '/canvas/autoName',
  });
};

/**
 * Get canvas state
 * Get canvas state
 */
export const getCanvasState = <ThrowOnError extends boolean = false>(
  options: Options<GetCanvasStateData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetCanvasStateResponse2,
    GetCanvasStateError,
    ThrowOnError
  >({
    ...options,
    url: '/canvas/getState',
  });
};

/**
 * Set canvas state
 * Set canvas state, should only be used in conflict resolution
 */
export const setCanvasState = <ThrowOnError extends boolean = false>(
  options: Options<SetCanvasStateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    SetCanvasStateResponse,
    SetCanvasStateError,
    ThrowOnError
  >({
    ...options,
    url: '/canvas/setState',
  });
};

/**
 * Get canvas transactions
 * Get canvas transactions
 */
export const getCanvasTransactions = <ThrowOnError extends boolean = false>(
  options: Options<GetCanvasTransactionsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetCanvasTransactionsResponse2,
    GetCanvasTransactionsError,
    ThrowOnError
  >({
    ...options,
    url: '/canvas/getTx',
  });
};

/**
 * Sync canvas state
 * Sync canvas state
 */
export const syncCanvasState = <ThrowOnError extends boolean = false>(
  options: Options<SyncCanvasStateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    SyncCanvasStateResponse2,
    SyncCanvasStateError,
    ThrowOnError
  >({
    ...options,
    url: '/canvas/syncState',
  });
};

/**
 * Create canvas version
 * Create a new canvas version
 */
export const createCanvasVersion = <ThrowOnError extends boolean = false>(
  options: Options<CreateCanvasVersionData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateCanvasVersionResponse2,
    CreateCanvasVersionError,
    ThrowOnError
  >({
    ...options,
    url: '/canvas/createVersion',
  });
};

/**
 * Get workflow variables
 * Get workflow variables for a canvas
 */
export const getWorkflowVariables = <ThrowOnError extends boolean = false>(
  options: Options<GetWorkflowVariablesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetWorkflowVariablesResponse2,
    GetWorkflowVariablesError,
    ThrowOnError
  >({
    ...options,
    url: '/canvas/workflow/variables',
  });
};

/**
 * Update workflow variables
 * Update workflow variables for a canvas
 */
export const updateWorkflowVariables = <ThrowOnError extends boolean = false>(
  options: Options<UpdateWorkflowVariablesData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    UpdateWorkflowVariablesResponse2,
    UpdateWorkflowVariablesError,
    ThrowOnError
  >({
    ...options,
    url: '/canvas/workflow/variables',
  });
};

/**
 * List canvas templates
 * List all canvas templates
 */
export const listCanvasTemplates = <ThrowOnError extends boolean = false>(
  options?: Options<ListCanvasTemplatesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListCanvasTemplatesResponse,
    ListCanvasTemplatesError,
    ThrowOnError
  >({
    ...options,
    url: '/template/list',
  });
};

/**
 * Create canvas template
 * Create a new canvas template
 */
export const createCanvasTemplate = <ThrowOnError extends boolean = false>(
  options: Options<CreateCanvasTemplateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateCanvasTemplateResponse,
    CreateCanvasTemplateError,
    ThrowOnError
  >({
    ...options,
    url: '/template/create',
  });
};

/**
 * Update canvas template
 * Update an existing canvas template
 */
export const updateCanvasTemplate = <ThrowOnError extends boolean = false>(
  options: Options<UpdateCanvasTemplateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    UpdateCanvasTemplateResponse,
    UpdateCanvasTemplateError,
    ThrowOnError
  >({
    ...options,
    url: '/template/update',
  });
};

/**
 * List canvas template categories
 * List all canvas template categories
 */
export const listCanvasTemplateCategories = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListCanvasTemplateCategoriesResponse,
    ListCanvasTemplateCategoriesError,
    ThrowOnError
  >({
    ...options,
    url: '/template/category/list',
  });
};

/**
 * List resources
 * List all resources
 */
export const listResources = <ThrowOnError extends boolean = false>(
  options?: Options<ListResourcesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<ListResourcesResponse, ListResourcesError, ThrowOnError>({
    ...options,
    url: '/knowledge/resource/list',
  });
};

/**
 * Get resource detail
 * Return resource detail along with its document content
 */
export const getResourceDetail = <ThrowOnError extends boolean = false>(
  options: Options<GetResourceDetailData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetResourceDetailResponse2,
    GetResourceDetailError,
    ThrowOnError
  >({
    ...options,
    url: '/knowledge/resource/detail',
  });
};

/**
 * Update resource
 * Update an existing resource
 */
export const updateResource = <ThrowOnError extends boolean = false>(
  options: Options<UpdateResourceData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    UpdateResourceResponse,
    UpdateResourceError,
    ThrowOnError
  >({
    ...options,
    url: '/knowledge/resource/update',
  });
};

/**
 * Create new resource
 * Create a new resource
 */
export const createResource = <ThrowOnError extends boolean = false>(
  options: Options<CreateResourceData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateResourceResponse,
    CreateResourceError,
    ThrowOnError
  >({
    ...options,
    url: '/knowledge/resource/create',
  });
};

/**
 * Create new resource with file upload
 * Create a new resource with file upload in a single request
 */
export const createResourceWithFile = <ThrowOnError extends boolean = false>(
  options: Options<CreateResourceWithFileData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateResourceWithFileResponse,
    CreateResourceWithFileError,
    ThrowOnError
  >({
    ...options,
    ...formDataBodySerializer,
    headers: {
      'Content-Type': null,
      ...options?.headers,
    },
    url: '/knowledge/resource/createWithFile',
  });
};

/**
 * Batch create new resources
 * Batch create a new resource
 */
export const batchCreateResource = <ThrowOnError extends boolean = false>(
  options: Options<BatchCreateResourceData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    BatchCreateResourceResponse2,
    BatchCreateResourceError,
    ThrowOnError
  >({
    ...options,
    url: '/knowledge/resource/batchCreate',
  });
};

/**
 * Reindex resource
 * Reindex an existing resource
 */
export const reindexResource = <ThrowOnError extends boolean = false>(
  options: Options<ReindexResourceData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    ReindexResourceResponse2,
    ReindexResourceError,
    ThrowOnError
  >({
    ...options,
    url: '/knowledge/resource/reindex',
  });
};

/**
 * Delete resource
 * Delete an existing resource
 */
export const deleteResource = <ThrowOnError extends boolean = false>(
  options: Options<DeleteResourceData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    DeleteResourceResponse,
    DeleteResourceError,
    ThrowOnError
  >({
    ...options,
    url: '/knowledge/resource/delete',
  });
};

/**
 * List user documents
 * List all documents for a user
 */
export const listDocuments = <ThrowOnError extends boolean = false>(
  options?: Options<ListDocumentsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<ListDocumentsResponse, ListDocumentsError, ThrowOnError>({
    ...options,
    url: '/knowledge/document/list',
  });
};

/**
 * Get canvas detail
 * Return document detail
 */
export const getDocumentDetail = <ThrowOnError extends boolean = false>(
  options: Options<GetDocumentDetailData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetDocumentDetailResponse2,
    GetDocumentDetailError,
    ThrowOnError
  >({
    ...options,
    url: '/knowledge/document/detail',
  });
};

/**
 * Export document to Markdown, DOCX or PDF format
 * Export a document to Markdown, DOCX or PDF format
 */
export const exportDocument = <ThrowOnError extends boolean = false>(
  options: Options<ExportDocumentData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<ExportDocumentResponse, ExportDocumentError, ThrowOnError>(
    {
      ...options,
      url: '/knowledge/document/export/document',
    },
  );
};

/**
 * Update canvas
 * Update an existing document
 */
export const updateDocument = <ThrowOnError extends boolean = false>(
  options: Options<UpdateDocumentData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    UpdateDocumentResponse,
    UpdateDocumentError,
    ThrowOnError
  >({
    ...options,
    url: '/knowledge/document/update',
  });
};

/**
 * Create new canvas
 * Create a new document
 */
export const createDocument = <ThrowOnError extends boolean = false>(
  options: Options<CreateDocumentData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateDocumentResponse,
    CreateDocumentError,
    ThrowOnError
  >({
    ...options,
    url: '/knowledge/document/create',
  });
};

/**
 * Delete canvas
 * Delete an existing document
 */
export const deleteDocument = <ThrowOnError extends boolean = false>(
  options: Options<DeleteDocumentData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    DeleteDocumentResponse,
    DeleteDocumentError,
    ThrowOnError
  >({
    ...options,
    url: '/knowledge/document/delete',
  });
};

/**
 * Batch update documents
 * Batch update existing documents
 */
export const batchUpdateDocument = <ThrowOnError extends boolean = false>(
  options: Options<BatchUpdateDocumentData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    BatchUpdateDocumentResponse,
    BatchUpdateDocumentError,
    ThrowOnError
  >({
    ...options,
    url: '/knowledge/document/batchUpdate',
  });
};

/**
 * List projects
 * List all projects
 */
export const listProjects = <ThrowOnError extends boolean = false>(
  options?: Options<ListProjectsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<ListProjectsResponse, ListProjectsError, ThrowOnError>({
    ...options,
    url: '/project/list',
  });
};

/**
 * Get project detail
 * Get project detail by project ID
 */
export const getProjectDetail = <ThrowOnError extends boolean = false>(
  options: Options<GetProjectDetailData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetProjectDetailResponse2,
    GetProjectDetailError,
    ThrowOnError
  >({
    ...options,
    url: '/project/detail',
  });
};

/**
 * Create new project
 * Create a new project
 */
export const createProject = <ThrowOnError extends boolean = false>(
  options: Options<CreateProjectData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<CreateProjectResponse, CreateProjectError, ThrowOnError>({
    ...options,
    url: '/project/new',
  });
};

/**
 * Update project
 * Update an existing project
 */
export const updateProject = <ThrowOnError extends boolean = false>(
  options: Options<UpdateProjectData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<UpdateProjectResponse, UpdateProjectError, ThrowOnError>({
    ...options,
    url: '/project/update',
  });
};

/**
 * Update items in project
 * Update items in a project
 */
export const updateProjectItems = <ThrowOnError extends boolean = false>(
  options: Options<UpdateProjectItemsData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    UpdateProjectItemsResponse,
    UpdateProjectItemsError,
    ThrowOnError
  >({
    ...options,
    url: '/project/updateItems',
  });
};

/**
 * Delete project
 * Delete an existing project
 */
export const deleteProject = <ThrowOnError extends boolean = false>(
  options: Options<DeleteProjectData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<DeleteProjectResponse, DeleteProjectError, ThrowOnError>({
    ...options,
    url: '/project/delete',
  });
};

/**
 * Delete items in project
 * Delete items in a project
 */
export const deleteProjectItems = <ThrowOnError extends boolean = false>(
  options: Options<DeleteProjectItemsData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    DeleteProjectItemsResponse,
    DeleteProjectItemsError,
    ThrowOnError
  >({
    ...options,
    url: '/project/deleteItems',
  });
};

/**
 * List code artifacts
 * List all code artifacts
 */
export const listCodeArtifacts = <ThrowOnError extends boolean = false>(
  options?: Options<ListCodeArtifactsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListCodeArtifactsResponse,
    ListCodeArtifactsError,
    ThrowOnError
  >({
    ...options,
    url: '/codeArtifact/list',
  });
};

/**
 * Get code artifact detail
 * Get code artifact detail by artifact ID
 */
export const getCodeArtifactDetail = <ThrowOnError extends boolean = false>(
  options: Options<GetCodeArtifactDetailData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetCodeArtifactDetailResponse2,
    GetCodeArtifactDetailError,
    ThrowOnError
  >({
    ...options,
    url: '/codeArtifact/detail',
  });
};

/**
 * Create code artifact
 * Create new code artifact
 */
export const createCodeArtifact = <ThrowOnError extends boolean = false>(
  options: Options<CreateCodeArtifactData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateCodeArtifactResponse,
    CreateCodeArtifactError,
    ThrowOnError
  >({
    ...options,
    url: '/codeArtifact/new',
  });
};

/**
 * Update code artifact
 * Update code artifact by artifact ID
 */
export const updateCodeArtifact = <ThrowOnError extends boolean = false>(
  options: Options<UpdateCodeArtifactData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    UpdateCodeArtifactResponse,
    UpdateCodeArtifactError,
    ThrowOnError
  >({
    ...options,
    url: '/codeArtifact/update',
  });
};

/**
 * Create share
 * Create new share for canvas
 */
export const createShare = <ThrowOnError extends boolean = false>(
  options: Options<CreateShareData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<CreateShareResponse2, CreateShareError, ThrowOnError>({
    ...options,
    url: '/share/new',
  });
};

/**
 * List shares
 * List all shares
 */
export const listShares = <ThrowOnError extends boolean = false>(
  options?: Options<ListSharesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<ListSharesResponse, ListSharesError, ThrowOnError>({
    ...options,
    url: '/share/list',
  });
};

/**
 * Delete share
 * Delete an existing share
 */
export const deleteShare = <ThrowOnError extends boolean = false>(
  options: Options<DeleteShareData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<DeleteShareResponse, DeleteShareError, ThrowOnError>({
    ...options,
    url: '/share/delete',
  });
};

/**
 * Duplicate share
 * Duplicate an existing share
 */
export const duplicateShare = <ThrowOnError extends boolean = false>(
  options: Options<DuplicateShareData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    DuplicateShareResponse2,
    DuplicateShareError,
    ThrowOnError
  >({
    ...options,
    url: '/share/duplicate',
  });
};

/**
 * List label classes
 * List all label classes
 */
export const listLabelClasses = <ThrowOnError extends boolean = false>(
  options?: Options<ListLabelClassesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListLabelClassesResponse2,
    ListLabelClassesError,
    ThrowOnError
  >({
    ...options,
    url: '/label/class/list',
  });
};

/**
 * Create new label class
 * Create a new label class
 */
export const createLabelClass = <ThrowOnError extends boolean = false>(
  options: Options<CreateLabelClassData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateLabelClassResponse,
    CreateLabelClassError,
    ThrowOnError
  >({
    ...options,
    url: '/label/class/new',
  });
};

/**
 * Update label class
 * Update an existing label class
 */
export const updateLabelClass = <ThrowOnError extends boolean = false>(
  options: Options<UpdateLabelClassData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    UpdateLabelClassResponse,
    UpdateLabelClassError,
    ThrowOnError
  >({
    ...options,
    url: '/label/class/update',
  });
};

/**
 * Delete label class
 * Delete an existing label class
 */
export const deleteLabelClass = <ThrowOnError extends boolean = false>(
  options: Options<DeleteLabelClassData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    DeleteLabelClassResponse,
    DeleteLabelClassError,
    ThrowOnError
  >({
    ...options,
    url: '/label/class/delete',
  });
};

/**
 * List labels
 * List all label instances
 */
export const listLabelInstances = <ThrowOnError extends boolean = false>(
  options?: Options<ListLabelInstancesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListLabelInstancesResponse2,
    ListLabelInstancesError,
    ThrowOnError
  >({
    ...options,
    url: '/label/instance/list',
  });
};

/**
 * Create new label instance
 * Create new label instance
 */
export const createLabelInstance = <ThrowOnError extends boolean = false>(
  options: Options<CreateLabelInstanceData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateLabelInstanceResponse,
    CreateLabelInstanceError,
    ThrowOnError
  >({
    ...options,
    url: '/label/instance/new',
  });
};

/**
 * Update label
 * Update an existing label instance
 */
export const updateLabelInstance = <ThrowOnError extends boolean = false>(
  options: Options<UpdateLabelInstanceData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    UpdateLabelInstanceResponse,
    UpdateLabelInstanceError,
    ThrowOnError
  >({
    ...options,
    url: '/label/instance/update',
  });
};

/**
 * Delete label
 * Delete an existing label
 */
export const deleteLabelInstance = <ThrowOnError extends boolean = false>(
  options: Options<DeleteLabelInstanceData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    DeleteLabelInstanceResponse,
    DeleteLabelInstanceError,
    ThrowOnError
  >({
    ...options,
    url: '/label/instance/delete',
  });
};

/**
 * List actions
 * List all actions
 */
export const listActions = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<ListActionsResponse, ListActionsError, ThrowOnError>({
    ...options,
    url: '/action/list',
  });
};

/**
 * Get action result
 * Get action result by result ID
 */
export const getActionResult = <ThrowOnError extends boolean = false>(
  options: Options<GetActionResultData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetActionResultResponse2,
    GetActionResultError,
    ThrowOnError
  >({
    ...options,
    url: '/action/result',
  });
};

/**
 * Abort action
 * Abort an action
 */
export const abortAction = <ThrowOnError extends boolean = false>(
  options: Options<AbortActionData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<AbortActionResponse, AbortActionError, ThrowOnError>({
    ...options,
    url: '/action/abort',
  });
};

/**
 * List skills
 * List all skills
 */
export const listSkills = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<ListSkillsResponse, ListSkillsError, ThrowOnError>({
    ...options,
    url: '/skill/list',
  });
};

/**
 * Invoke skill
 * Invoke a skill
 */
export const invokeSkill = <ThrowOnError extends boolean = false>(
  options: Options<InvokeSkillData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<InvokeSkillResponse2, InvokeSkillError, ThrowOnError>({
    ...options,
    url: '/skill/invoke',
  });
};

/**
 * Stream invoke skill
 * Invoke a skill and return SSE stream
 */
export const streamInvokeSkill = <ThrowOnError extends boolean = false>(
  options: Options<StreamInvokeSkillData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    StreamInvokeSkillResponse,
    StreamInvokeSkillError,
    ThrowOnError
  >({
    ...options,
    url: '/skill/streamInvoke',
  });
};

/**
 * List skill instances
 * List skill instances for a user
 */
export const listSkillInstances = <ThrowOnError extends boolean = false>(
  options?: Options<ListSkillInstancesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListSkillInstancesResponse,
    ListSkillInstancesError,
    ThrowOnError
  >({
    ...options,
    url: '/skill/instance/list',
  });
};

/**
 * Create new skill instance
 * Create a new skill instance for user
 */
export const createSkillInstance = <ThrowOnError extends boolean = false>(
  options: Options<CreateSkillInstanceData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateSkillInstanceResponse2,
    CreateSkillInstanceError,
    ThrowOnError
  >({
    ...options,
    url: '/skill/instance/new',
  });
};

/**
 * Update skill instance
 * Update an existing skill instance
 */
export const updateSkillInstance = <ThrowOnError extends boolean = false>(
  options: Options<UpdateSkillInstanceData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    UpdateSkillInstanceResponse2,
    UpdateSkillInstanceError,
    ThrowOnError
  >({
    ...options,
    url: '/skill/instance/update',
  });
};

/**
 * Pin skill instance
 * Pin an existing skill instance
 */
export const pinSkillInstance = <ThrowOnError extends boolean = false>(
  options: Options<PinSkillInstanceData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PinSkillInstanceResponse,
    PinSkillInstanceError,
    ThrowOnError
  >({
    ...options,
    url: '/skill/instance/pin',
  });
};

/**
 * Unpin skill instance
 * Unpin an existing skill instance
 */
export const unpinSkillInstance = <ThrowOnError extends boolean = false>(
  options: Options<UnpinSkillInstanceData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    UnpinSkillInstanceResponse,
    UnpinSkillInstanceError,
    ThrowOnError
  >({
    ...options,
    url: '/skill/instance/unpin',
  });
};

/**
 * Delete skill instance
 * Delete an existing skill instance
 */
export const deleteSkillInstance = <ThrowOnError extends boolean = false>(
  options: Options<DeleteSkillInstanceData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    DeleteSkillInstanceResponse,
    DeleteSkillInstanceError,
    ThrowOnError
  >({
    ...options,
    url: '/skill/instance/delete',
  });
};

/**
 * List skill triggers
 * List all skill triggers
 */
export const listSkillTriggers = <ThrowOnError extends boolean = false>(
  options?: Options<ListSkillTriggersData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListSkillTriggersResponse,
    ListSkillTriggersError,
    ThrowOnError
  >({
    ...options,
    url: '/skill/trigger/list',
  });
};

/**
 * Create new trigger
 * Create a new trigger
 */
export const createSkillTrigger = <ThrowOnError extends boolean = false>(
  options: Options<CreateSkillTriggerData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateSkillTriggerResponse2,
    CreateSkillTriggerError,
    ThrowOnError
  >({
    ...options,
    url: '/skill/trigger/new',
  });
};

/**
 * Update trigger
 * Update an existing trigger
 */
export const updateSkillTrigger = <ThrowOnError extends boolean = false>(
  options: Options<UpdateSkillTriggerData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    UpdateSkillTriggerResponse2,
    UpdateSkillTriggerError,
    ThrowOnError
  >({
    ...options,
    url: '/skill/trigger/update',
  });
};

/**
 * Delete trigger
 * Delete an existing trigger
 */
export const deleteSkillTrigger = <ThrowOnError extends boolean = false>(
  options: Options<DeleteSkillTriggerData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    DeleteSkillTriggerResponse,
    DeleteSkillTriggerError,
    ThrowOnError
  >({
    ...options,
    url: '/skill/trigger/delete',
  });
};

/**
 * Generate multimedia content
 * Generate image, video or audio based on the given prompt
 */
export const generateMedia = <ThrowOnError extends boolean = false>(
  options: Options<GenerateMediaData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<GenerateMediaResponse, GenerateMediaError, ThrowOnError>({
    ...options,
    url: '/media/generate',
  });
};

/**
 * Create new pilot session
 * Create a new pilot session
 */
export const createPilotSession = <ThrowOnError extends boolean = false>(
  options: Options<CreatePilotSessionData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreatePilotSessionResponse,
    CreatePilotSessionError,
    ThrowOnError
  >({
    ...options,
    url: '/pilot/session/new',
  });
};

/**
 * Update pilot session
 * Update an existing pilot session
 */
export const updatePilotSession = <ThrowOnError extends boolean = false>(
  options: Options<UpdatePilotSessionData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    UpdatePilotSessionResponse,
    UpdatePilotSessionError,
    ThrowOnError
  >({
    ...options,
    url: '/pilot/session/update',
  });
};

/**
 * List pilot sessions
 * List all pilot sessions
 */
export const listPilotSessions = <ThrowOnError extends boolean = false>(
  options?: Options<ListPilotSessionsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListPilotSessionsResponse2,
    ListPilotSessionsError,
    ThrowOnError
  >({
    ...options,
    url: '/pilot/session/list',
  });
};

/**
 * Get pilot session detail
 * Get detail for a pilot session
 */
export const getPilotSessionDetail = <ThrowOnError extends boolean = false>(
  options: Options<GetPilotSessionDetailData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetPilotSessionDetailResponse2,
    GetPilotSessionDetailError,
    ThrowOnError
  >({
    ...options,
    url: '/pilot/session/detail',
  });
};

/**
 * Recover pilot session
 * Recover a failed pilot session by retrying failed steps. Can recover all failed steps or specific steps.
 */
export const recoverPilotSession = <ThrowOnError extends boolean = false>(
  options: Options<RecoverPilotSessionData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    RecoverPilotSessionResponse,
    RecoverPilotSessionError,
    ThrowOnError
  >({
    ...options,
    url: '/pilot/session/recover',
  });
};

/**
 * List copilot sessions
 * List all copilot sessions
 */
export const listCopilotSessions = <ThrowOnError extends boolean = false>(
  options?: Options<ListCopilotSessionsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListCopilotSessionsResponse2,
    ListCopilotSessionsError,
    ThrowOnError
  >({
    ...options,
    url: '/copilot/session/list',
  });
};

/**
 * Get copilot session detail
 * Get detail for a copilot session
 */
export const getCopilotSessionDetail = <ThrowOnError extends boolean = false>(
  options: Options<GetCopilotSessionDetailData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetCopilotSessionDetailResponse2,
    GetCopilotSessionDetailError,
    ThrowOnError
  >({
    ...options,
    url: '/copilot/session/detail',
  });
};

/**
 * Initialize workflow execution
 * Initialize a new workflow execution for a canvas
 */
export const initializeWorkflow = <ThrowOnError extends boolean = false>(
  options: Options<InitializeWorkflowData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    InitializeWorkflowResponse2,
    InitializeWorkflowError,
    ThrowOnError
  >({
    ...options,
    url: '/workflow/initialize',
  });
};

/**
 * Get workflow detail
 * Get detail for a workflow execution
 */
export const getWorkflowDetail = <ThrowOnError extends boolean = false>(
  options: Options<GetWorkflowDetailData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetWorkflowDetailResponse2,
    GetWorkflowDetailError,
    ThrowOnError
  >({
    ...options,
    url: '/workflow/detail',
  });
};

/**
 * Create new workflow app
 * Create a new workflow app
 */
export const createWorkflowApp = <ThrowOnError extends boolean = false>(
  options: Options<CreateWorkflowAppData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateWorkflowAppResponse2,
    CreateWorkflowAppError,
    ThrowOnError
  >({
    ...options,
    url: '/workflow-app/new',
  });
};

/**
 * Delete workflow app
 * Delete a workflow app
 */
export const deleteWorkflowApp = <ThrowOnError extends boolean = false>(
  options: Options<DeleteWorkflowAppData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    DeleteWorkflowAppResponse,
    DeleteWorkflowAppError,
    ThrowOnError
  >({
    ...options,
    url: '/workflow-app/delete',
  });
};

/**
 * Get workflow app detail
 * Get detail for a workflow app
 */
export const getWorkflowAppDetail = <ThrowOnError extends boolean = false>(
  options: Options<GetWorkflowAppDetailData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetWorkflowAppDetailResponse2,
    GetWorkflowAppDetailError,
    ThrowOnError
  >({
    ...options,
    url: '/workflow-app/detail',
  });
};

/**
 * Execute workflow app
 * Execute a workflow app
 */
export const executeWorkflowApp = <ThrowOnError extends boolean = false>(
  options: Options<ExecuteWorkflowAppData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    ExecuteWorkflowAppResponse2,
    ExecuteWorkflowAppError,
    ThrowOnError
  >({
    ...options,
    url: '/workflow-app/execute',
  });
};

/**
 * List workflow apps
 * List workflow apps for a user, optionally filtered by canvasId
 */
export const listWorkflowApps = <ThrowOnError extends boolean = false>(
  options?: Options<ListWorkflowAppsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListWorkflowAppsResponse2,
    ListWorkflowAppsError,
    ThrowOnError
  >({
    ...options,
    url: '/workflow-app/list',
  });
};

/**
 * Get user settings
 * Return settings for current user
 */
export const getSettings = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetSettingsResponse, GetSettingsError, ThrowOnError>({
    ...options,
    url: '/user/settings',
  });
};

/**
 * Update user settings
 * Update settings for current user
 */
export const updateSettings = <ThrowOnError extends boolean = false>(
  options: Options<UpdateSettingsData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<UpdateSettingsResponse, UpdateSettingsError, ThrowOnError>(
    {
      ...options,
      url: '/user/settings',
    },
  );
};

/**
 * Check settings field
 * Given a settings field, check if the given value is valid
 */
export const checkSettingsField = <ThrowOnError extends boolean = false>(
  options: Options<CheckSettingsFieldData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    CheckSettingsFieldResponse2,
    CheckSettingsFieldError,
    ThrowOnError
  >({
    ...options,
    url: '/user/checkSettingsField',
  });
};

/**
 * Get credit recharge
 * Get credit recharge
 */
export const getCreditRecharge = <ThrowOnError extends boolean = false>(
  options?: Options<GetCreditRechargeData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetCreditRechargeResponse2,
    GetCreditRechargeError,
    ThrowOnError
  >({
    ...options,
    url: '/credit/recharge',
  });
};

/**
 * Get credit usage
 * Get credit usage
 */
export const getCreditUsage = <ThrowOnError extends boolean = false>(
  options?: Options<GetCreditUsageData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetCreditUsageResponse2,
    GetCreditUsageError,
    ThrowOnError
  >({
    ...options,
    url: '/credit/usage',
  });
};

/**
 * Get credit balance
 * Get credit balance
 */
export const getCreditBalance = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetCreditBalanceResponse,
    GetCreditBalanceError,
    ThrowOnError
  >({
    ...options,
    url: '/credit/balance',
  });
};

/**
 * Get subscription plans
 * Get subscription plans
 */
export const getSubscriptionPlans = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetSubscriptionPlansResponse2,
    GetSubscriptionPlansError,
    ThrowOnError
  >({
    ...options,
    url: '/subscription/plans',
  });
};

/**
 * Get subscription usage
 * Get subscription usage
 */
export const getSubscriptionUsage = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetSubscriptionUsageResponse2,
    GetSubscriptionUsageError,
    ThrowOnError
  >({
    ...options,
    url: '/subscription/usage',
  });
};

/**
 * List models
 * List all available models
 */
export const listModels = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<ListModelsResponse2, ListModelsError, ThrowOnError>({
    ...options,
    url: '/subscription/modelList',
  });
};

/**
 * Create checkout session
 * Create a checkout session
 */
export const createCheckoutSession = <ThrowOnError extends boolean = false>(
  options: Options<CreateCheckoutSessionData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateCheckoutSessionResponse2,
    CreateCheckoutSessionError,
    ThrowOnError
  >({
    ...options,
    url: '/subscription/createCheckoutSession',
  });
};

/**
 * Create portal session
 * Create a portal session
 */
export const createPortalSession = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreatePortalSessionResponse2,
    CreatePortalSessionError,
    ThrowOnError
  >({
    ...options,
    url: '/subscription/createPortalSession',
  });
};

/**
 * Search
 * Search for canvases, resources, documents, etc.
 */
export const search = <ThrowOnError extends boolean = false>(
  options: Options<SearchData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<SearchResponse2, SearchError, ThrowOnError>({
    ...options,
    url: '/search',
  });
};

/**
 * Multilingual Web Search
 * Search web content across multiple languages
 */
export const multiLingualWebSearch = <ThrowOnError extends boolean = false>(
  options: Options<MultiLingualWebSearchData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    MultiLingualWebSearchResponse2,
    MultiLingualWebSearchError,
    ThrowOnError
  >({
    ...options,
    url: '/search/multilingualSearch',
  });
};

/**
 * List providers
 * List all available providers
 */
export const listProviders = <ThrowOnError extends boolean = false>(
  options?: Options<ListProvidersData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<ListProvidersResponse2, ListProvidersError, ThrowOnError>({
    ...options,
    url: '/provider/list',
  });
};

/**
 * Create provider
 * Create a new provider
 */
export const createProvider = <ThrowOnError extends boolean = false>(
  options: Options<CreateProviderData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateProviderResponse,
    CreateProviderError,
    ThrowOnError
  >({
    ...options,
    url: '/provider/create',
  });
};

/**
 * Update provider
 * Update an existing provider
 */
export const updateProvider = <ThrowOnError extends boolean = false>(
  options: Options<UpdateProviderData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    UpdateProviderResponse,
    UpdateProviderError,
    ThrowOnError
  >({
    ...options,
    url: '/provider/update',
  });
};

/**
 * Delete provider
 * Delete an existing provider
 */
export const deleteProvider = <ThrowOnError extends boolean = false>(
  options: Options<DeleteProviderData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    DeleteProviderResponse,
    DeleteProviderError,
    ThrowOnError
  >({
    ...options,
    url: '/provider/delete',
  });
};

/**
 * Test provider connection
 * Test provider API connection and availability
 */
export const testProviderConnection = <ThrowOnError extends boolean = false>(
  options: Options<TestProviderConnectionData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    TestProviderConnectionResponse2,
    TestProviderConnectionError,
    ThrowOnError
  >({
    ...options,
    url: '/provider/test-connection',
  });
};

/**
 * List provider items
 * List all available provider items
 */
export const listProviderItems = <ThrowOnError extends boolean = false>(
  options?: Options<ListProviderItemsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListProviderItemsResponse2,
    ListProviderItemsError,
    ThrowOnError
  >({
    ...options,
    url: '/provider/item/list',
  });
};

/**
 * List provider item options
 * List all available provider item options for a given provider
 */
export const listProviderItemOptions = <ThrowOnError extends boolean = false>(
  options: Options<ListProviderItemOptionsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListProviderItemOptionsResponse2,
    ListProviderItemOptionsError,
    ThrowOnError
  >({
    ...options,
    url: '/provider/item/option/list',
  });
};

/**
 * Create model item
 * Create a new model item
 */
export const createProviderItem = <ThrowOnError extends boolean = false>(
  options: Options<CreateProviderItemData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateProviderItemResponse,
    CreateProviderItemError,
    ThrowOnError
  >({
    ...options,
    url: '/provider/item/create',
  });
};

/**
 * Batch create model items
 * Batch create model items
 */
export const batchCreateProviderItems = <ThrowOnError extends boolean = false>(
  options: Options<BatchCreateProviderItemsData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    BatchCreateProviderItemsResponse,
    BatchCreateProviderItemsError,
    ThrowOnError
  >({
    ...options,
    url: '/provider/item/batchCreate',
  });
};

/**
 * Update model item
 * Update an existing model item
 */
export const updateProviderItem = <ThrowOnError extends boolean = false>(
  options: Options<UpdateProviderItemData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    UpdateProviderItemResponse,
    UpdateProviderItemError,
    ThrowOnError
  >({
    ...options,
    url: '/provider/item/update',
  });
};

/**
 * Batch update provider items
 * Batch update provider items
 */
export const batchUpdateProviderItems = <ThrowOnError extends boolean = false>(
  options: Options<BatchUpdateProviderItemsData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    BatchUpdateProviderItemsResponse,
    BatchUpdateProviderItemsError,
    ThrowOnError
  >({
    ...options,
    url: '/provider/item/batchUpdate',
  });
};

/**
 * Delete provider item
 * Delete an existing model item
 */
export const deleteProviderItem = <ThrowOnError extends boolean = false>(
  options: Options<DeleteProviderItemData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    DeleteProviderItemResponse,
    DeleteProviderItemError,
    ThrowOnError
  >({
    ...options,
    url: '/provider/item/delete',
  });
};

/**
 * List tool
 * List all available tools, including regular tools and MCP servers.
 */
export const listTools = <ThrowOnError extends boolean = false>(
  options?: Options<ListToolsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<ListToolsResponse2, ListToolsError, ThrowOnError>({
    ...options,
    url: '/tool/list',
  });
};

/**
 * List toolset inventory
 * List all available toolsets in inventory, including uninstalled.
 */
export const listToolsetInventory = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListToolsetInventoryResponse2,
    ListToolsetInventoryError,
    ThrowOnError
  >({
    ...options,
    url: '/tool/inventory/list',
  });
};

/**
 * List toolsets
 * List all installed toolsets
 */
export const listToolsets = <ThrowOnError extends boolean = false>(
  options?: Options<ListToolsetsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<ListToolsetsResponse2, ListToolsetsError, ThrowOnError>({
    ...options,
    url: '/tool/toolset/list',
  });
};

/**
 * Create regular tool
 * Create a new regular tool
 */
export const createToolset = <ThrowOnError extends boolean = false>(
  options: Options<CreateToolsetData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<CreateToolsetResponse, CreateToolsetError, ThrowOnError>({
    ...options,
    url: '/tool/toolset/create',
  });
};

/**
 * Update toolset
 * Update an existing toolset
 */
export const updateToolset = <ThrowOnError extends boolean = false>(
  options: Options<UpdateToolsetData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<UpdateToolsetResponse, UpdateToolsetError, ThrowOnError>({
    ...options,
    url: '/tool/toolset/update',
  });
};

/**
 * Delete toolset
 * Delete an existing toolset
 */
export const deleteToolset = <ThrowOnError extends boolean = false>(
  options: Options<DeleteToolsetData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<DeleteToolsetResponse, DeleteToolsetError, ThrowOnError>({
    ...options,
    url: '/tool/toolset/delete',
  });
};

/**
 * Scrape
 * Scrape a weblink
 */
export const scrape = <ThrowOnError extends boolean = false>(
  options: Options<ScrapeData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<ScrapeResponse, ScrapeError, ThrowOnError>({
    ...options,
    url: '/misc/scrape',
  });
};

/**
 * Upload
 * Upload a file
 */
export const upload = <ThrowOnError extends boolean = false>(
  options: Options<UploadData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<UploadResponse2, UploadError, ThrowOnError>({
    ...options,
    ...formDataBodySerializer,
    headers: {
      'Content-Type': null,
      ...options?.headers,
    },
    url: '/misc/upload',
  });
};

/**
 * Serve static
 * Serve static files (only for local testing)
 */
export const serveStatic = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<ServeStaticResponse, ServeStaticError, ThrowOnError>({
    ...options,
    url: '/misc/static/{fileName}',
  });
};

/**
 * Convert between formats
 * Convert content between different formats (e.g., HTML to Markdown)
 */
export const convert = <ThrowOnError extends boolean = false>(
  options: Options<ConvertData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<ConvertResponse2, ConvertError, ThrowOnError>({
    ...options,
    ...formDataBodySerializer,
    headers: {
      'Content-Type': null,
      ...options?.headers,
    },
    url: '/misc/convert',
  });
};
