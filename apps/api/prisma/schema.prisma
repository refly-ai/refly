generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["tracing"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                Int      @id @default(autoincrement())
  userId            Int      @map("user_id")
  type              String   @map("type")
  provider          String   @map("provider")
  providerAccountId String   @map("provider_account_id")
  refreshToken      String?  @map("refresh_token")
  accessToken       String?  @map("access_token")
  expiresAt         Int?     @map("expires_at")
  scope             String?  @map("scope")
  /// 创建时间
  createdAt         DateTime @default(now()) @map("created_at") @db.Timestamptz()
  /// 更新时间
  updatedAt         DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  /// 主键
  id            Int       @id @default(autoincrement())
  /// UID
  uid           String    @unique @map("uid")
  /// 头像
  avatar        String?   @map("avatar")
  /// 用户名
  name          String?   @map("name")
  /// 邮箱
  email         String?   @unique @map("email")
  /// 邮箱是否已验证
  emailVerified DateTime? @map("email_verified") @db.Timestamptz()
  /// 密码
  password      String?   @map("password")
  /// 界面语言设置
  uiLocale      String?   @default("") @map("ui_locale")
  /// 输出语言设置
  outputLocale  String?   @default("") @map("output_locale")
  /// 创建时间
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  /// 更新时间
  updatedAt     DateTime  @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("users")
}

// Conversation
model Conversation {
  /// Primary key
  id              Int      @id @default(autoincrement())
  /// Conversation ID
  convId          String   @unique @default("") @map("conv_id")
  /// UID
  uid             String   @default("") @map("uid")
  /// Conversation title
  title           String   @map("title")
  /// Last message content
  lastMessage     String   @default("") @map("last_message")
  /// Message count
  messageCount    Int      @default(0) @map("message_count")
  /// Conversation origin page
  origin          String   @default("") @map("origin")
  // Conversation origin page url
  originPageUrl   String   @default("") @map("origin_page_url")
  /// Conversation source page title
  originPageTitle String   @default("") @map("origin_page_title")
  /// Create timestamp
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz()
  /// Update timestamp
  updatedAt       DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@index([uid, updatedAt])
  @@map("conversations")
}

/// Conversation messages
model ChatMessage {
  /// Primary key
  id                    Int         @id @default(autoincrement())
  /// Message id
  msgId                 String      @default("") @map("msg_id")
  /// Conversation ID
  convId                String      @default("") @map("conv_id")
  /// Skill job ID
  jobId                 String      @default("") @map("job_id")
  /// Message type
  type                  MessageType @map("type")
  /// UID
  uid                   String      @default("") @map("uid")
  /// Message content
  content               String      @map("content")
  /// Skill metadata
  skillMeta             String      @default("{}") @map("skill_meta")
  /// Logs output
  logs                  String      @default("[]") @map("logs")
  /// Structured data output (JSON)
  structuredData        String      @default("{}") @map("structured_data")
  /// Errors
  errors                String?     @map("errors")
  /// Locale setting
  locale                String?     @default("") @map("locale")
  /// Create timestamp
  createdAt             DateTime    @default(now()) @map("created_at") @db.Timestamptz()
  /// Update timestamp
  updatedAt             DateTime    @updatedAt @map("updated_at") @db.Timestamptz()
  /// 会话选中 Weblink 配置，未来可能会变，先使用 string 保存
  selectedWeblinkConfig String?     @map("selected_weblink_config")

  @@index([convId, updatedAt])
  @@map("chat_messages")
}

model Resource {
  /// Primary key
  id           BigInt       @id @default(autoincrement())
  /// Resource id
  resourceId   String       @unique @map("resource_id")
  /// Resource type
  resourceType String       @default("") @map("resource_type")
  /// UID
  uid          String       @map("uid")
  /// Collection ID
  collectionId String       @default("") @map("collection_id")
  /// Word count
  wordCount    Int          @default(0) @map("word_count")
  /// Content of resource
  content      String       @default("") @map("content")
  /// Whether this resource is publicly accessible
  isPublic     Boolean      @default(false) @map("is_public")
  /// Whether this resource is readonly
  readOnly     Boolean      @default(false) @map("read_only")
  /// Index status
  indexStatus  String       @default("init") @map("index_status")
  /// Title
  title        String       @map("title")
  /// Resource metadata
  meta         String       @map("meta")
  /// Create timestamp
  createdAt    DateTime     @default(now()) @map("created_at") @db.Timestamptz()
  /// Update timestamp
  updatedAt    DateTime     @updatedAt @map("updated_at") @db.Timestamptz()
  /// Soft delete timestamp
  deletedAt    DateTime?    @map("deleted_at") @db.Timestamptz()
  /// Related collections
  collections  Collection[]

  @@index([uid, deletedAt, updatedAt])
  @@map("resources")
}

model Note {
  /// Primary key
  pk              BigInt    @id @default(autoincrement())
  /// Note id
  noteId          String    @unique @map("note_id")
  /// UID
  uid             String    @map("uid")
  /// Note title
  title           String    @default("Untitled") @map("title")
  /// Word count
  wordCount       Int       @default(0) @map("word_count")
  /// Content of resource
  content         String    @default("") @map("content")
  /// Yjs state storage key
  stateStorageKey String    @default("") @map("state_storage_key")
  /// Whether this note is publicly accessible
  isPublic        Boolean   @default(false) @map("is_public")
  /// Whether this note is readonly
  readOnly        Boolean   @default(false) @map("read_only")
  /// Create timestamp
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  /// Update timestamp
  updatedAt       DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  /// Soft delete timestamp
  deletedAt       DateTime? @map("deleted_at") @db.Timestamptz()

  @@index([uid, deletedAt, updatedAt])
  @@map("notes")
}

model Collection {
  /// Primary key
  id           BigInt     @id @default(autoincrement())
  /// Collection id
  collectionId String     @unique @map("collection_id")
  /// Collection title
  title        String     @map("title")
  /// Collection description
  description  String?    @map("description")
  /// UID
  uid          String     @map("uid")
  /// Whether this collection is public
  isPublic     Boolean    @default(false) @map("is_public")
  /// Create timestamp
  createdAt    DateTime   @default(now()) @map("created_at") @db.Timestamptz()
  /// Update timestamp
  updatedAt    DateTime   @updatedAt @map("updated_at") @db.Timestamptz()
  /// Soft delete timestamp
  deletedAt    DateTime?  @map("deleted_at") @db.Timestamptz()
  /// Related resources
  resources    Resource[]

  @@index([uid, updatedAt])
  @@map("collections")
}

/// User-defined skills.
model SkillInstance {
  /// Primary key
  pk               BigInt    @id @default(autoincrement())
  /// Skill id
  skillId          String    @unique @map("skill_id")
  /// Skill template name
  tplName          String    @default("") @map("tpl_name")
  /// Skill display name
  displayName      String    @default("") @map("display_name")
  /// Skill description
  description      String    @default("") @map("description")
  /// UID of skill owner
  uid              String    @map("uid")
  /// Skill invocation config (JSON)
  invocationConfig String    @default("{}") @map("invocation_config")
  /// Skill config schema (JSON)
  configSchema     String    @default("{}") @map("config_schema")
  /// Skill template config (JSON)
  tplConfig        String    @default("{}") @map("tpl_config")
  /// Create timestamp
  createdAt        DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  /// Update timestamp
  updatedAt        DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  /// Deletion timestamp
  deletedAt        DateTime? @map("deleted_at") @db.Timestamptz()

  @@index([uid, updatedAt])
  @@map("skill_instances")
}

model SkillTrigger {
  /// Primary key
  pk              BigInt    @id @default(autoincrement())
  /// Trigger display name
  displayName     String    @default("") @map("display_name")
  /// Trigger id
  triggerId       String    @unique @map("trigger_id")
  /// Trigger type
  triggerType     String    @map("trigger_type")
  /// Skill id
  skillId         String    @map("skill_id")
  /// Owner UID
  uid             String    @map("uid")
  /// Simple event name
  simpleEventName String?   @map("simple_event_name")
  /// Timer config (required when triggerType is `timer`)
  timerConfig     String?   @map("timer_config")
  /// Skill input
  input           String?   @map("input")
  /// Skill context
  context         String?   @map("context")
  /// Skill template config (JSON)
  tplConfig       String?   @map("tpl_config")
  /// Whether this skill is enabled
  enabled         Boolean   @map("enabled")
  /// Bull job id (for timer trigger)
  bullJobId       String?   @map("bull_job_id")
  /// Create timestamp
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  /// Update timestamp
  updatedAt       DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  /// Deletion timestamp
  deletedAt       DateTime? @map("deleted_at") @db.Timestamptz()

  @@index([skillId, deletedAt])
  @@map("skill_triggers")
}

model SkillJob {
  /// Primary key
  pk               BigInt   @id @default(autoincrement())
  /// Skill job id
  jobId            String   @unique @map("job_id")
  /// Skill id
  skillId          String   @map("skill_id")
  /// Skill display name
  skillDisplayName String   @map("skill_display_name")
  /// UID of skill owner
  uid              String   @map("uid")
  /// Input (JSON of `SkillInput`)
  input            String   @map("input")
  /// Context (JSON of `SkillContext`)
  context          String   @map("context")
  /// Skill template config (JSON)
  tplConfig        String   @default("{}") @map("tpl_config")
  /// Skill job status (refer to `SkillJobStatus`)
  status           String   @map("status")
  /// Skill trigger id
  triggerId        String?  @map("trigger_id")
  /// Conversation ID
  convId           String?  @map("conv_id")
  /// Create timestamp
  createdAt        DateTime @default(now()) @map("created_at") @db.Timestamptz()
  /// Update timestamp
  updatedAt        DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@index([uid, updatedAt])
  @@map("skill_jobs")
}

model LabelClass {
  /// Primary key
  pk           BigInt          @id @default(autoincrement())
  /// Label class ID
  labelClassId String          @unique @map("label_class_id")
  /// UID
  uid          String          @map("uid")
  /// Label kind icon
  icon         String          @default("") @map("icon")
  /// Label class name (must be unique for a single user)
  name         String          @map("name")
  /// Label display name
  displayName  String          @map("display_name")
  /// Label creation instruction prompt
  prompt       String          @map("prompt")
  /// Create timestamp
  createdAt    DateTime        @default(now()) @map("created_at") @db.Timestamptz()
  /// Update timestamp
  updatedAt    DateTime        @updatedAt @map("updated_at") @db.Timestamptz()
  /// Deletion timestamp
  deletedAt    DateTime?       @map("deleted_at") @db.Timestamptz()
  /// Related labels
  labels       LabelInstance[]

  @@unique([uid, name])
  @@index([uid, deletedAt, updatedAt])
  @@map("label_classes")
}

model LabelInstance {
  /// Primary key
  pk           BigInt     @id @default(autoincrement())
  /// Label ID
  labelId      String     @unique @map("label_id")
  /// Label class
  labelClass   LabelClass @relation(fields: [labelClassId], references: [labelClassId])
  /// Label class ID
  labelClassId String     @map("label_class_id")
  /// Label value
  value        String     @map("value")
  /// Entity type this label belongs to
  entityType   String     @map("entity_type")
  /// Entity ID this label belongs to (resourceId, collectionId, etc.)
  entityId     String     @map("entity_id")
  /// UID
  uid          String     @map("uid")
  /// Create timestamp
  createdAt    DateTime   @default(now()) @map("created_at") @db.Timestamptz()
  /// Update timestamp
  updatedAt    DateTime   @updatedAt @map("updated_at") @db.Timestamptz()
  /// Deletion timestamp
  deletedAt    DateTime?  @map("deleted_at") @db.Timestamptz()

  @@index([entityType, entityId])
  @@map("label_instances")
}

enum MessageType {
  ai
  human
  system
}
